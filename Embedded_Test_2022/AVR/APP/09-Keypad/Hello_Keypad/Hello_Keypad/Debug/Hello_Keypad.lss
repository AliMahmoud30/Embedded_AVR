
Hello_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000005da  0000064e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8a  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000366  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050b  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b8  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000629  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <main>:
#include "Hkeypad.h"
				
int main(void)
{
	/* Keypad init */
	Keypad_4_4_Init();
 1d2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Keypad_4_4_Init>
										
	/*LCD init*/
	LCD_inti();
 1d6:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_inti>
	
	unsigned char Value;
	unsigned char Flag=0;
 1da:	c0 e0       	ldi	r28, 0x00	; 0
		//_delay_ms(1000);
		if((Value!=0xFF)&&(Flag==0))
		{
			//_delay_ms(30);
			LCD_send_char(Value);
			Flag=1;
 1dc:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else if((Value==0xFF)&&(Flag==1))
		{
			Flag=0;	
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <main+0x12>
 1e2:	c1 2f       	mov	r28, r17
	unsigned char Flag=0;
	
    while(1)
    {
		//LCD_move_cursor(1,1);
		Value=Keypad_4_4_Read();
 1e4:	0e 94 3c 01 	call	0x278	; 0x278 <Keypad_4_4_Read>
		
		//LCD_send_char(Value);
		//_delay_ms(1000);
		if((Value!=0xFF)&&(Flag==0))
 1e8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <main+0x26>
 1ec:	cc 23       	and	r28, r28
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <main+0x12>
		{
			//_delay_ms(30);
			LCD_send_char(Value);
 1f0:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_char>
			Flag=1;
 1f4:	cd 2f       	mov	r28, r29
 1f6:	f6 cf       	rjmp	.-20     	; 0x1e4 <main+0x12>
		}
		else if((Value==0xFF)&&(Flag==1))
 1f8:	c1 30       	cpi	r28, 0x01	; 1
 1fa:	a1 f7       	brne	.-24     	; 0x1e4 <main+0x12>
 1fc:	f2 cf       	rjmp	.-28     	; 0x1e2 <main+0x10>

000001fe <Keypad_4_4_Init>:
#include "HKeypad_config.h"

void Keypad_4_4_Init(void)
{
	/*set Rows as Output Pins */
	DIO_Set_Pin_Direction(ROW_0,OUTPUT);
 1fe:	83 e3       	ldi	r24, 0x33	; 51
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_1,OUTPUT);
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_2,OUTPUT);
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_3,OUTPUT);
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*set columns as Input_PULL_UP Pins */
	DIO_Set_Pin_Direction(Col_0,INPUT);
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_1,INPUT);
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_2,INPUT);
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_3,INPUT);
 244:	83 e3       	ldi	r24, 0x33	; 51
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	DIO_Set_Pin_Value(Col_0,HIGH);
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_1,HIGH);
 258:	83 e3       	ldi	r24, 0x33	; 51
 25a:	65 e0       	ldi	r22, 0x05	; 5
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_2,HIGH);
 262:	83 e3       	ldi	r24, 0x33	; 51
 264:	66 e0       	ldi	r22, 0x06	; 6
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_3,HIGH);
 26c:	83 e3       	ldi	r24, 0x33	; 51
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 276:	08 95       	ret

00000278 <Keypad_4_4_Read>:


unsigned char Keypad_4_4_Read(void)
{
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	10 e0       	ldi	r17, 0x00	; 0
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
			{
				keypad_value=keypad_chr[ROW][COL];
 286:	0f 2e       	mov	r0, r31
 288:	f0 e6       	ldi	r31, 0x60	; 96
 28a:	ef 2e       	mov	r14, r31
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ff 2e       	mov	r15, r31
 290:	f0 2d       	mov	r31, r0
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
	{
		DIO_Set_Pin_Value(ROW_0,HIGH);
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_1,HIGH);
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_2,HIGH);
 2a6:	83 e3       	ldi	r24, 0x33	; 51
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_3,HIGH);
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	60 2f       	mov	r22, r16
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		for(COL=0;COL<4;COL++)
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
	DIO_Set_Pin_Value(Col_2,HIGH);
	DIO_Set_Pin_Value(Col_3,HIGH);
}


unsigned char Keypad_4_4_Read(void)
 2c6:	6c 2f       	mov	r22, r28
 2c8:	6c 5f       	subi	r22, 0xFC	; 252
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Get_Pin_value>
 2d0:	88 23       	and	r24, r24
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <Keypad_4_4_Read+0x78>
			{
				keypad_value=keypad_chr[ROW][COL];
 2d4:	c8 01       	movw	r24, r16
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	8c 0f       	add	r24, r28
 2e0:	91 1d       	adc	r25, r1
 2e2:	f7 01       	movw	r30, r14
 2e4:	e8 0f       	add	r30, r24
 2e6:	f9 1f       	adc	r31, r25
 2e8:	80 81       	ld	r24, Z
				break;
			}
		}
		if((keypad_value)!=0xFF)
 2ea:	8f 3f       	cpi	r24, 0xFF	; 255
 2ec:	21 f0       	breq	.+8      	; 0x2f6 <Keypad_4_4_Read+0x7e>
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <Keypad_4_4_Read+0x8a>
		DIO_Set_Pin_Value(ROW_1,HIGH);
		DIO_Set_Pin_Value(ROW_2,HIGH);
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
 2f0:	cf 5f       	subi	r28, 0xFF	; 255
 2f2:	c4 30       	cpi	r28, 0x04	; 4
 2f4:	41 f7       	brne	.-48     	; 0x2c6 <Keypad_4_4_Read+0x4e>
 2f6:	0f 5f       	subi	r16, 0xFF	; 255
 2f8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char ROW=0;
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
 2fa:	04 30       	cpi	r16, 0x04	; 4
 2fc:	11 05       	cpc	r17, r1
 2fe:	49 f6       	brne	.-110    	; 0x292 <Keypad_4_4_Read+0x1a>
 300:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
		
	}
	return keypad_value;
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	08 95       	ret

0000030e <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 30e:	89 e3       	ldi	r24, 0x39	; 57
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_Enable+0xe>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_Enable+0x14>
 322:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 324:	89 e3       	ldi	r24, 0x39	; 57
 326:	65 e0       	ldi	r22, 0x05	; 5
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 32e:	08 95       	ret

00000330 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 334:	48 2f       	mov	r20, r24
 336:	42 95       	swap	r20
 338:	4f 70       	andi	r20, 0x0F	; 15
 33a:	41 70       	andi	r20, 0x01	; 1
 33c:	89 e3       	ldi	r24, 0x39	; 57
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 344:	4c 2f       	mov	r20, r28
 346:	42 95       	swap	r20
 348:	46 95       	lsr	r20
 34a:	47 70       	andi	r20, 0x07	; 7
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 356:	4c 2f       	mov	r20, r28
 358:	42 95       	swap	r20
 35a:	46 95       	lsr	r20
 35c:	46 95       	lsr	r20
 35e:	43 70       	andi	r20, 0x03	; 3
 360:	41 70       	andi	r20, 0x01	; 1
 362:	89 e3       	ldi	r24, 0x39	; 57
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 36a:	4c 2f       	mov	r20, r28
 36c:	44 1f       	adc	r20, r20
 36e:	44 27       	eor	r20, r20
 370:	44 1f       	adc	r20, r20
 372:	89 e3       	ldi	r24, 0x39	; 57
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 37a:	89 e3       	ldi	r24, 0x39	; 57
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 384:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 388:	4c 2f       	mov	r20, r28
 38a:	41 70       	andi	r20, 0x01	; 1
 38c:	89 e3       	ldi	r24, 0x39	; 57
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 394:	4c 2f       	mov	r20, r28
 396:	46 95       	lsr	r20
 398:	41 70       	andi	r20, 0x01	; 1
 39a:	89 e3       	ldi	r24, 0x39	; 57
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 3a2:	4c 2f       	mov	r20, r28
 3a4:	46 95       	lsr	r20
 3a6:	46 95       	lsr	r20
 3a8:	41 70       	andi	r20, 0x01	; 1
 3aa:	89 e3       	ldi	r24, 0x39	; 57
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 3b2:	c6 95       	lsr	r28
 3b4:	c6 95       	lsr	r28
 3b6:	c6 95       	lsr	r28
 3b8:	4c 2f       	mov	r20, r28
 3ba:	41 70       	andi	r20, 0x01	; 1
 3bc:	89 e3       	ldi	r24, 0x39	; 57
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 3c4:	89 e3       	ldi	r24, 0x39	; 57
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 3ce:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Enable>
		
	 #endif
}
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <LCD_send_string>:

void LCD_send_string(char *data)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 3dc:	88 81       	ld	r24, Y
 3de:	88 23       	and	r24, r24
 3e0:	31 f0       	breq	.+12     	; 0x3ee <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 3e2:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 3e4:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 3e8:	89 91       	ld	r24, Y+
 3ea:	88 23       	and	r24, r24
 3ec:	d9 f7       	brne	.-10     	; 0x3e4 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 3f4:	cf 93       	push	r28
 3f6:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 3f8:	48 2f       	mov	r20, r24
 3fa:	42 95       	swap	r20
 3fc:	4f 70       	andi	r20, 0x0F	; 15
 3fe:	41 70       	andi	r20, 0x01	; 1
 400:	89 e3       	ldi	r24, 0x39	; 57
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 408:	4c 2f       	mov	r20, r28
 40a:	42 95       	swap	r20
 40c:	46 95       	lsr	r20
 40e:	47 70       	andi	r20, 0x07	; 7
 410:	41 70       	andi	r20, 0x01	; 1
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 41a:	4c 2f       	mov	r20, r28
 41c:	42 95       	swap	r20
 41e:	46 95       	lsr	r20
 420:	46 95       	lsr	r20
 422:	43 70       	andi	r20, 0x03	; 3
 424:	41 70       	andi	r20, 0x01	; 1
 426:	89 e3       	ldi	r24, 0x39	; 57
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 42e:	4c 2f       	mov	r20, r28
 430:	44 1f       	adc	r20, r20
 432:	44 27       	eor	r20, r20
 434:	44 1f       	adc	r20, r20
 436:	89 e3       	ldi	r24, 0x39	; 57
 438:	63 e0       	ldi	r22, 0x03	; 3
 43a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 43e:	89 e3       	ldi	r24, 0x39	; 57
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 448:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 44c:	4c 2f       	mov	r20, r28
 44e:	41 70       	andi	r20, 0x01	; 1
 450:	89 e3       	ldi	r24, 0x39	; 57
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 458:	4c 2f       	mov	r20, r28
 45a:	46 95       	lsr	r20
 45c:	41 70       	andi	r20, 0x01	; 1
 45e:	89 e3       	ldi	r24, 0x39	; 57
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 466:	4c 2f       	mov	r20, r28
 468:	46 95       	lsr	r20
 46a:	46 95       	lsr	r20
 46c:	41 70       	andi	r20, 0x01	; 1
 46e:	89 e3       	ldi	r24, 0x39	; 57
 470:	62 e0       	ldi	r22, 0x02	; 2
 472:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 476:	c6 95       	lsr	r28
 478:	c6 95       	lsr	r28
 47a:	c6 95       	lsr	r28
 47c:	4c 2f       	mov	r20, r28
 47e:	41 70       	andi	r20, 0x01	; 1
 480:	89 e3       	ldi	r24, 0x39	; 57
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 488:	89 e3       	ldi	r24, 0x39	; 57
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 492:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_Enable>
	
	#endif

}
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <LCD_inti>:
 49a:	8f ef       	ldi	r24, 0xFF	; 255
 49c:	91 ee       	ldi	r25, 0xE1	; 225
 49e:	a4 e0       	ldi	r26, 0x04	; 4
 4a0:	81 50       	subi	r24, 0x01	; 1
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	a0 40       	sbci	r26, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <LCD_inti+0x6>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_inti+0x10>
 4aa:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 4ac:	89 e3       	ldi	r24, 0x39	; 57
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 4b6:	89 e3       	ldi	r24, 0x39	; 57
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 4c0:	89 e3       	ldi	r24, 0x39	; 57
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 4ca:	89 e3       	ldi	r24, 0x39	; 57
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 4d4:	89 e3       	ldi	r24, 0x39	; 57
 4d6:	65 e0       	ldi	r22, 0x05	; 5
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 4de:	89 e3       	ldi	r24, 0x39	; 57
 4e0:	64 e0       	ldi	r22, 0x04	; 4
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 4e8:	89 e3       	ldi	r24, 0x39	; 57
 4ea:	66 e0       	ldi	r22, 0x06	; 6
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 4f2:	89 e3       	ldi	r24, 0x39	; 57
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 502:	af e1       	ldi	r26, 0x1F	; 31
 504:	be e4       	ldi	r27, 0x4E	; 78
 506:	11 97       	sbiw	r26, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_inti+0x6c>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_inti+0x72>
 50c:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 50e:	88 e2       	ldi	r24, 0x28	; 40
 510:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 514:	8f ec       	ldi	r24, 0xCF	; 207
 516:	97 e0       	ldi	r25, 0x07	; 7
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_inti+0x7e>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_inti+0x84>
 51e:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 520:	8e e0       	ldi	r24, 0x0E	; 14
 522:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 526:	af ec       	ldi	r26, 0xCF	; 207
 528:	b7 e0       	ldi	r27, 0x07	; 7
 52a:	11 97       	sbiw	r26, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_inti+0x90>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_inti+0x96>
 530:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 538:	8f e1       	ldi	r24, 0x1F	; 31
 53a:	9e e4       	ldi	r25, 0x4E	; 78
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCD_inti+0xa2>
 540:	00 c0       	rjmp	.+0      	; 0x542 <LCD_inti+0xa8>
 542:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 54a:	af ec       	ldi	r26, 0xCF	; 207
 54c:	b7 e0       	ldi	r27, 0x07	; 7
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_inti+0xb4>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_inti+0xba>
 554:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 556:	08 95       	ret

00000558 <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
	
}
 55e:	08 95       	ret

00000560 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	0f 92       	push	r0
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	19 f4       	brne	.+6      	; 0x574 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 56e:	61 58       	subi	r22, 0x81	; 129
 570:	69 83       	std	Y+1, r22	; 0x01
 572:	0e c0       	rjmp	.+28     	; 0x590 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	19 f4       	brne	.+6      	; 0x57e <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 578:	61 54       	subi	r22, 0x41	; 65
 57a:	69 83       	std	Y+1, r22	; 0x01
 57c:	09 c0       	rjmp	.+18     	; 0x590 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	20 f4       	brcc	.+8      	; 0x58c <LCD_move_cursor+0x2c>
 584:	61 31       	cpi	r22, 0x11	; 17
 586:	10 f4       	brcc	.+4      	; 0x58c <LCD_move_cursor+0x2c>
 588:	66 23       	and	r22, r22
 58a:	11 f4       	brne	.+4      	; 0x590 <LCD_move_cursor+0x30>
	{
		data=0x80;
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_send_cmd>
 596:	8f ec       	ldi	r24, 0xCF	; 207
 598:	97 e0       	ldi	r25, 0x07	; 7
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_move_cursor+0x3a>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_move_cursor+0x40>
 5a0:	00 00       	nop
	_delay_ms(1);
}
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <lcd_print>:

void lcd_print(char *str)
{
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 5b2:	fc 01       	movw	r30, r24
 5b4:	80 81       	ld	r24, Z
 5b6:	88 23       	and	r24, r24
 5b8:	51 f0       	breq	.+20     	; 0x5ce <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 5bc:	0e 94 98 01 	call	0x330	; 0x330 <LCD_send_char>
		i++;
 5c0:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 5c2:	f8 01       	movw	r30, r16
 5c4:	ec 0f       	add	r30, r28
 5c6:	f1 1d       	adc	r31, r1
 5c8:	80 81       	ld	r24, Z
 5ca:	88 23       	and	r24, r24
 5cc:	b9 f7       	brne	.-18     	; 0x5bc <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	08 95       	ret

000005d6 <_exit>:
 5d6:	f8 94       	cli

000005d8 <__stop_program>:
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <__stop_program>
