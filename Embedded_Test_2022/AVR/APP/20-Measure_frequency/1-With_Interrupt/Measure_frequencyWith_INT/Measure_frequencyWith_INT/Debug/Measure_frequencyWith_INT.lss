
Measure_frequencyWith_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800078  00800078  00000bc0  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00002d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b87  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034a  00000000  00000000  00003977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000639  00000000  00000000  00003cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030d  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005dc  00000000  00000000  00004821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 03 	call	0x6a6	; 0x6a6 <main>
  8a:	0c 94 88 05 	jmp	0xb10	; 0xb10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 1d2:	89 e3       	ldi	r24, 0x39	; 57
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Enable+0xe>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_Enable+0x14>
 1e6:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 1e8:	89 e3       	ldi	r24, 0x39	; 57
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 1f2:	08 95       	ret

000001f4 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 1f8:	48 2f       	mov	r20, r24
 1fa:	42 95       	swap	r20
 1fc:	4f 70       	andi	r20, 0x0F	; 15
 1fe:	41 70       	andi	r20, 0x01	; 1
 200:	89 e3       	ldi	r24, 0x39	; 57
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 208:	4c 2f       	mov	r20, r28
 20a:	42 95       	swap	r20
 20c:	46 95       	lsr	r20
 20e:	47 70       	andi	r20, 0x07	; 7
 210:	41 70       	andi	r20, 0x01	; 1
 212:	89 e3       	ldi	r24, 0x39	; 57
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 21a:	4c 2f       	mov	r20, r28
 21c:	42 95       	swap	r20
 21e:	46 95       	lsr	r20
 220:	46 95       	lsr	r20
 222:	43 70       	andi	r20, 0x03	; 3
 224:	41 70       	andi	r20, 0x01	; 1
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 22e:	4c 2f       	mov	r20, r28
 230:	44 1f       	adc	r20, r20
 232:	44 27       	eor	r20, r20
 234:	44 1f       	adc	r20, r20
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 248:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 24c:	4c 2f       	mov	r20, r28
 24e:	41 70       	andi	r20, 0x01	; 1
 250:	89 e3       	ldi	r24, 0x39	; 57
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 258:	4c 2f       	mov	r20, r28
 25a:	46 95       	lsr	r20
 25c:	41 70       	andi	r20, 0x01	; 1
 25e:	89 e3       	ldi	r24, 0x39	; 57
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 266:	4c 2f       	mov	r20, r28
 268:	46 95       	lsr	r20
 26a:	46 95       	lsr	r20
 26c:	41 70       	andi	r20, 0x01	; 1
 26e:	89 e3       	ldi	r24, 0x39	; 57
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 276:	c6 95       	lsr	r28
 278:	c6 95       	lsr	r28
 27a:	c6 95       	lsr	r28
 27c:	4c 2f       	mov	r20, r28
 27e:	41 70       	andi	r20, 0x01	; 1
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 288:	89 e3       	ldi	r24, 0x39	; 57
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 292:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
		
	 #endif
}
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCD_send_string>:

void LCD_send_string(char *data)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 2a6:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 2ac:	89 91       	ld	r24, Y+
 2ae:	88 23       	and	r24, r24
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 2bc:	48 2f       	mov	r20, r24
 2be:	42 95       	swap	r20
 2c0:	4f 70       	andi	r20, 0x0F	; 15
 2c2:	41 70       	andi	r20, 0x01	; 1
 2c4:	89 e3       	ldi	r24, 0x39	; 57
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 2cc:	4c 2f       	mov	r20, r28
 2ce:	42 95       	swap	r20
 2d0:	46 95       	lsr	r20
 2d2:	47 70       	andi	r20, 0x07	; 7
 2d4:	41 70       	andi	r20, 0x01	; 1
 2d6:	89 e3       	ldi	r24, 0x39	; 57
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 2de:	4c 2f       	mov	r20, r28
 2e0:	42 95       	swap	r20
 2e2:	46 95       	lsr	r20
 2e4:	46 95       	lsr	r20
 2e6:	43 70       	andi	r20, 0x03	; 3
 2e8:	41 70       	andi	r20, 0x01	; 1
 2ea:	89 e3       	ldi	r24, 0x39	; 57
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 2f2:	4c 2f       	mov	r20, r28
 2f4:	44 1f       	adc	r20, r20
 2f6:	44 27       	eor	r20, r20
 2f8:	44 1f       	adc	r20, r20
 2fa:	89 e3       	ldi	r24, 0x39	; 57
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 302:	89 e3       	ldi	r24, 0x39	; 57
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 30c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 310:	4c 2f       	mov	r20, r28
 312:	41 70       	andi	r20, 0x01	; 1
 314:	89 e3       	ldi	r24, 0x39	; 57
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 31c:	4c 2f       	mov	r20, r28
 31e:	46 95       	lsr	r20
 320:	41 70       	andi	r20, 0x01	; 1
 322:	89 e3       	ldi	r24, 0x39	; 57
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 32a:	4c 2f       	mov	r20, r28
 32c:	46 95       	lsr	r20
 32e:	46 95       	lsr	r20
 330:	41 70       	andi	r20, 0x01	; 1
 332:	89 e3       	ldi	r24, 0x39	; 57
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 33a:	c6 95       	lsr	r28
 33c:	c6 95       	lsr	r28
 33e:	c6 95       	lsr	r28
 340:	4c 2f       	mov	r20, r28
 342:	41 70       	andi	r20, 0x01	; 1
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 34c:	89 e3       	ldi	r24, 0x39	; 57
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 356:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
	
	#endif

}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <LCD_inti>:
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	91 ee       	ldi	r25, 0xE1	; 225
 362:	a4 e0       	ldi	r26, 0x04	; 4
 364:	81 50       	subi	r24, 0x01	; 1
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	a0 40       	sbci	r26, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <LCD_inti+0x6>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_inti+0x10>
 36e:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 370:	89 e3       	ldi	r24, 0x39	; 57
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 37a:	89 e3       	ldi	r24, 0x39	; 57
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 384:	89 e3       	ldi	r24, 0x39	; 57
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 38e:	89 e3       	ldi	r24, 0x39	; 57
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 398:	89 e3       	ldi	r24, 0x39	; 57
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 3a2:	89 e3       	ldi	r24, 0x39	; 57
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 3ac:	89 e3       	ldi	r24, 0x39	; 57
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 3b6:	89 e3       	ldi	r24, 0x39	; 57
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3c6:	af e1       	ldi	r26, 0x1F	; 31
 3c8:	be e4       	ldi	r27, 0x4E	; 78
 3ca:	11 97       	sbiw	r26, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_inti+0x6c>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_inti+0x72>
 3d0:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 3d2:	88 e2       	ldi	r24, 0x28	; 40
 3d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3d8:	8f ec       	ldi	r24, 0xCF	; 207
 3da:	97 e0       	ldi	r25, 0x07	; 7
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_inti+0x7e>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_inti+0x84>
 3e2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3ea:	af ec       	ldi	r26, 0xCF	; 207
 3ec:	b7 e0       	ldi	r27, 0x07	; 7
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_inti+0x90>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_inti+0x96>
 3f4:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3fc:	8f e1       	ldi	r24, 0x1F	; 31
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <LCD_inti+0xa2>
 404:	00 c0       	rjmp	.+0      	; 0x406 <LCD_inti+0xa8>
 406:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 40e:	af ec       	ldi	r26, 0xCF	; 207
 410:	b7 e0       	ldi	r27, 0x07	; 7
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <LCD_inti+0xb4>
 416:	00 c0       	rjmp	.+0      	; 0x418 <LCD_inti+0xba>
 418:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 41a:	08 95       	ret

0000041c <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
	
}
 422:	08 95       	ret

00000424 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	0f 92       	push	r0
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	19 f4       	brne	.+6      	; 0x438 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 432:	61 58       	subi	r22, 0x81	; 129
 434:	69 83       	std	Y+1, r22	; 0x01
 436:	0e c0       	rjmp	.+28     	; 0x454 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	19 f4       	brne	.+6      	; 0x442 <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 43c:	61 54       	subi	r22, 0x41	; 65
 43e:	69 83       	std	Y+1, r22	; 0x01
 440:	09 c0       	rjmp	.+18     	; 0x454 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 442:	81 50       	subi	r24, 0x01	; 1
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	20 f4       	brcc	.+8      	; 0x450 <LCD_move_cursor+0x2c>
 448:	61 31       	cpi	r22, 0x11	; 17
 44a:	10 f4       	brcc	.+4      	; 0x450 <LCD_move_cursor+0x2c>
 44c:	66 23       	and	r22, r22
 44e:	11 f4       	brne	.+4      	; 0x454 <LCD_move_cursor+0x30>
	{
		data=0x80;
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 45a:	8f ec       	ldi	r24, 0xCF	; 207
 45c:	97 e0       	ldi	r25, 0x07	; 7
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_move_cursor+0x3a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_move_cursor+0x40>
 464:	00 00       	nop
	_delay_ms(1);
}
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <lcd_print>:

void lcd_print(char *str)
{
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	88 23       	and	r24, r24
 47c:	51 f0       	breq	.+20     	; 0x492 <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 47e:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 480:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		i++;
 484:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 486:	f8 01       	movw	r30, r16
 488:	ec 0f       	add	r30, r28
 48a:	f1 1d       	adc	r31, r1
 48c:	80 81       	ld	r24, Z
 48e:	88 23       	and	r24, r24
 490:	b9 f7       	brne	.-18     	; 0x480 <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	08 95       	ret

0000049a <__vector_1>:
		LCD_move_cursor(2,12);
		Send_Val_to_LCD(Frequency);
    }
}
ISR(INT0_vect)	
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
	//cli();
	//PORTB^=1<<0;
	Counter++;
 4a6:	80 91 7e 00 	lds	r24, 0x007E
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 7e 00 	sts	0x007E, r24
	
	if (Counter==1)
 4b0:	80 91 7e 00 	lds	r24, 0x007E
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <__vector_1+0x3a>
	{	/* start Timer in normal mode*/
		TCCR0|=1<<CS01;
 4b8:	83 b7       	in	r24, 0x33	; 51
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	83 bf       	out	0x33, r24	; 51
		 /* Set ISC00,ISC01 to flaing edge */
		 INT_MCUCR|=(1<<1);    /* Set ISC00,ISC01 to flaing edge */
 4be:	85 b7       	in	r24, 0x35	; 53
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	85 bf       	out	0x35, r24	; 53
		 INT_MCUCR&=~(1<<0);
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	8e 7f       	andi	r24, 0xFE	; 254
 4c8:	85 bf       	out	0x35, r24	; 53
		 Counter++;
 4ca:	80 91 7e 00 	lds	r24, 0x007E
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 7e 00 	sts	0x007E, r24
	}
	if (Counter==2)
 4d4:	80 91 7e 00 	lds	r24, 0x007E
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	81 f4       	brne	.+32     	; 0x4fc <__vector_1+0x62>
	{
		
		T_ON=TCNT0;
 4dc:	82 b7       	in	r24, 0x32	; 50
 4de:	80 93 7c 00 	sts	0x007C, r24
		TCNT0=0;
 4e2:	12 be       	out	0x32, r1	; 50
		 /* Set ISC00,ISC01 to Rising edge */
		INT_MCUCR|=(1<<1);    /* Set ISC00,ISC01 to Rising edge */
 4e4:	85 b7       	in	r24, 0x35	; 53
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	85 bf       	out	0x35, r24	; 53
		INT_MCUCR|=(1<<0);  
 4ea:	85 b7       	in	r24, 0x35	; 53
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	85 bf       	out	0x35, r24	; 53
		Counter++;
 4f0:	80 91 7e 00 	lds	r24, 0x007E
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 7e 00 	sts	0x007E, r24
 4fa:	0a c0       	rjmp	.+20     	; 0x510 <__vector_1+0x76>
	}
	else if (Counter==3)
 4fc:	80 91 7e 00 	lds	r24, 0x007E
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	31 f4       	brne	.+12     	; 0x510 <__vector_1+0x76>
	{
		PORTB|=1<<0;
 504:	c0 9a       	sbi	0x18, 0	; 24
		T_OFF=TCNT0;
 506:	82 b7       	in	r24, 0x32	; 50
 508:	80 93 7f 00 	sts	0x007F, r24
		TCNT0=0;
 50c:	12 be       	out	0x32, r1	; 50
		//Counter++;
		 /* Set ISC00,ISC01 to Rising edge */
		// INT_MCUCR|=(1<<1);    /* Set ISC00,ISC01 to flaing edge */
		// INT_MCUCR|=(1<<0);
		// Counter=0;
		cli();
 50e:	f8 94       	cli
	}
	//sei();
	
}
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <Send_Val_to_LCD>:
void Send_Val_to_LCD(u32 u16_Value)
{
 51c:	8f 92       	push	r8
 51e:	9f 92       	push	r9
 520:	af 92       	push	r10
 522:	bf 92       	push	r11
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	cf 93       	push	r28
 52e:	6b 01       	movw	r12, r22
 530:	7c 01       	movw	r14, r24
	if (u16_Value<10)
 532:	8a e0       	ldi	r24, 0x0A	; 10
 534:	c8 16       	cp	r12, r24
 536:	d1 04       	cpc	r13, r1
 538:	e1 04       	cpc	r14, r1
 53a:	f1 04       	cpc	r15, r1
 53c:	70 f4       	brcc	.+28     	; 0x55a <Send_Val_to_LCD+0x3e>
	{
		LCD_send_char(48);
 53e:	80 e3       	ldi	r24, 0x30	; 48
 540:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(48);
 544:	80 e3       	ldi	r24, 0x30	; 48
 546:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(48);
 54a:	80 e3       	ldi	r24, 0x30	; 48
 54c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(u16_Value+48);
 550:	8c 2d       	mov	r24, r12
 552:	80 5d       	subi	r24, 0xD0	; 208
 554:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
 558:	9c c0       	rjmp	.+312    	; 0x692 <Send_Val_to_LCD+0x176>
	}
	else if(u16_Value<100)
 55a:	84 e6       	ldi	r24, 0x64	; 100
 55c:	c8 16       	cp	r12, r24
 55e:	d1 04       	cpc	r13, r1
 560:	e1 04       	cpc	r14, r1
 562:	f1 04       	cpc	r15, r1
 564:	c0 f4       	brcc	.+48     	; 0x596 <Send_Val_to_LCD+0x7a>
	{
		LCD_send_char(48);
 566:	80 e3       	ldi	r24, 0x30	; 48
 568:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(48);
 56c:	80 e3       	ldi	r24, 0x30	; 48
 56e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char((u16_Value/10)+48);
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	2a e0       	ldi	r18, 0x0A	; 10
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 582:	c6 2f       	mov	r28, r22
 584:	82 2f       	mov	r24, r18
 586:	80 5d       	subi	r24, 0xD0	; 208
 588:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 58c:	8c 2f       	mov	r24, r28
 58e:	80 5d       	subi	r24, 0xD0	; 208
 590:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
 594:	7e c0       	rjmp	.+252    	; 0x692 <Send_Val_to_LCD+0x176>
	}
	else if(u16_Value<1000)
 596:	88 ee       	ldi	r24, 0xE8	; 232
 598:	c8 16       	cp	r12, r24
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	d8 06       	cpc	r13, r24
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	e8 06       	cpc	r14, r24
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	f8 06       	cpc	r15, r24
 5a6:	78 f5       	brcc	.+94     	; 0x606 <Send_Val_to_LCD+0xea>
	{
		LCD_send_char(48);
 5a8:	80 e3       	ldi	r24, 0x30	; 48
 5aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char((u16_Value/100)+48);
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	24 e6       	ldi	r18, 0x64	; 100
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	40 e0       	ldi	r20, 0x00	; 0
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 5be:	82 2f       	mov	r24, r18
 5c0:	80 5d       	subi	r24, 0xD0	; 208
 5c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(((u16_Value/10)%10)+48);
 5c6:	0f 2e       	mov	r0, r31
 5c8:	fa e0       	ldi	r31, 0x0A	; 10
 5ca:	8f 2e       	mov	r8, r31
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	9f 2e       	mov	r9, r31
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	af 2e       	mov	r10, r31
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	bf 2e       	mov	r11, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	c7 01       	movw	r24, r14
 5dc:	b6 01       	movw	r22, r12
 5de:	a5 01       	movw	r20, r10
 5e0:	94 01       	movw	r18, r8
 5e2:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 5e6:	c6 2f       	mov	r28, r22
 5e8:	ca 01       	movw	r24, r20
 5ea:	b9 01       	movw	r22, r18
 5ec:	a5 01       	movw	r20, r10
 5ee:	94 01       	movw	r18, r8
 5f0:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 5f4:	86 2f       	mov	r24, r22
 5f6:	80 5d       	subi	r24, 0xD0	; 208
 5f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 5fc:	8c 2f       	mov	r24, r28
 5fe:	80 5d       	subi	r24, 0xD0	; 208
 600:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
 604:	46 c0       	rjmp	.+140    	; 0x692 <Send_Val_to_LCD+0x176>
	}
	else if(u16_Value<10000)
 606:	80 e1       	ldi	r24, 0x10	; 16
 608:	c8 16       	cp	r12, r24
 60a:	87 e2       	ldi	r24, 0x27	; 39
 60c:	d8 06       	cpc	r13, r24
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	e8 06       	cpc	r14, r24
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	f8 06       	cpc	r15, r24
 616:	e8 f5       	brcc	.+122    	; 0x692 <Send_Val_to_LCD+0x176>
	{
		LCD_send_char((u16_Value/1000)+48);
 618:	c7 01       	movw	r24, r14
 61a:	b6 01       	movw	r22, r12
 61c:	28 ee       	ldi	r18, 0xE8	; 232
 61e:	33 e0       	ldi	r19, 0x03	; 3
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 628:	82 2f       	mov	r24, r18
 62a:	80 5d       	subi	r24, 0xD0	; 208
 62c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(((u16_Value/100)%10)+48);
 630:	c7 01       	movw	r24, r14
 632:	b6 01       	movw	r22, r12
 634:	24 e6       	ldi	r18, 0x64	; 100
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	40 e0       	ldi	r20, 0x00	; 0
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 640:	0f 2e       	mov	r0, r31
 642:	fa e0       	ldi	r31, 0x0A	; 10
 644:	8f 2e       	mov	r8, r31
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	9f 2e       	mov	r9, r31
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	af 2e       	mov	r10, r31
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	bf 2e       	mov	r11, r31
 652:	f0 2d       	mov	r31, r0
 654:	ca 01       	movw	r24, r20
 656:	b9 01       	movw	r22, r18
 658:	a5 01       	movw	r20, r10
 65a:	94 01       	movw	r18, r8
 65c:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 660:	86 2f       	mov	r24, r22
 662:	80 5d       	subi	r24, 0xD0	; 208
 664:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char(((u16_Value/10)%10)+48);
 668:	c7 01       	movw	r24, r14
 66a:	b6 01       	movw	r22, r12
 66c:	a5 01       	movw	r20, r10
 66e:	94 01       	movw	r18, r8
 670:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 674:	c6 2f       	mov	r28, r22
 676:	ca 01       	movw	r24, r20
 678:	b9 01       	movw	r22, r18
 67a:	a5 01       	movw	r20, r10
 67c:	94 01       	movw	r18, r8
 67e:	0e 94 66 05 	call	0xacc	; 0xacc <__udivmodsi4>
 682:	86 2f       	mov	r24, r22
 684:	80 5d       	subi	r24, 0xD0	; 208
 686:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 68a:	8c 2f       	mov	r24, r28
 68c:	80 5d       	subi	r24, 0xD0	; 208
 68e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
	}

 692:	cf 91       	pop	r28
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	bf 90       	pop	r11
 69e:	af 90       	pop	r10
 6a0:	9f 90       	pop	r9
 6a2:	8f 90       	pop	r8
 6a4:	08 95       	ret

000006a6 <main>:
void Send_Val_to_LCD(u32 u16_Value);

int main(void)
{
	
	LCD_inti();
 6a6:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 6aa:	8c e0       	ldi	r24, 0x0C	; 12
 6ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
	LCD_send_string("Duty Cycle=");
 6b0:	80 e6       	ldi	r24, 0x60	; 96
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
	LCD_move_cursor(2,1);
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
	LCD_send_string("Frequency =");
 6c0:	8c e6       	ldi	r24, 0x6C	; 108
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
	TCNT0=0;
 6c8:	12 be       	out	0x32, r1	; 50
	INT_GIFR&=~(1<<6);
 6ca:	8a b7       	in	r24, 0x3a	; 58
 6cc:	8f 7b       	andi	r24, 0xBF	; 191
 6ce:	8a bf       	out	0x3a, r24	; 58
	DDRB|=1<<0;
 6d0:	b8 9a       	sbi	0x17, 0	; 23
	DDRD&=~(1<<2);
 6d2:	8a 98       	cbi	0x11, 2	; 17
	INT_MCUCR|=(1<<0)|(1<<1);    /* Set ISC00,ISC01 to rising edge */
 6d4:	85 b7       	in	r24, 0x35	; 53
 6d6:	83 60       	ori	r24, 0x03	; 3
 6d8:	85 bf       	out	0x35, r24	; 53
	/* Interrupt Init */
	INT_GICR|=(1<<6);				 /* Enable INT0*/
 6da:	8b b7       	in	r24, 0x3b	; 59
 6dc:	80 64       	ori	r24, 0x40	; 64
 6de:	8b bf       	out	0x3b, r24	; 59
	sei();						/*  Enable global interrupt */
 6e0:	78 94       	sei
		//T_ON=T_ON*(8.0/F_CPU);
		//T_OFF=T_OFF*(8.0/F_CPU);
		
		//T_Period=(T_ON+T_OFF);

		T_Period=(T_ON+T_OFF);
 6e2:	20 91 7c 00 	lds	r18, 0x007C
 6e6:	80 91 7f 00 	lds	r24, 0x007F
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	82 0f       	add	r24, r18
 6ee:	91 1d       	adc	r25, r1
 6f0:	aa 27       	eor	r26, r26
 6f2:	97 fd       	sbrc	r25, 7
 6f4:	a0 95       	com	r26
 6f6:	ba 2f       	mov	r27, r26
 6f8:	80 93 78 00 	sts	0x0078, r24
 6fc:	90 93 79 00 	sts	0x0079, r25
 700:	a0 93 7a 00 	sts	0x007A, r26
 704:	b0 93 7b 00 	sts	0x007B, r27
        duty_Cycle=((float)T_ON/T_Period)*100.0;
 708:	60 91 7c 00 	lds	r22, 0x007C
 70c:	c0 90 78 00 	lds	r12, 0x0078
 710:	d0 90 79 00 	lds	r13, 0x0079
 714:	e0 90 7a 00 	lds	r14, 0x007A
 718:	f0 90 7b 00 	lds	r15, 0x007B
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 75 04 	call	0x8ea	; 0x8ea <__floatunsisf>
 726:	4b 01       	movw	r8, r22
 728:	5c 01       	movw	r10, r24
 72a:	c7 01       	movw	r24, r14
 72c:	b6 01       	movw	r22, r12
 72e:	0e 94 75 04 	call	0x8ea	; 0x8ea <__floatunsisf>
 732:	9b 01       	movw	r18, r22
 734:	ac 01       	movw	r20, r24
 736:	c5 01       	movw	r24, r10
 738:	b4 01       	movw	r22, r8
 73a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	48 ec       	ldi	r20, 0xC8	; 200
 744:	52 e4       	ldi	r21, 0x42	; 66
 746:	0e 94 03 05 	call	0xa06	; 0xa06 <__mulsf3>
 74a:	0e 94 49 04 	call	0x892	; 0x892 <__fixunssfsi>
 74e:	60 93 7d 00 	sts	0x007D, r22
		Frequency=F_CPU/(T_Period*8.0);
 752:	60 91 78 00 	lds	r22, 0x0078
 756:	70 91 79 00 	lds	r23, 0x0079
 75a:	80 91 7a 00 	lds	r24, 0x007A
 75e:	90 91 7b 00 	lds	r25, 0x007B
 762:	0e 94 75 04 	call	0x8ea	; 0x8ea <__floatunsisf>
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	51 e4       	ldi	r21, 0x41	; 65
 76e:	0e 94 03 05 	call	0xa06	; 0xa06 <__mulsf3>
 772:	9b 01       	movw	r18, r22
 774:	ac 01       	movw	r20, r24
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	74 e2       	ldi	r23, 0x24	; 36
 77a:	84 ef       	ldi	r24, 0xF4	; 244
 77c:	9a e4       	ldi	r25, 0x4A	; 74
 77e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 782:	0e 94 49 04 	call	0x892	; 0x892 <__fixunssfsi>
 786:	dc 01       	movw	r26, r24
 788:	cb 01       	movw	r24, r22
 78a:	90 93 81 00 	sts	0x0081, r25
 78e:	80 93 80 00 	sts	0x0080, r24
		LCD_move_cursor(1,12);
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	6c e0       	ldi	r22, 0x0C	; 12
 796:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
		Send_Val_to_LCD(T_OFF);
 79a:	60 91 7f 00 	lds	r22, 0x007F
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 8e 02 	call	0x51c	; 0x51c <Send_Val_to_LCD>
		LCD_move_cursor(2,12);
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	6c e0       	ldi	r22, 0x0C	; 12
 7ac:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
		Send_Val_to_LCD(Frequency);
 7b0:	60 91 80 00 	lds	r22, 0x0080
 7b4:	70 91 81 00 	lds	r23, 0x0081
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 8e 02 	call	0x51c	; 0x51c <Send_Val_to_LCD>
 7c0:	90 cf       	rjmp	.-224    	; 0x6e2 <main+0x3c>

000007c2 <__divsf3>:
 7c2:	0c d0       	rcall	.+24     	; 0x7dc <__divsf3x>
 7c4:	e6 c0       	rjmp	.+460    	; 0x992 <__fp_round>
 7c6:	de d0       	rcall	.+444    	; 0x984 <__fp_pscB>
 7c8:	40 f0       	brcs	.+16     	; 0x7da <__divsf3+0x18>
 7ca:	d5 d0       	rcall	.+426    	; 0x976 <__fp_pscA>
 7cc:	30 f0       	brcs	.+12     	; 0x7da <__divsf3+0x18>
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <__divsf3+0x16>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	19 f0       	breq	.+6      	; 0x7da <__divsf3+0x18>
 7d4:	c7 c0       	rjmp	.+398    	; 0x964 <__fp_inf>
 7d6:	51 11       	cpse	r21, r1
 7d8:	10 c1       	rjmp	.+544    	; 0x9fa <__fp_szero>
 7da:	ca c0       	rjmp	.+404    	; 0x970 <__fp_nan>

000007dc <__divsf3x>:
 7dc:	eb d0       	rcall	.+470    	; 0x9b4 <__fp_split3>
 7de:	98 f3       	brcs	.-26     	; 0x7c6 <__divsf3+0x4>

000007e0 <__divsf3_pse>:
 7e0:	99 23       	and	r25, r25
 7e2:	c9 f3       	breq	.-14     	; 0x7d6 <__divsf3+0x14>
 7e4:	55 23       	and	r21, r21
 7e6:	b1 f3       	breq	.-20     	; 0x7d4 <__divsf3+0x12>
 7e8:	95 1b       	sub	r25, r21
 7ea:	55 0b       	sbc	r21, r21
 7ec:	bb 27       	eor	r27, r27
 7ee:	aa 27       	eor	r26, r26
 7f0:	62 17       	cp	r22, r18
 7f2:	73 07       	cpc	r23, r19
 7f4:	84 07       	cpc	r24, r20
 7f6:	38 f0       	brcs	.+14     	; 0x806 <__divsf3_pse+0x26>
 7f8:	9f 5f       	subi	r25, 0xFF	; 255
 7fa:	5f 4f       	sbci	r21, 0xFF	; 255
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	44 1f       	adc	r20, r20
 802:	aa 1f       	adc	r26, r26
 804:	a9 f3       	breq	.-22     	; 0x7f0 <__divsf3_pse+0x10>
 806:	33 d0       	rcall	.+102    	; 0x86e <__stack+0xf>
 808:	0e 2e       	mov	r0, r30
 80a:	3a f0       	brmi	.+14     	; 0x81a <__divsf3_pse+0x3a>
 80c:	e0 e8       	ldi	r30, 0x80	; 128
 80e:	30 d0       	rcall	.+96     	; 0x870 <__stack+0x11>
 810:	91 50       	subi	r25, 0x01	; 1
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	e6 95       	lsr	r30
 816:	00 1c       	adc	r0, r0
 818:	ca f7       	brpl	.-14     	; 0x80c <__divsf3_pse+0x2c>
 81a:	29 d0       	rcall	.+82     	; 0x86e <__stack+0xf>
 81c:	fe 2f       	mov	r31, r30
 81e:	27 d0       	rcall	.+78     	; 0x86e <__stack+0xf>
 820:	66 0f       	add	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	bb 1f       	adc	r27, r27
 828:	26 17       	cp	r18, r22
 82a:	37 07       	cpc	r19, r23
 82c:	48 07       	cpc	r20, r24
 82e:	ab 07       	cpc	r26, r27
 830:	b0 e8       	ldi	r27, 0x80	; 128
 832:	09 f0       	breq	.+2      	; 0x836 <__divsf3_pse+0x56>
 834:	bb 0b       	sbc	r27, r27
 836:	80 2d       	mov	r24, r0
 838:	bf 01       	movw	r22, r30
 83a:	ff 27       	eor	r31, r31
 83c:	93 58       	subi	r25, 0x83	; 131
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	2a f0       	brmi	.+10     	; 0x84c <__divsf3_pse+0x6c>
 842:	9e 3f       	cpi	r25, 0xFE	; 254
 844:	51 05       	cpc	r21, r1
 846:	68 f0       	brcs	.+26     	; 0x862 <__stack+0x3>
 848:	8d c0       	rjmp	.+282    	; 0x964 <__fp_inf>
 84a:	d7 c0       	rjmp	.+430    	; 0x9fa <__fp_szero>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	ec f3       	brlt	.-6      	; 0x84a <__divsf3_pse+0x6a>
 850:	98 3e       	cpi	r25, 0xE8	; 232
 852:	dc f3       	brlt	.-10     	; 0x84a <__divsf3_pse+0x6a>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	9f 5f       	subi	r25, 0xFF	; 255
 860:	c9 f7       	brne	.-14     	; 0x854 <__divsf3_pse+0x74>
 862:	88 0f       	add	r24, r24
 864:	91 1d       	adc	r25, r1
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret
 86e:	e1 e0       	ldi	r30, 0x01	; 1
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	bb 1f       	adc	r27, r27
 878:	62 17       	cp	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	ba 07       	cpc	r27, r26
 880:	20 f0       	brcs	.+8      	; 0x88a <__stack+0x2b>
 882:	62 1b       	sub	r22, r18
 884:	73 0b       	sbc	r23, r19
 886:	84 0b       	sbc	r24, r20
 888:	ba 0b       	sbc	r27, r26
 88a:	ee 1f       	adc	r30, r30
 88c:	88 f7       	brcc	.-30     	; 0x870 <__stack+0x11>
 88e:	e0 95       	com	r30
 890:	08 95       	ret

00000892 <__fixunssfsi>:
 892:	98 d0       	rcall	.+304    	; 0x9c4 <__fp_splitA>
 894:	88 f0       	brcs	.+34     	; 0x8b8 <__fixunssfsi+0x26>
 896:	9f 57       	subi	r25, 0x7F	; 127
 898:	90 f0       	brcs	.+36     	; 0x8be <__fixunssfsi+0x2c>
 89a:	b9 2f       	mov	r27, r25
 89c:	99 27       	eor	r25, r25
 89e:	b7 51       	subi	r27, 0x17	; 23
 8a0:	a0 f0       	brcs	.+40     	; 0x8ca <__fixunssfsi+0x38>
 8a2:	d1 f0       	breq	.+52     	; 0x8d8 <__fixunssfsi+0x46>
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	1a f0       	brmi	.+6      	; 0x8b4 <__fixunssfsi+0x22>
 8ae:	ba 95       	dec	r27
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__fixunssfsi+0x12>
 8b2:	12 c0       	rjmp	.+36     	; 0x8d8 <__fixunssfsi+0x46>
 8b4:	b1 30       	cpi	r27, 0x01	; 1
 8b6:	81 f0       	breq	.+32     	; 0x8d8 <__fixunssfsi+0x46>
 8b8:	9f d0       	rcall	.+318    	; 0x9f8 <__fp_zero>
 8ba:	b1 e0       	ldi	r27, 0x01	; 1
 8bc:	08 95       	ret
 8be:	9c c0       	rjmp	.+312    	; 0x9f8 <__fp_zero>
 8c0:	67 2f       	mov	r22, r23
 8c2:	78 2f       	mov	r23, r24
 8c4:	88 27       	eor	r24, r24
 8c6:	b8 5f       	subi	r27, 0xF8	; 248
 8c8:	39 f0       	breq	.+14     	; 0x8d8 <__fixunssfsi+0x46>
 8ca:	b9 3f       	cpi	r27, 0xF9	; 249
 8cc:	cc f3       	brlt	.-14     	; 0x8c0 <__fixunssfsi+0x2e>
 8ce:	86 95       	lsr	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b3 95       	inc	r27
 8d6:	d9 f7       	brne	.-10     	; 0x8ce <__fixunssfsi+0x3c>
 8d8:	3e f4       	brtc	.+14     	; 0x8e8 <__fixunssfsi+0x56>
 8da:	90 95       	com	r25
 8dc:	80 95       	com	r24
 8de:	70 95       	com	r23
 8e0:	61 95       	neg	r22
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	08 95       	ret

000008ea <__floatunsisf>:
 8ea:	e8 94       	clt
 8ec:	09 c0       	rjmp	.+18     	; 0x900 <__floatsisf+0x12>

000008ee <__floatsisf>:
 8ee:	97 fb       	bst	r25, 7
 8f0:	3e f4       	brtc	.+14     	; 0x900 <__floatsisf+0x12>
 8f2:	90 95       	com	r25
 8f4:	80 95       	com	r24
 8f6:	70 95       	com	r23
 8f8:	61 95       	neg	r22
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	8f 4f       	sbci	r24, 0xFF	; 255
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	99 23       	and	r25, r25
 902:	a9 f0       	breq	.+42     	; 0x92e <__floatsisf+0x40>
 904:	f9 2f       	mov	r31, r25
 906:	96 e9       	ldi	r25, 0x96	; 150
 908:	bb 27       	eor	r27, r27
 90a:	93 95       	inc	r25
 90c:	f6 95       	lsr	r31
 90e:	87 95       	ror	r24
 910:	77 95       	ror	r23
 912:	67 95       	ror	r22
 914:	b7 95       	ror	r27
 916:	f1 11       	cpse	r31, r1
 918:	f8 cf       	rjmp	.-16     	; 0x90a <__floatsisf+0x1c>
 91a:	fa f4       	brpl	.+62     	; 0x95a <__floatsisf+0x6c>
 91c:	bb 0f       	add	r27, r27
 91e:	11 f4       	brne	.+4      	; 0x924 <__floatsisf+0x36>
 920:	60 ff       	sbrs	r22, 0
 922:	1b c0       	rjmp	.+54     	; 0x95a <__floatsisf+0x6c>
 924:	6f 5f       	subi	r22, 0xFF	; 255
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	16 c0       	rjmp	.+44     	; 0x95a <__floatsisf+0x6c>
 92e:	88 23       	and	r24, r24
 930:	11 f0       	breq	.+4      	; 0x936 <__floatsisf+0x48>
 932:	96 e9       	ldi	r25, 0x96	; 150
 934:	11 c0       	rjmp	.+34     	; 0x958 <__floatsisf+0x6a>
 936:	77 23       	and	r23, r23
 938:	21 f0       	breq	.+8      	; 0x942 <__floatsisf+0x54>
 93a:	9e e8       	ldi	r25, 0x8E	; 142
 93c:	87 2f       	mov	r24, r23
 93e:	76 2f       	mov	r23, r22
 940:	05 c0       	rjmp	.+10     	; 0x94c <__floatsisf+0x5e>
 942:	66 23       	and	r22, r22
 944:	71 f0       	breq	.+28     	; 0x962 <__floatsisf+0x74>
 946:	96 e8       	ldi	r25, 0x86	; 134
 948:	86 2f       	mov	r24, r22
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	2a f0       	brmi	.+10     	; 0x95a <__floatsisf+0x6c>
 950:	9a 95       	dec	r25
 952:	66 0f       	add	r22, r22
 954:	77 1f       	adc	r23, r23
 956:	88 1f       	adc	r24, r24
 958:	da f7       	brpl	.-10     	; 0x950 <__floatsisf+0x62>
 95a:	88 0f       	add	r24, r24
 95c:	96 95       	lsr	r25
 95e:	87 95       	ror	r24
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret

00000964 <__fp_inf>:
 964:	97 f9       	bld	r25, 7
 966:	9f 67       	ori	r25, 0x7F	; 127
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	08 95       	ret

00000970 <__fp_nan>:
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	80 ec       	ldi	r24, 0xC0	; 192
 974:	08 95       	ret

00000976 <__fp_pscA>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	16 16       	cp	r1, r22
 97c:	17 06       	cpc	r1, r23
 97e:	18 06       	cpc	r1, r24
 980:	09 06       	cpc	r0, r25
 982:	08 95       	ret

00000984 <__fp_pscB>:
 984:	00 24       	eor	r0, r0
 986:	0a 94       	dec	r0
 988:	12 16       	cp	r1, r18
 98a:	13 06       	cpc	r1, r19
 98c:	14 06       	cpc	r1, r20
 98e:	05 06       	cpc	r0, r21
 990:	08 95       	ret

00000992 <__fp_round>:
 992:	09 2e       	mov	r0, r25
 994:	03 94       	inc	r0
 996:	00 0c       	add	r0, r0
 998:	11 f4       	brne	.+4      	; 0x99e <__fp_round+0xc>
 99a:	88 23       	and	r24, r24
 99c:	52 f0       	brmi	.+20     	; 0x9b2 <__fp_round+0x20>
 99e:	bb 0f       	add	r27, r27
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <__fp_round+0x20>
 9a2:	bf 2b       	or	r27, r31
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0x18>
 9a6:	60 ff       	sbrs	r22, 0
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__fp_round+0x20>
 9aa:	6f 5f       	subi	r22, 0xFF	; 255
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__fp_split3>:
 9b4:	57 fd       	sbrc	r21, 7
 9b6:	90 58       	subi	r25, 0x80	; 128
 9b8:	44 0f       	add	r20, r20
 9ba:	55 1f       	adc	r21, r21
 9bc:	59 f0       	breq	.+22     	; 0x9d4 <__fp_splitA+0x10>
 9be:	5f 3f       	cpi	r21, 0xFF	; 255
 9c0:	71 f0       	breq	.+28     	; 0x9de <__fp_splitA+0x1a>
 9c2:	47 95       	ror	r20

000009c4 <__fp_splitA>:
 9c4:	88 0f       	add	r24, r24
 9c6:	97 fb       	bst	r25, 7
 9c8:	99 1f       	adc	r25, r25
 9ca:	61 f0       	breq	.+24     	; 0x9e4 <__fp_splitA+0x20>
 9cc:	9f 3f       	cpi	r25, 0xFF	; 255
 9ce:	79 f0       	breq	.+30     	; 0x9ee <__fp_splitA+0x2a>
 9d0:	87 95       	ror	r24
 9d2:	08 95       	ret
 9d4:	12 16       	cp	r1, r18
 9d6:	13 06       	cpc	r1, r19
 9d8:	14 06       	cpc	r1, r20
 9da:	55 1f       	adc	r21, r21
 9dc:	f2 cf       	rjmp	.-28     	; 0x9c2 <__fp_split3+0xe>
 9de:	46 95       	lsr	r20
 9e0:	f1 df       	rcall	.-30     	; 0x9c4 <__fp_splitA>
 9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <__fp_splitA+0x30>
 9e4:	16 16       	cp	r1, r22
 9e6:	17 06       	cpc	r1, r23
 9e8:	18 06       	cpc	r1, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	f1 cf       	rjmp	.-30     	; 0x9d0 <__fp_splitA+0xc>
 9ee:	86 95       	lsr	r24
 9f0:	71 05       	cpc	r23, r1
 9f2:	61 05       	cpc	r22, r1
 9f4:	08 94       	sec
 9f6:	08 95       	ret

000009f8 <__fp_zero>:
 9f8:	e8 94       	clt

000009fa <__fp_szero>:
 9fa:	bb 27       	eor	r27, r27
 9fc:	66 27       	eor	r22, r22
 9fe:	77 27       	eor	r23, r23
 a00:	cb 01       	movw	r24, r22
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret

00000a06 <__mulsf3>:
 a06:	0b d0       	rcall	.+22     	; 0xa1e <__mulsf3x>
 a08:	c4 cf       	rjmp	.-120    	; 0x992 <__fp_round>
 a0a:	b5 df       	rcall	.-150    	; 0x976 <__fp_pscA>
 a0c:	28 f0       	brcs	.+10     	; 0xa18 <__mulsf3+0x12>
 a0e:	ba df       	rcall	.-140    	; 0x984 <__fp_pscB>
 a10:	18 f0       	brcs	.+6      	; 0xa18 <__mulsf3+0x12>
 a12:	95 23       	and	r25, r21
 a14:	09 f0       	breq	.+2      	; 0xa18 <__mulsf3+0x12>
 a16:	a6 cf       	rjmp	.-180    	; 0x964 <__fp_inf>
 a18:	ab cf       	rjmp	.-170    	; 0x970 <__fp_nan>
 a1a:	11 24       	eor	r1, r1
 a1c:	ee cf       	rjmp	.-36     	; 0x9fa <__fp_szero>

00000a1e <__mulsf3x>:
 a1e:	ca df       	rcall	.-108    	; 0x9b4 <__fp_split3>
 a20:	a0 f3       	brcs	.-24     	; 0xa0a <__mulsf3+0x4>

00000a22 <__mulsf3_pse>:
 a22:	95 9f       	mul	r25, r21
 a24:	d1 f3       	breq	.-12     	; 0xa1a <__mulsf3+0x14>
 a26:	95 0f       	add	r25, r21
 a28:	50 e0       	ldi	r21, 0x00	; 0
 a2a:	55 1f       	adc	r21, r21
 a2c:	62 9f       	mul	r22, r18
 a2e:	f0 01       	movw	r30, r0
 a30:	72 9f       	mul	r23, r18
 a32:	bb 27       	eor	r27, r27
 a34:	f0 0d       	add	r31, r0
 a36:	b1 1d       	adc	r27, r1
 a38:	63 9f       	mul	r22, r19
 a3a:	aa 27       	eor	r26, r26
 a3c:	f0 0d       	add	r31, r0
 a3e:	b1 1d       	adc	r27, r1
 a40:	aa 1f       	adc	r26, r26
 a42:	64 9f       	mul	r22, r20
 a44:	66 27       	eor	r22, r22
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	66 1f       	adc	r22, r22
 a4c:	82 9f       	mul	r24, r18
 a4e:	22 27       	eor	r18, r18
 a50:	b0 0d       	add	r27, r0
 a52:	a1 1d       	adc	r26, r1
 a54:	62 1f       	adc	r22, r18
 a56:	73 9f       	mul	r23, r19
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	62 1f       	adc	r22, r18
 a5e:	83 9f       	mul	r24, r19
 a60:	a0 0d       	add	r26, r0
 a62:	61 1d       	adc	r22, r1
 a64:	22 1f       	adc	r18, r18
 a66:	74 9f       	mul	r23, r20
 a68:	33 27       	eor	r19, r19
 a6a:	a0 0d       	add	r26, r0
 a6c:	61 1d       	adc	r22, r1
 a6e:	23 1f       	adc	r18, r19
 a70:	84 9f       	mul	r24, r20
 a72:	60 0d       	add	r22, r0
 a74:	21 1d       	adc	r18, r1
 a76:	82 2f       	mov	r24, r18
 a78:	76 2f       	mov	r23, r22
 a7a:	6a 2f       	mov	r22, r26
 a7c:	11 24       	eor	r1, r1
 a7e:	9f 57       	subi	r25, 0x7F	; 127
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	8a f0       	brmi	.+34     	; 0xaa6 <__mulsf3_pse+0x84>
 a84:	e1 f0       	breq	.+56     	; 0xabe <__mulsf3_pse+0x9c>
 a86:	88 23       	and	r24, r24
 a88:	4a f0       	brmi	.+18     	; 0xa9c <__mulsf3_pse+0x7a>
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	bb 1f       	adc	r27, r27
 a90:	66 1f       	adc	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	91 50       	subi	r25, 0x01	; 1
 a98:	50 40       	sbci	r21, 0x00	; 0
 a9a:	a9 f7       	brne	.-22     	; 0xa86 <__mulsf3_pse+0x64>
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	51 05       	cpc	r21, r1
 aa0:	70 f0       	brcs	.+28     	; 0xabe <__mulsf3_pse+0x9c>
 aa2:	60 cf       	rjmp	.-320    	; 0x964 <__fp_inf>
 aa4:	aa cf       	rjmp	.-172    	; 0x9fa <__fp_szero>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	ec f3       	brlt	.-6      	; 0xaa4 <__mulsf3_pse+0x82>
 aaa:	98 3e       	cpi	r25, 0xE8	; 232
 aac:	dc f3       	brlt	.-10     	; 0xaa4 <__mulsf3_pse+0x82>
 aae:	86 95       	lsr	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b7 95       	ror	r27
 ab6:	f7 95       	ror	r31
 ab8:	e7 95       	ror	r30
 aba:	9f 5f       	subi	r25, 0xFF	; 255
 abc:	c1 f7       	brne	.-16     	; 0xaae <__mulsf3_pse+0x8c>
 abe:	fe 2b       	or	r31, r30
 ac0:	88 0f       	add	r24, r24
 ac2:	91 1d       	adc	r25, r1
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret

00000acc <__udivmodsi4>:
 acc:	a1 e2       	ldi	r26, 0x21	; 33
 ace:	1a 2e       	mov	r1, r26
 ad0:	aa 1b       	sub	r26, r26
 ad2:	bb 1b       	sub	r27, r27
 ad4:	fd 01       	movw	r30, r26
 ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__udivmodsi4_ep>

00000ad8 <__udivmodsi4_loop>:
 ad8:	aa 1f       	adc	r26, r26
 ada:	bb 1f       	adc	r27, r27
 adc:	ee 1f       	adc	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	a2 17       	cp	r26, r18
 ae2:	b3 07       	cpc	r27, r19
 ae4:	e4 07       	cpc	r30, r20
 ae6:	f5 07       	cpc	r31, r21
 ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__udivmodsi4_ep>
 aea:	a2 1b       	sub	r26, r18
 aec:	b3 0b       	sbc	r27, r19
 aee:	e4 0b       	sbc	r30, r20
 af0:	f5 0b       	sbc	r31, r21

00000af2 <__udivmodsi4_ep>:
 af2:	66 1f       	adc	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	1a 94       	dec	r1
 afc:	69 f7       	brne	.-38     	; 0xad8 <__udivmodsi4_loop>
 afe:	60 95       	com	r22
 b00:	70 95       	com	r23
 b02:	80 95       	com	r24
 b04:	90 95       	com	r25
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	bd 01       	movw	r22, r26
 b0c:	cf 01       	movw	r24, r30
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
