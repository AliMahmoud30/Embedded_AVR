
Voting Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000060e  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acb  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000365  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050e  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000636  00000000  00000000  000026ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  8a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <Button_init>:
 */ 
#include "HButton.h"

void Button_init(u8 PORT,u8 PIN)
{
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
}
 1d8:	08 95       	ret

000001da <Button_init_Pull_UP>:

void Button_init_Pull_UP(u8 PORT,u8 PIN)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	d8 2f       	mov	r29, r24
 1e0:	c6 2f       	mov	r28, r22
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(PORT,PIN,HIGH);
 1e8:	8d 2f       	mov	r24, r29
 1ea:	6c 2f       	mov	r22, r28
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <Button_Read>:

u8 Button_Read(u8 PORT,u8 PIN)
{
	u8 Button_state;
	Button_state=DIO_Get_Pin_value(PORT,PIN);
 1f8:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Get_Pin_value>
	return Button_state;
}
 1fc:	08 95       	ret

000001fe <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 1fe:	89 e3       	ldi	r24, 0x39	; 57
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	8f e9       	ldi	r24, 0x9F	; 159
 20a:	9f e0       	ldi	r25, 0x0F	; 15
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_Enable+0xe>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_Enable+0x14>
 212:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 214:	89 e3       	ldi	r24, 0x39	; 57
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 21e:	08 95       	ret

00000220 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 224:	48 2f       	mov	r20, r24
 226:	42 95       	swap	r20
 228:	4f 70       	andi	r20, 0x0F	; 15
 22a:	41 70       	andi	r20, 0x01	; 1
 22c:	89 e3       	ldi	r24, 0x39	; 57
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 234:	4c 2f       	mov	r20, r28
 236:	42 95       	swap	r20
 238:	46 95       	lsr	r20
 23a:	47 70       	andi	r20, 0x07	; 7
 23c:	41 70       	andi	r20, 0x01	; 1
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 246:	4c 2f       	mov	r20, r28
 248:	42 95       	swap	r20
 24a:	46 95       	lsr	r20
 24c:	46 95       	lsr	r20
 24e:	43 70       	andi	r20, 0x03	; 3
 250:	41 70       	andi	r20, 0x01	; 1
 252:	89 e3       	ldi	r24, 0x39	; 57
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 25a:	4c 2f       	mov	r20, r28
 25c:	44 1f       	adc	r20, r20
 25e:	44 27       	eor	r20, r20
 260:	44 1f       	adc	r20, r20
 262:	89 e3       	ldi	r24, 0x39	; 57
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 26a:	89 e3       	ldi	r24, 0x39	; 57
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 274:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 278:	4c 2f       	mov	r20, r28
 27a:	41 70       	andi	r20, 0x01	; 1
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 284:	4c 2f       	mov	r20, r28
 286:	46 95       	lsr	r20
 288:	41 70       	andi	r20, 0x01	; 1
 28a:	89 e3       	ldi	r24, 0x39	; 57
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 292:	4c 2f       	mov	r20, r28
 294:	46 95       	lsr	r20
 296:	46 95       	lsr	r20
 298:	41 70       	andi	r20, 0x01	; 1
 29a:	89 e3       	ldi	r24, 0x39	; 57
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 2a2:	c6 95       	lsr	r28
 2a4:	c6 95       	lsr	r28
 2a6:	c6 95       	lsr	r28
 2a8:	4c 2f       	mov	r20, r28
 2aa:	41 70       	andi	r20, 0x01	; 1
 2ac:	89 e3       	ldi	r24, 0x39	; 57
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 2b4:	89 e3       	ldi	r24, 0x39	; 57
 2b6:	64 e0       	ldi	r22, 0x04	; 4
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 2be:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Enable>
		
	 #endif
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <LCD_send_string>:

void LCD_send_string(char *data)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 2cc:	88 81       	ld	r24, Y
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 2d2:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 2d4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 2d8:	89 91       	ld	r24, Y+
 2da:	88 23       	and	r24, r24
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 2e4:	cf 93       	push	r28
 2e6:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 2e8:	48 2f       	mov	r20, r24
 2ea:	42 95       	swap	r20
 2ec:	4f 70       	andi	r20, 0x0F	; 15
 2ee:	41 70       	andi	r20, 0x01	; 1
 2f0:	89 e3       	ldi	r24, 0x39	; 57
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 2f8:	4c 2f       	mov	r20, r28
 2fa:	42 95       	swap	r20
 2fc:	46 95       	lsr	r20
 2fe:	47 70       	andi	r20, 0x07	; 7
 300:	41 70       	andi	r20, 0x01	; 1
 302:	89 e3       	ldi	r24, 0x39	; 57
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 30a:	4c 2f       	mov	r20, r28
 30c:	42 95       	swap	r20
 30e:	46 95       	lsr	r20
 310:	46 95       	lsr	r20
 312:	43 70       	andi	r20, 0x03	; 3
 314:	41 70       	andi	r20, 0x01	; 1
 316:	89 e3       	ldi	r24, 0x39	; 57
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 31e:	4c 2f       	mov	r20, r28
 320:	44 1f       	adc	r20, r20
 322:	44 27       	eor	r20, r20
 324:	44 1f       	adc	r20, r20
 326:	89 e3       	ldi	r24, 0x39	; 57
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 32e:	89 e3       	ldi	r24, 0x39	; 57
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 338:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 33c:	4c 2f       	mov	r20, r28
 33e:	41 70       	andi	r20, 0x01	; 1
 340:	89 e3       	ldi	r24, 0x39	; 57
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 348:	4c 2f       	mov	r20, r28
 34a:	46 95       	lsr	r20
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 356:	4c 2f       	mov	r20, r28
 358:	46 95       	lsr	r20
 35a:	46 95       	lsr	r20
 35c:	41 70       	andi	r20, 0x01	; 1
 35e:	89 e3       	ldi	r24, 0x39	; 57
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 366:	c6 95       	lsr	r28
 368:	c6 95       	lsr	r28
 36a:	c6 95       	lsr	r28
 36c:	4c 2f       	mov	r20, r28
 36e:	41 70       	andi	r20, 0x01	; 1
 370:	89 e3       	ldi	r24, 0x39	; 57
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 378:	89 e3       	ldi	r24, 0x39	; 57
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 382:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_Enable>
	
	#endif

}
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <LCD_inti>:
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	91 ee       	ldi	r25, 0xE1	; 225
 38e:	a4 e0       	ldi	r26, 0x04	; 4
 390:	81 50       	subi	r24, 0x01	; 1
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	a0 40       	sbci	r26, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <LCD_inti+0x6>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_inti+0x10>
 39a:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 39c:	89 e3       	ldi	r24, 0x39	; 57
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 3a6:	89 e3       	ldi	r24, 0x39	; 57
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 3b0:	89 e3       	ldi	r24, 0x39	; 57
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 3ba:	89 e3       	ldi	r24, 0x39	; 57
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 3c4:	89 e3       	ldi	r24, 0x39	; 57
 3c6:	65 e0       	ldi	r22, 0x05	; 5
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 3ce:	89 e3       	ldi	r24, 0x39	; 57
 3d0:	64 e0       	ldi	r22, 0x04	; 4
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 3d8:	89 e3       	ldi	r24, 0x39	; 57
 3da:	66 e0       	ldi	r22, 0x06	; 6
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 3e2:	89 e3       	ldi	r24, 0x39	; 57
 3e4:	66 e0       	ldi	r22, 0x06	; 6
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 3f2:	af e1       	ldi	r26, 0x1F	; 31
 3f4:	be e4       	ldi	r27, 0x4E	; 78
 3f6:	11 97       	sbiw	r26, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_inti+0x6c>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_inti+0x72>
 3fc:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 3fe:	88 e2       	ldi	r24, 0x28	; 40
 400:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 404:	8f ec       	ldi	r24, 0xCF	; 207
 406:	97 e0       	ldi	r25, 0x07	; 7
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <LCD_inti+0x7e>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <LCD_inti+0x84>
 40e:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 410:	8e e0       	ldi	r24, 0x0E	; 14
 412:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 416:	af ec       	ldi	r26, 0xCF	; 207
 418:	b7 e0       	ldi	r27, 0x07	; 7
 41a:	11 97       	sbiw	r26, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <LCD_inti+0x90>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <LCD_inti+0x96>
 420:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 428:	8f e1       	ldi	r24, 0x1F	; 31
 42a:	9e e4       	ldi	r25, 0x4E	; 78
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCD_inti+0xa2>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_inti+0xa8>
 432:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 43a:	af ec       	ldi	r26, 0xCF	; 207
 43c:	b7 e0       	ldi	r27, 0x07	; 7
 43e:	11 97       	sbiw	r26, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <LCD_inti+0xb4>
 442:	00 c0       	rjmp	.+0      	; 0x444 <LCD_inti+0xba>
 444:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 446:	08 95       	ret

00000448 <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
	
}
 44e:	08 95       	ret

00000450 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	0f 92       	push	r0
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	19 f4       	brne	.+6      	; 0x464 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 45e:	61 58       	subi	r22, 0x81	; 129
 460:	69 83       	std	Y+1, r22	; 0x01
 462:	0e c0       	rjmp	.+28     	; 0x480 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	19 f4       	brne	.+6      	; 0x46e <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 468:	61 54       	subi	r22, 0x41	; 65
 46a:	69 83       	std	Y+1, r22	; 0x01
 46c:	09 c0       	rjmp	.+18     	; 0x480 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 46e:	81 50       	subi	r24, 0x01	; 1
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	20 f4       	brcc	.+8      	; 0x47c <LCD_move_cursor+0x2c>
 474:	61 31       	cpi	r22, 0x11	; 17
 476:	10 f4       	brcc	.+4      	; 0x47c <LCD_move_cursor+0x2c>
 478:	66 23       	and	r22, r22
 47a:	11 f4       	brne	.+4      	; 0x480 <LCD_move_cursor+0x30>
	{
		data=0x80;
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
 486:	8f ec       	ldi	r24, 0xCF	; 207
 488:	97 e0       	ldi	r25, 0x07	; 7
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_move_cursor+0x3a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_move_cursor+0x40>
 490:	00 00       	nop
	_delay_ms(1);
}
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <lcd_print>:

void lcd_print(char *str)
{
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	88 23       	and	r24, r24
 4a8:	51 f0       	breq	.+20     	; 0x4be <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 4aa:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 4ac:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
		i++;
 4b0:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 4b2:	f8 01       	movw	r30, r16
 4b4:	ec 0f       	add	r30, r28
 4b6:	f1 1d       	adc	r31, r1
 4b8:	80 81       	ld	r24, Z
 4ba:	88 23       	and	r24, r24
 4bc:	b9 f7       	brne	.-18     	; 0x4ac <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <main>:



int main(void)
{
	Button_init_Pull_UP(B,candidate_A);
 4c6:	86 e3       	ldi	r24, 0x36	; 54
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	0e 94 ed 00 	call	0x1da	; 0x1da <Button_init_Pull_UP>
	Button_init_Pull_UP(B,candidate_B);
 4ce:	86 e3       	ldi	r24, 0x36	; 54
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	0e 94 ed 00 	call	0x1da	; 0x1da <Button_init_Pull_UP>
	Button_init_Pull_UP(B,candidate_C);
 4d6:	86 e3       	ldi	r24, 0x36	; 54
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	0e 94 ed 00 	call	0x1da	; 0x1da <Button_init_Pull_UP>
	Button_init_Pull_UP(B,candidate_D);
 4de:	86 e3       	ldi	r24, 0x36	; 54
 4e0:	63 e0       	ldi	r22, 0x03	; 3
 4e2:	0e 94 ed 00 	call	0x1da	; 0x1da <Button_init_Pull_UP>
	Button_init_Pull_UP(B,RESET);
 4e6:	86 e3       	ldi	r24, 0x36	; 54
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	0e 94 ed 00 	call	0x1da	; 0x1da <Button_init_Pull_UP>
	
	LCD_inti();
 4ee:	0e 94 c5 01 	call	0x38a	; 0x38a <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 4f2:	8c e0       	ldi	r24, 0x0C	; 12
 4f4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_send_cmd>
	LCD_send_string("A=");
 4f8:	80 e6       	ldi	r24, 0x60	; 96
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_send_string>
	LCD_move_cursor(1,13);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	6d e0       	ldi	r22, 0x0D	; 13
 504:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
	LCD_send_string("B=");
 508:	83 e6       	ldi	r24, 0x63	; 99
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_send_string>
	LCD_move_cursor(2,1);
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
	LCD_send_string("C=");
 518:	86 e6       	ldi	r24, 0x66	; 102
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_send_string>
	LCD_move_cursor(2,13);
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	6d e0       	ldi	r22, 0x0D	; 13
 524:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
	LCD_send_string("D=");
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_send_string>
	
	unsigned char Counter_1=0;
	unsigned char Counter_2=0;
	unsigned char Counter_3=0;
	unsigned char Counter_4=0;
 530:	00 e0       	ldi	r16, 0x00	; 0
	LCD_move_cursor(2,13);
	LCD_send_string("D=");
	
	unsigned char Counter_1=0;
	unsigned char Counter_2=0;
	unsigned char Counter_3=0;
 532:	10 e0       	ldi	r17, 0x00	; 0
	LCD_send_string("C=");
	LCD_move_cursor(2,13);
	LCD_send_string("D=");
	
	unsigned char Counter_1=0;
	unsigned char Counter_2=0;
 534:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_move_cursor(2,1);
	LCD_send_string("C=");
	LCD_move_cursor(2,13);
	LCD_send_string("D=");
	
	unsigned char Counter_1=0;
 536:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char Counter_3=0;
	unsigned char Counter_4=0;
	
    while(1)
    {
		if(Button_Read(B,candidate_A)==0)
 538:	86 e3       	ldi	r24, 0x36	; 54
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 540:	88 23       	and	r24, r24
 542:	41 f4       	brne	.+16     	; 0x554 <main+0x8e>
		{
			while (Button_Read(B,candidate_A)==0);
 544:	86 e3       	ldi	r24, 0x36	; 54
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 54c:	88 23       	and	r24, r24
 54e:	d1 f3       	breq	.-12     	; 0x544 <main+0x7e>
			Counter_1++;
 550:	cf 5f       	subi	r28, 0xFF	; 255
 552:	3a c0       	rjmp	.+116    	; 0x5c8 <main+0x102>
		}
		else if (Button_Read(B,candidate_B)==0)
 554:	86 e3       	ldi	r24, 0x36	; 54
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 55c:	88 23       	and	r24, r24
 55e:	41 f4       	brne	.+16     	; 0x570 <main+0xaa>
		{
			while (Button_Read(B,candidate_B)==0);
 560:	86 e3       	ldi	r24, 0x36	; 54
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 568:	88 23       	and	r24, r24
 56a:	d1 f3       	breq	.-12     	; 0x560 <main+0x9a>
			Counter_2++;
 56c:	df 5f       	subi	r29, 0xFF	; 255
 56e:	2c c0       	rjmp	.+88     	; 0x5c8 <main+0x102>
		}
		else if (Button_Read(B,candidate_C)==0)
 570:	86 e3       	ldi	r24, 0x36	; 54
 572:	62 e0       	ldi	r22, 0x02	; 2
 574:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 578:	88 23       	and	r24, r24
 57a:	41 f4       	brne	.+16     	; 0x58c <main+0xc6>
		{
			while (Button_Read(B,candidate_C)==0);
 57c:	86 e3       	ldi	r24, 0x36	; 54
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 584:	88 23       	and	r24, r24
 586:	d1 f3       	breq	.-12     	; 0x57c <main+0xb6>
			Counter_3++;
 588:	1f 5f       	subi	r17, 0xFF	; 255
 58a:	1e c0       	rjmp	.+60     	; 0x5c8 <main+0x102>
		}
		else if (Button_Read(B,candidate_D)==0)
 58c:	86 e3       	ldi	r24, 0x36	; 54
 58e:	63 e0       	ldi	r22, 0x03	; 3
 590:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 594:	88 23       	and	r24, r24
 596:	41 f4       	brne	.+16     	; 0x5a8 <main+0xe2>
		{
			while (Button_Read(B,candidate_D)==0);
 598:	86 e3       	ldi	r24, 0x36	; 54
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 5a0:	88 23       	and	r24, r24
 5a2:	d1 f3       	breq	.-12     	; 0x598 <main+0xd2>
			Counter_4++;
 5a4:	0f 5f       	subi	r16, 0xFF	; 255
 5a6:	10 c0       	rjmp	.+32     	; 0x5c8 <main+0x102>
		}	
		else if (Button_Read(B,RESET)==0)
 5a8:	86 e3       	ldi	r24, 0x36	; 54
 5aa:	64 e0       	ldi	r22, 0x04	; 4
 5ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 5b0:	88 23       	and	r24, r24
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <main+0x102>
		{
			while (Button_Read(B,RESET)==0);
 5b4:	86 e3       	ldi	r24, 0x36	; 54
 5b6:	64 e0       	ldi	r22, 0x04	; 4
 5b8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Button_Read>
 5bc:	88 23       	and	r24, r24
 5be:	d1 f3       	breq	.-12     	; 0x5b4 <main+0xee>
			Counter_1=0;
			Counter_2=0;
			Counter_3=0;
			Counter_4=0;
 5c0:	00 e0       	ldi	r16, 0x00	; 0
		else if (Button_Read(B,RESET)==0)
		{
			while (Button_Read(B,RESET)==0);
			Counter_1=0;
			Counter_2=0;
			Counter_3=0;
 5c2:	10 e0       	ldi	r17, 0x00	; 0
		}	
		else if (Button_Read(B,RESET)==0)
		{
			while (Button_Read(B,RESET)==0);
			Counter_1=0;
			Counter_2=0;
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
			Counter_4++;
		}	
		else if (Button_Read(B,RESET)==0)
		{
			while (Button_Read(B,RESET)==0);
			Counter_1=0;
 5c6:	c0 e0       	ldi	r28, 0x00	; 0
			Counter_2=0;
			Counter_3=0;
			Counter_4=0;
		}						
     	LCD_move_cursor(1,3);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
     	LCD_send_char(Counter_1+48);
 5d0:	8c 2f       	mov	r24, r28
 5d2:	80 5d       	subi	r24, 0xD0	; 208
 5d4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
     	LCD_move_cursor(1,15);
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	6f e0       	ldi	r22, 0x0F	; 15
 5dc:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
     	LCD_send_char(Counter_2+48);
 5e0:	8d 2f       	mov	r24, r29
 5e2:	80 5d       	subi	r24, 0xD0	; 208
 5e4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
     	LCD_move_cursor(2,3);
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
    	LCD_send_char(Counter_3+48);
 5f0:	81 2f       	mov	r24, r17
 5f2:	80 5d       	subi	r24, 0xD0	; 208
 5f4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
     	LCD_move_cursor(2,15);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	6f e0       	ldi	r22, 0x0F	; 15
 5fc:	0e 94 28 02 	call	0x450	; 0x450 <LCD_move_cursor>
     	LCD_send_char(Counter_4+48);
 600:	80 2f       	mov	r24, r16
 602:	80 5d       	subi	r24, 0xD0	; 208
 604:	0e 94 10 01 	call	0x220	; 0x220 <LCD_send_char>
	
    }
 608:	97 cf       	rjmp	.-210    	; 0x538 <main+0x72>

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
