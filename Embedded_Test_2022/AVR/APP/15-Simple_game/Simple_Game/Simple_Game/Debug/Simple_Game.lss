
Simple_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000756  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a4  008000a4  0000082e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ccf  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f0  00000000  00000000  00001d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  00002247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032b  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075e  00000000  00000000  00002edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000363d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 03 	call	0x64a	; 0x64a <main>
  8a:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <Keypad_4_4_Init>:
#include "HKeypad_config.h"

void Keypad_4_4_Init(void)
{
	/*set Rows as Output Pins */
	DIO_Set_Pin_Direction(ROW_0,OUTPUT);
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_1,OUTPUT);
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_2,OUTPUT);
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_3,OUTPUT);
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*set columns as Input_PULL_UP Pins */
	DIO_Set_Pin_Direction(Col_0,INPUT);
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	64 e0       	ldi	r22, 0x04	; 4
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_1,INPUT);
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_2,INPUT);
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	66 e0       	ldi	r22, 0x06	; 6
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_3,INPUT);
 218:	83 e3       	ldi	r24, 0x33	; 51
 21a:	67 e0       	ldi	r22, 0x07	; 7
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	DIO_Set_Pin_Value(Col_0,HIGH);
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_1,HIGH);
 22c:	83 e3       	ldi	r24, 0x33	; 51
 22e:	65 e0       	ldi	r22, 0x05	; 5
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_2,HIGH);
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	66 e0       	ldi	r22, 0x06	; 6
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_3,HIGH);
 240:	83 e3       	ldi	r24, 0x33	; 51
 242:	67 e0       	ldi	r22, 0x07	; 7
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 24a:	08 95       	ret

0000024c <Keypad_4_4_Read>:


unsigned char Keypad_4_4_Read(void)
{
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	10 e0       	ldi	r17, 0x00	; 0
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
			{
				keypad_value=keypad_chr[ROW][COL];
 25a:	0f 2e       	mov	r0, r31
 25c:	f0 e6       	ldi	r31, 0x60	; 96
 25e:	ef 2e       	mov	r14, r31
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ff 2e       	mov	r15, r31
 264:	f0 2d       	mov	r31, r0
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
	{
		DIO_Set_Pin_Value(ROW_0,HIGH);
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_1,HIGH);
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_2,HIGH);
 27a:	83 e3       	ldi	r24, 0x33	; 51
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_3,HIGH);
 284:	83 e3       	ldi	r24, 0x33	; 51
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	60 2f       	mov	r22, r16
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		for(COL=0;COL<4;COL++)
 298:	c0 e0       	ldi	r28, 0x00	; 0
	DIO_Set_Pin_Value(Col_2,HIGH);
	DIO_Set_Pin_Value(Col_3,HIGH);
}


unsigned char Keypad_4_4_Read(void)
 29a:	6c 2f       	mov	r22, r28
 29c:	6c 5f       	subi	r22, 0xFC	; 252
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
 29e:	83 e3       	ldi	r24, 0x33	; 51
 2a0:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Get_Pin_value>
 2a4:	88 23       	and	r24, r24
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <Keypad_4_4_Read+0x78>
			{
				keypad_value=keypad_chr[ROW][COL];
 2a8:	c8 01       	movw	r24, r16
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	8c 0f       	add	r24, r28
 2b4:	91 1d       	adc	r25, r1
 2b6:	f7 01       	movw	r30, r14
 2b8:	e8 0f       	add	r30, r24
 2ba:	f9 1f       	adc	r31, r25
 2bc:	80 81       	ld	r24, Z
				break;
			}
		}
		if((keypad_value)!=0xFF)
 2be:	8f 3f       	cpi	r24, 0xFF	; 255
 2c0:	21 f0       	breq	.+8      	; 0x2ca <Keypad_4_4_Read+0x7e>
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <Keypad_4_4_Read+0x8a>
		DIO_Set_Pin_Value(ROW_1,HIGH);
		DIO_Set_Pin_Value(ROW_2,HIGH);
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
 2c4:	cf 5f       	subi	r28, 0xFF	; 255
 2c6:	c4 30       	cpi	r28, 0x04	; 4
 2c8:	41 f7       	brne	.-48     	; 0x29a <Keypad_4_4_Read+0x4e>
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char ROW=0;
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
 2ce:	04 30       	cpi	r16, 0x04	; 4
 2d0:	11 05       	cpc	r17, r1
 2d2:	49 f6       	brne	.-110    	; 0x266 <Keypad_4_4_Read+0x1a>
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
		
	}
	return keypad_value;
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 2e2:	89 e3       	ldi	r24, 0x39	; 57
 2e4:	65 e0       	ldi	r22, 0x05	; 5
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	8f e9       	ldi	r24, 0x9F	; 159
 2ee:	9f e0       	ldi	r25, 0x0F	; 15
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_Enable+0xe>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_Enable+0x14>
 2f6:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 2f8:	89 e3       	ldi	r24, 0x39	; 57
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 302:	08 95       	ret

00000304 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 304:	cf 93       	push	r28
 306:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 308:	48 2f       	mov	r20, r24
 30a:	42 95       	swap	r20
 30c:	4f 70       	andi	r20, 0x0F	; 15
 30e:	41 70       	andi	r20, 0x01	; 1
 310:	89 e3       	ldi	r24, 0x39	; 57
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 318:	4c 2f       	mov	r20, r28
 31a:	42 95       	swap	r20
 31c:	46 95       	lsr	r20
 31e:	47 70       	andi	r20, 0x07	; 7
 320:	41 70       	andi	r20, 0x01	; 1
 322:	89 e3       	ldi	r24, 0x39	; 57
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 32a:	4c 2f       	mov	r20, r28
 32c:	42 95       	swap	r20
 32e:	46 95       	lsr	r20
 330:	46 95       	lsr	r20
 332:	43 70       	andi	r20, 0x03	; 3
 334:	41 70       	andi	r20, 0x01	; 1
 336:	89 e3       	ldi	r24, 0x39	; 57
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 33e:	4c 2f       	mov	r20, r28
 340:	44 1f       	adc	r20, r20
 342:	44 27       	eor	r20, r20
 344:	44 1f       	adc	r20, r20
 346:	89 e3       	ldi	r24, 0x39	; 57
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 358:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 35c:	4c 2f       	mov	r20, r28
 35e:	41 70       	andi	r20, 0x01	; 1
 360:	89 e3       	ldi	r24, 0x39	; 57
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 368:	4c 2f       	mov	r20, r28
 36a:	46 95       	lsr	r20
 36c:	41 70       	andi	r20, 0x01	; 1
 36e:	89 e3       	ldi	r24, 0x39	; 57
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 376:	4c 2f       	mov	r20, r28
 378:	46 95       	lsr	r20
 37a:	46 95       	lsr	r20
 37c:	41 70       	andi	r20, 0x01	; 1
 37e:	89 e3       	ldi	r24, 0x39	; 57
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 386:	c6 95       	lsr	r28
 388:	c6 95       	lsr	r28
 38a:	c6 95       	lsr	r28
 38c:	4c 2f       	mov	r20, r28
 38e:	41 70       	andi	r20, 0x01	; 1
 390:	89 e3       	ldi	r24, 0x39	; 57
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 398:	89 e3       	ldi	r24, 0x39	; 57
 39a:	64 e0       	ldi	r22, 0x04	; 4
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 3a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_Enable>
		
	 #endif
}
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <LCD_send_string>:

void LCD_send_string(char *data)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 3b0:	88 81       	ld	r24, Y
 3b2:	88 23       	and	r24, r24
 3b4:	31 f0       	breq	.+12     	; 0x3c2 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 3b6:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 3b8:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 3bc:	89 91       	ld	r24, Y+
 3be:	88 23       	and	r24, r24
 3c0:	d9 f7       	brne	.-10     	; 0x3b8 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 3cc:	48 2f       	mov	r20, r24
 3ce:	42 95       	swap	r20
 3d0:	4f 70       	andi	r20, 0x0F	; 15
 3d2:	41 70       	andi	r20, 0x01	; 1
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 3dc:	4c 2f       	mov	r20, r28
 3de:	42 95       	swap	r20
 3e0:	46 95       	lsr	r20
 3e2:	47 70       	andi	r20, 0x07	; 7
 3e4:	41 70       	andi	r20, 0x01	; 1
 3e6:	89 e3       	ldi	r24, 0x39	; 57
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 3ee:	4c 2f       	mov	r20, r28
 3f0:	42 95       	swap	r20
 3f2:	46 95       	lsr	r20
 3f4:	46 95       	lsr	r20
 3f6:	43 70       	andi	r20, 0x03	; 3
 3f8:	41 70       	andi	r20, 0x01	; 1
 3fa:	89 e3       	ldi	r24, 0x39	; 57
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 402:	4c 2f       	mov	r20, r28
 404:	44 1f       	adc	r20, r20
 406:	44 27       	eor	r20, r20
 408:	44 1f       	adc	r20, r20
 40a:	89 e3       	ldi	r24, 0x39	; 57
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	64 e0       	ldi	r22, 0x04	; 4
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 41c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 420:	4c 2f       	mov	r20, r28
 422:	41 70       	andi	r20, 0x01	; 1
 424:	89 e3       	ldi	r24, 0x39	; 57
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 42c:	4c 2f       	mov	r20, r28
 42e:	46 95       	lsr	r20
 430:	41 70       	andi	r20, 0x01	; 1
 432:	89 e3       	ldi	r24, 0x39	; 57
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 43a:	4c 2f       	mov	r20, r28
 43c:	46 95       	lsr	r20
 43e:	46 95       	lsr	r20
 440:	41 70       	andi	r20, 0x01	; 1
 442:	89 e3       	ldi	r24, 0x39	; 57
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 44a:	c6 95       	lsr	r28
 44c:	c6 95       	lsr	r28
 44e:	c6 95       	lsr	r28
 450:	4c 2f       	mov	r20, r28
 452:	41 70       	andi	r20, 0x01	; 1
 454:	89 e3       	ldi	r24, 0x39	; 57
 456:	63 e0       	ldi	r22, 0x03	; 3
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 45c:	89 e3       	ldi	r24, 0x39	; 57
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 466:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LCD_Enable>
	
	#endif

}
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <LCD_inti>:
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	91 ee       	ldi	r25, 0xE1	; 225
 472:	a4 e0       	ldi	r26, 0x04	; 4
 474:	81 50       	subi	r24, 0x01	; 1
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	a0 40       	sbci	r26, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <LCD_inti+0x6>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_inti+0x10>
 47e:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 480:	89 e3       	ldi	r24, 0x39	; 57
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 48a:	89 e3       	ldi	r24, 0x39	; 57
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 494:	89 e3       	ldi	r24, 0x39	; 57
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 49e:	89 e3       	ldi	r24, 0x39	; 57
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 4a8:	89 e3       	ldi	r24, 0x39	; 57
 4aa:	65 e0       	ldi	r22, 0x05	; 5
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 4b2:	89 e3       	ldi	r24, 0x39	; 57
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 4bc:	89 e3       	ldi	r24, 0x39	; 57
 4be:	66 e0       	ldi	r22, 0x06	; 6
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 4c6:	89 e3       	ldi	r24, 0x39	; 57
 4c8:	66 e0       	ldi	r22, 0x06	; 6
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 4d6:	af e1       	ldi	r26, 0x1F	; 31
 4d8:	be e4       	ldi	r27, 0x4E	; 78
 4da:	11 97       	sbiw	r26, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_inti+0x6c>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_inti+0x72>
 4e0:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 4e2:	88 e2       	ldi	r24, 0x28	; 40
 4e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 4e8:	8f ec       	ldi	r24, 0xCF	; 207
 4ea:	97 e0       	ldi	r25, 0x07	; 7
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_inti+0x7e>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_inti+0x84>
 4f2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 4f4:	8e e0       	ldi	r24, 0x0E	; 14
 4f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 4fa:	af ec       	ldi	r26, 0xCF	; 207
 4fc:	b7 e0       	ldi	r27, 0x07	; 7
 4fe:	11 97       	sbiw	r26, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_inti+0x90>
 502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_inti+0x96>
 504:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 50c:	8f e1       	ldi	r24, 0x1F	; 31
 50e:	9e e4       	ldi	r25, 0x4E	; 78
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_inti+0xa2>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_inti+0xa8>
 516:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 51e:	af ec       	ldi	r26, 0xCF	; 207
 520:	b7 e0       	ldi	r27, 0x07	; 7
 522:	11 97       	sbiw	r26, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <LCD_inti+0xb4>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_inti+0xba>
 528:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 52a:	08 95       	ret

0000052c <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
	
}
 532:	08 95       	ret

00000534 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	0f 92       	push	r0
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	19 f4       	brne	.+6      	; 0x548 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 542:	61 58       	subi	r22, 0x81	; 129
 544:	69 83       	std	Y+1, r22	; 0x01
 546:	0e c0       	rjmp	.+28     	; 0x564 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	19 f4       	brne	.+6      	; 0x552 <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 54c:	61 54       	subi	r22, 0x41	; 65
 54e:	69 83       	std	Y+1, r22	; 0x01
 550:	09 c0       	rjmp	.+18     	; 0x564 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 552:	81 50       	subi	r24, 0x01	; 1
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	20 f4       	brcc	.+8      	; 0x560 <LCD_move_cursor+0x2c>
 558:	61 31       	cpi	r22, 0x11	; 17
 55a:	10 f4       	brcc	.+4      	; 0x560 <LCD_move_cursor+0x2c>
 55c:	66 23       	and	r22, r22
 55e:	11 f4       	brne	.+4      	; 0x564 <LCD_move_cursor+0x30>
	{
		data=0x80;
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
 56a:	8f ec       	ldi	r24, 0xCF	; 207
 56c:	97 e0       	ldi	r25, 0x07	; 7
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCD_move_cursor+0x3a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <LCD_move_cursor+0x40>
 574:	00 00       	nop
	_delay_ms(1);
}
 576:	0f 90       	pop	r0
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <lcd_print>:

void lcd_print(char *str)
{
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 586:	fc 01       	movw	r30, r24
 588:	80 81       	ld	r24, Z
 58a:	88 23       	and	r24, r24
 58c:	51 f0       	breq	.+20     	; 0x5a2 <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 58e:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 590:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
		i++;
 594:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 596:	f8 01       	movw	r30, r16
 598:	ec 0f       	add	r30, r28
 59a:	f1 1d       	adc	r31, r1
 59c:	80 81       	ld	r24, Z
 59e:	88 23       	and	r24, r24
 5a0:	b9 f7       	brne	.-18     	; 0x590 <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <__vector_10>:
    }

}

ISR(TIMER0_COMP_vect)
{
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
	Counter++;
 5b8:	80 91 a4 00 	lds	r24, 0x00A4
 5bc:	90 91 a5 00 	lds	r25, 0x00A5
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	90 93 a5 00 	sts	0x00A5, r25
 5c6:	80 93 a4 00 	sts	0x00A4, r24
	
}
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <Fisrt_Screen>:

void Fisrt_Screen()
{
	LCD_send_cmd(display_on_cursor_off);
 5d8:	8c e0       	ldi	r24, 0x0C	; 12
 5da:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
	LCD_move_cursor(1,6);
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	66 e0       	ldi	r22, 0x06	; 6
 5e2:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_move_cursor>
	LCD_send_string("Hello");
 5e6:	80 e7       	ldi	r24, 0x70	; 112
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_send_string>
	LCD_move_cursor(2,3);
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_move_cursor>
	LCD_send_string("simple Game");
 5f6:	86 e7       	ldi	r24, 0x76	; 118
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_send_string>
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	93 ed       	ldi	r25, 0xD3	; 211
 602:	a0 e3       	ldi	r26, 0x30	; 48
 604:	81 50       	subi	r24, 0x01	; 1
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	a0 40       	sbci	r26, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <Fisrt_Screen+0x2c>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <Fisrt_Screen+0x36>
 60e:	00 00       	nop
	_delay_ms(2000);
}
 610:	08 95       	ret

00000612 <Second_Screen>:

void Second_Screen()
{
	LCD_clear();
 612:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_clear>
	LCD_send_cmd(display_on_cursor_on);
 616:	8e e0       	ldi	r24, 0x0E	; 14
 618:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_send_cmd>
	LCD_send_char('8');
 61c:	88 e3       	ldi	r24, 0x38	; 56
 61e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_send_char('+');
 622:	8b e2       	ldi	r24, 0x2B	; 43
 624:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_send_char('?');
 628:	8f e3       	ldi	r24, 0x3F	; 63
 62a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_send_char('=');
 62e:	8d e3       	ldi	r24, 0x3D	; 61
 630:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_send_char('1');
 634:	81 e3       	ldi	r24, 0x31	; 49
 636:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_send_char('1');
 63a:	81 e3       	ldi	r24, 0x31	; 49
 63c:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
	LCD_move_cursor(1,3);
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_move_cursor>
}
 648:	08 95       	ret

0000064a <main>:
void Second_Screen();

int main(void)
{
	/* Initialization */
	LCD_inti();
 64a:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_inti>
	Keypad_4_4_Init();
 64e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Keypad_4_4_Init>
	Fisrt_Screen();
 652:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <Fisrt_Screen>
	Second_Screen();
 656:	0e 94 09 03 	call	0x612	; 0x612 <Second_Screen>
	Timer0_CTC_Interrupt_Init(80);
 65a:	80 e5       	ldi	r24, 0x50	; 80
 65c:	0e 94 95 03 	call	0x72a	; 0x72a <Timer0_CTC_Interrupt_Init>
	u8 keypad_value;
	u8 Flag=0;
	
    while(1)
    {
		Flag=0;
 660:	00 e0       	ldi	r16, 0x00	; 0
				}
				else
				{
					LCD_send_string("Wrong answer");
				}				
				Flag=1;
 662:	bb 24       	eor	r11, r11
 664:	b3 94       	inc	r11
 666:	1b 2d       	mov	r17, r11
				{
					LCD_send_string("Well Done");
				}
				else
				{
					LCD_send_string("Wrong answer");
 668:	0f 2e       	mov	r0, r31
 66a:	fc e8       	ldi	r31, 0x8C	; 140
 66c:	ef 2e       	mov	r14, r31
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	ff 2e       	mov	r15, r31
 672:	f0 2d       	mov	r31, r0
				LCD_send_char(keypad_value);
				_delay_ms(500);
				LCD_move_cursor(2,3);
				if (keypad_value=='3')
				{
					LCD_send_string("Well Done");
 674:	0f 2e       	mov	r0, r31
 676:	f2 e8       	ldi	r31, 0x82	; 130
 678:	cf 2e       	mov	r12, r31
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	df 2e       	mov	r13, r31
 67e:	f0 2d       	mov	r31, r0
		}
		if(Flag==0)
		{
			LCD_clear();
			LCD_move_cursor(1,3);
			LCD_send_string("Game Over");
 680:	0f 2e       	mov	r0, r31
 682:	f9 e9       	ldi	r31, 0x99	; 153
 684:	8f 2e       	mov	r8, r31
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	9f 2e       	mov	r9, r31
 68a:	f0 2d       	mov	r31, r0
	u8 Flag=0;
	
    while(1)
    {
		Flag=0;
		Counter=0;
 68c:	10 92 a5 00 	sts	0x00A5, r1
 690:	10 92 a4 00 	sts	0x00A4, r1
	u8 keypad_value;
	u8 Flag=0;
	
    while(1)
    {
		Flag=0;
 694:	d0 2f       	mov	r29, r16
		Counter=0;
		while ((Counter<1000) && (Flag==0))
 696:	27 c0       	rjmp	.+78     	; 0x6e6 <main+0x9c>
		{
			keypad_value=Keypad_4_4_Read();
 698:	0e 94 26 01 	call	0x24c	; 0x24c <Keypad_4_4_Read>
 69c:	c8 2f       	mov	r28, r24
			if (keypad_value!=NOT_PRESSED)
 69e:	8f 3f       	cpi	r24, 0xFF	; 255
 6a0:	11 f1       	breq	.+68     	; 0x6e6 <main+0x9c>
			{
				LCD_send_char(keypad_value);
 6a2:	0e 94 82 01 	call	0x304	; 0x304 <LCD_send_char>
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	94 e3       	ldi	r25, 0x34	; 52
 6aa:	ac e0       	ldi	r26, 0x0C	; 12
 6ac:	81 50       	subi	r24, 0x01	; 1
 6ae:	90 40       	sbci	r25, 0x00	; 0
 6b0:	a0 40       	sbci	r26, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0x62>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x6c>
 6b6:	00 00       	nop
				_delay_ms(500);
				LCD_move_cursor(2,3);
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_move_cursor>
				if (keypad_value=='3')
 6c0:	c3 33       	cpi	r28, 0x33	; 51
 6c2:	21 f4       	brne	.+8      	; 0x6cc <main+0x82>
				{
					LCD_send_string("Well Done");
 6c4:	c6 01       	movw	r24, r12
 6c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_send_string>
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <main+0x88>
				}
				else
				{
					LCD_send_string("Wrong answer");
 6cc:	c7 01       	movw	r24, r14
 6ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_send_string>
 6d2:	8f ef       	ldi	r24, 0xFF	; 255
 6d4:	93 ed       	ldi	r25, 0xD3	; 211
 6d6:	a0 e3       	ldi	r26, 0x30	; 48
 6d8:	81 50       	subi	r24, 0x01	; 1
 6da:	90 40       	sbci	r25, 0x00	; 0
 6dc:	a0 40       	sbci	r26, 0x00	; 0
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <main+0x8e>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x98>
 6e2:	00 00       	nop
				}				
				Flag=1;
 6e4:	d1 2f       	mov	r29, r17
	
    while(1)
    {
		Flag=0;
		Counter=0;
		while ((Counter<1000) && (Flag==0))
 6e6:	80 91 a4 00 	lds	r24, 0x00A4
 6ea:	90 91 a5 00 	lds	r25, 0x00A5
 6ee:	a3 e0       	ldi	r26, 0x03	; 3
 6f0:	88 3e       	cpi	r24, 0xE8	; 232
 6f2:	9a 07       	cpc	r25, r26
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <main+0xb2>
 6f6:	dd 23       	and	r29, r29
 6f8:	79 f2       	breq	.-98     	; 0x698 <main+0x4e>
 6fa:	14 c0       	rjmp	.+40     	; 0x724 <main+0xda>
				}				
				Flag=1;
				_delay_ms(2000);
			}
		}
		if(Flag==0)
 6fc:	dd 23       	and	r29, r29
 6fe:	91 f4       	brne	.+36     	; 0x724 <main+0xda>
		{
			LCD_clear();
 700:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_clear>
			LCD_move_cursor(1,3);
 704:	8b 2d       	mov	r24, r11
 706:	63 e0       	ldi	r22, 0x03	; 3
 708:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_move_cursor>
			LCD_send_string("Game Over");
 70c:	c4 01       	movw	r24, r8
 70e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_send_string>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	93 ed       	ldi	r25, 0xD3	; 211
 716:	a0 e3       	ldi	r26, 0x30	; 48
 718:	81 50       	subi	r24, 0x01	; 1
 71a:	90 40       	sbci	r25, 0x00	; 0
 71c:	a0 40       	sbci	r26, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <main+0xce>
 720:	00 c0       	rjmp	.+0      	; 0x722 <main+0xd8>
 722:	00 00       	nop
			_delay_ms(2000);
		}
		
		Second_Screen();
 724:	0e 94 09 03 	call	0x612	; 0x612 <Second_Screen>
    }
 728:	b1 cf       	rjmp	.-158    	; 0x68c <main+0x42>

0000072a <Timer0_CTC_Interrupt_Init>:


void Timer0_CTC_Interrupt_Init(u8 OCR0_Value)
{
	/* Set Output Compare Mode (CTC Mode) */
	CLR_BIT(TCCR0,WGM00);
 72a:	93 b7       	in	r25, 0x33	; 51
 72c:	9f 7b       	andi	r25, 0xBF	; 191
 72e:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,WGM01);
 730:	93 b7       	in	r25, 0x33	; 51
 732:	98 60       	ori	r25, 0x08	; 8
 734:	93 bf       	out	0x33, r25	; 51
	
	/* Set prescaler For Timer0 */
	
	TCCR0&=0xF8;					/* clear CS00, CS01 and CS02 before write */
 736:	93 b7       	in	r25, 0x33	; 51
 738:	98 7f       	andi	r25, 0xF8	; 248
 73a:	93 bf       	out	0x33, r25	; 51
	TCCR0|=TIMER0_CLOCK_SELECT;		/* write Prescaler value without change others bits*/
 73c:	93 b7       	in	r25, 0x33	; 51
 73e:	95 60       	ori	r25, 0x05	; 5
 740:	93 bf       	out	0x33, r25	; 51

	/* Load Value to OCR0*/
	OCR0=OCR0_Value;
 742:	8c bf       	out	0x3c, r24	; 60

	/* Set Timer0 Interrupt Enable*/
	SET_BIT(TIMSK,OCIE0);
 744:	89 b7       	in	r24, 0x39	; 57
 746:	82 60       	ori	r24, 0x02	; 2
 748:	89 bf       	out	0x39, r24	; 57

	/* Set Global Interrupt (I-BIT) */
	SET_BIT(STATUS_REG,I_BIT);
 74a:	8f b7       	in	r24, 0x3f	; 63
 74c:	80 68       	ori	r24, 0x80	; 128
 74e:	8f bf       	out	0x3f, r24	; 63
}
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
