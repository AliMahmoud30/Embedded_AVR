
SPI_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000875  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000320  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000572  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000291  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049e  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  8a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <SPI_MasterInit>:
#include "std_macros.h"

void SPI_MasterInit(void)
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 1dc:	86 e3       	ldi	r24, 0x36	; 54
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,OUTPUT);
 1e6:	86 e3       	ldi	r24, 0x36	; 54
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	81 65       	ori	r24, 0x51	; 81
 1f4:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	DIO_Set_Pin_Value(SS,HIGH);
 1f6:	86 e3       	ldi	r24, 0x36	; 54
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 200:	08 95       	ret

00000202 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	DIO_Set_Pin_Direction(MOSI,INPUT);
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,INPUT);
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	67 e0       	ldi	r22, 0x07	; 7
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,INPUT);
 216:	86 e3       	ldi	r24, 0x36	; 54
 218:	64 e0       	ldi	r22, 0x04	; 4
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 220:	86 e3       	ldi	r24, 0x36	; 54
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	CLR_BIT(SPCR,4);		/* Slave mode*/
 22a:	6c 98       	cbi	0x0d, 4	; 13
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 22c:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 22e:	08 95       	ret

00000230 <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 Data)
{
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	0f 92       	push	r0
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	18 2f       	mov	r17, r24
	volatile u8 Slave_Data;
	
	/*Clear SS to send Data to Slave */
	DIO_Set_Pin_Value(SS,LOW);
 23e:	86 e3       	ldi	r24, 0x36	; 54
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	/* Start Transmission */
	SPDR=Data;
 248:	1f b9       	out	0x0f, r17	; 15
	/* Wait for Transmission complete */
	while (!(SPSR&(1<<SPIF)));
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <SPI_MasterTransmit+0x1a>
	
	Slave_Data=SPDR;
 24e:	8f b1       	in	r24, 0x0f	; 15
 250:	89 83       	std	Y+1, r24	; 0x01
	/*Set SS */
	//DIO_Set_Pin_Value(SS,HIGH);
	/* Return Data Received Data*/
	
	return Slave_Data;
 252:	89 81       	ldd	r24, Y+1	; 0x01
}
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <SPI_SlaveReceive>:

u8 SPI_SlaveReceive(u8 Data)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	volatile u8 SPI_DataReceived;
	
	SPDR=Data;
 268:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Reception  Received */
	while(GET_BIT(SPSR,SPIF)==0);
 26a:	77 9b       	sbis	0x0e, 7	; 14
 26c:	fe cf       	rjmp	.-4      	; 0x26a <SPI_SlaveReceive+0xc>
	//while(!(SPSR&(1<<SPIF)));
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
 26e:	8f b1       	in	r24, 0x0f	; 15
 270:	89 83       	std	Y+1, r24	; 0x01
	return SPI_DataReceived;
 272:	89 81       	ldd	r24, Y+1	; 0x01
}
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <SPI_MasterSendString>:
void SPI_MasterSendString(u8* string)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
	while (*string!='\0')
 282:	88 81       	ld	r24, Y
 284:	88 23       	and	r24, r24
 286:	61 f0       	breq	.+24     	; 0x2a0 <SPI_MasterSendString+0x24>
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
	return SPI_DataReceived;
}
void SPI_MasterSendString(u8* string)
 288:	21 96       	adiw	r28, 0x01	; 1
{
	while (*string!='\0')
	{
		SPI_MasterTransmit(*string);
 28a:	0e 94 18 01 	call	0x230	; 0x230 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	87 ea       	ldi	r24, 0xA7	; 167
 290:	91 e6       	ldi	r25, 0x61	; 97
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <SPI_MasterSendString+0x16>
 296:	00 c0       	rjmp	.+0      	; 0x298 <SPI_MasterSendString+0x1c>
 298:	00 00       	nop
	SPI_DataReceived=SPDR;
	return SPI_DataReceived;
}
void SPI_MasterSendString(u8* string)
{
	while (*string!='\0')
 29a:	89 91       	ld	r24, Y+
 29c:	88 23       	and	r24, r24
 29e:	a9 f7       	brne	.-22     	; 0x28a <SPI_MasterSendString+0xe>
	{
		SPI_MasterTransmit(*string);
		string++;
		_delay_ms(100);
	}
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <main>:


int main(void)
{
	u8 Data=0x0F,i;
	DIO_Set_Pin_Direction(A,0,OUTPUT);
 2a6:	89 e3       	ldi	r24, 0x39	; 57
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	93 ed       	ldi	r25, 0xD3	; 211
 2b4:	a0 e3       	ldi	r26, 0x30	; 48
 2b6:	81 50       	subi	r24, 0x01	; 1
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	a0 40       	sbci	r26, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x10>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x1a>
 2c0:	00 00       	nop
	_delay_ms(2000);
	
	 /* Initialization */
	 SPI_MasterInit();
 2c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <SPI_MasterInit>
		 {
			 DIO_Set_Pin_Value(A,0,HIGH);
		 }
	 }
	 */
			Data=SPI_MasterTransmit(0x30);
 2c6:	80 e3       	ldi	r24, 0x30	; 48
 2c8:	0e 94 18 01 	call	0x230	; 0x230 <SPI_MasterTransmit>
			if (Data==0xFF)
 2cc:	8f 3f       	cpi	r24, 0xFF	; 255
 2ce:	31 f4       	brne	.+12     	; 0x2dc <main+0x36>
			{
				DIO_Set_Pin_Value(A,0,HIGH);
 2d0:	89 e3       	ldi	r24, 0x39	; 57
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <main+0x40>
			
			}
			else
			{
				DIO_Set_Pin_Value(A,0,LOW);
 2dc:	89 e3       	ldi	r24, 0x39	; 57
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	93 ed       	ldi	r25, 0xD3	; 211
 2ea:	a0 e3       	ldi	r26, 0x30	; 48
 2ec:	81 50       	subi	r24, 0x01	; 1
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	a0 40       	sbci	r26, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x46>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x50>
 2f6:	00 00       	nop
			}
			_delay_ms(2000);
			Data=SPI_MasterTransmit(0x30);
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 18 01 	call	0x230	; 0x230 <SPI_MasterTransmit>
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <main+0x58>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
