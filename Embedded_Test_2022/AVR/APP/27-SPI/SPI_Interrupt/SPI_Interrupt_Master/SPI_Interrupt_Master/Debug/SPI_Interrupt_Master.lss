
SPI_Interrupt_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000392  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000392  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f4  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000345  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000588  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002de  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053f  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  8a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 1dc:	86 e3       	ldi	r24, 0x36	; 54
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,OUTPUT);
 1e6:	86 e3       	ldi	r24, 0x36	; 54
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	81 65       	ori	r24, 0x51	; 81
 1f4:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	DIO_Set_Pin_Value(SS,HIGH);
 1f6:	86 e3       	ldi	r24, 0x36	; 54
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 200:	08 95       	ret

00000202 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	66 e0       	ldi	r22, 0x06	; 6
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 20c:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 20e:	08 95       	ret

00000210 <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 Data)
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	0f 92       	push	r0
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	18 2f       	mov	r17, r24
	volatile u8 Slave_Data;
	
	/*Clear SS to send Data to Slave */
	DIO_Set_Pin_Value(SS,LOW);
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	/* Start Transmission */
	SPDR=Data;
 228:	1f b9       	out	0x0f, r17	; 15
	/* Wait for Transmission complete */
	while (!(SPSR&(1<<SPIF)));
 22a:	77 9b       	sbis	0x0e, 7	; 14
 22c:	fe cf       	rjmp	.-4      	; 0x22a <SPI_MasterTransmit+0x1a>
	
	Slave_Data=SPDR;
 22e:	8f b1       	in	r24, 0x0f	; 15
 230:	89 83       	std	Y+1, r24	; 0x01
	/*Set SS */
	//DIO_Set_Pin_Value(SS,HIGH);
	/* Return Data Received Data*/
	
	return Slave_Data;
 232:	89 81       	ldd	r24, Y+1	; 0x01
}
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <SPI_SlaveReceive>:

u8 SPI_SlaveReceive(u8 Data)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	volatile u8 SPI_DataReceived;
	
	SPDR=Data;
 248:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Reception  Received */
	while(!(SPSR&(1<<SPIF)));
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <SPI_SlaveReceive+0xc>
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
 24e:	8f b1       	in	r24, 0x0f	; 15
 250:	89 83       	std	Y+1, r24	; 0x01
	return SPI_DataReceived;
 252:	89 81       	ldd	r24, Y+1	; 0x01
}
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <SPI_MasterSendString>:

void SPI_MasterSendString(u8* string)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	while (*string!='\0')
 262:	88 81       	ld	r24, Y
 264:	88 23       	and	r24, r24
 266:	61 f0       	breq	.+24     	; 0x280 <SPI_MasterSendString+0x24>
	/*return data */
	SPI_DataReceived=SPDR;
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
 268:	21 96       	adiw	r28, 0x01	; 1
{
	while (*string!='\0')
	{
		SPI_MasterTransmit(*string);
 26a:	0e 94 08 01 	call	0x210	; 0x210 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	87 ea       	ldi	r24, 0xA7	; 167
 270:	91 e6       	ldi	r25, 0x61	; 97
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <SPI_MasterSendString+0x16>
 276:	00 c0       	rjmp	.+0      	; 0x278 <SPI_MasterSendString+0x1c>
 278:	00 00       	nop
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
{
	while (*string!='\0')
 27a:	89 91       	ld	r24, Y+
 27c:	88 23       	and	r24, r24
 27e:	a9 f7       	brne	.-22     	; 0x26a <SPI_MasterSendString+0xe>
	{
		SPI_MasterTransmit(*string);
		string++;
		_delay_ms(100);
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <SPI_Master_INT_Init>:

void SPI_Master_INT_Init()
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 286:	86 e3       	ldi	r24, 0x36	; 54
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 290:	86 e3       	ldi	r24, 0x36	; 54
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,OUTPUT);
 29a:	86 e3       	ldi	r24, 0x36	; 54
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2a4:	8d b1       	in	r24, 0x0d	; 13
 2a6:	81 65       	ori	r24, 0x51	; 81
 2a8:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	DIO_Set_Pin_Value(SS,HIGH);
 2aa:	86 e3       	ldi	r24, 0x36	; 54
 2ac:	64 e0       	ldi	r22, 0x04	; 4
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	/*Enable SPI Interrupt */
	SPCR|=(1<<SPIE);
 2b4:	6f 9a       	sbi	0x0d, 7	; 13
	/* Enable Global Interrupt */  
	S_REG|=(1<<I_BIT);
 2b6:	8f b7       	in	r24, 0x3f	; 63
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	8f bf       	out	0x3f, r24	; 63
	
}
 2bc:	08 95       	ret

000002be <SPI_Slave_INT_Init>:
void SPI_Slave_INT_Init()
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 2be:	86 e3       	ldi	r24, 0x36	; 54
 2c0:	66 e0       	ldi	r22, 0x06	; 6
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 2c8:	6e 9a       	sbi	0x0d, 6	; 13
	/*Enable SPI Interrupt */
	SPCR|=(1<<SPIE);
 2ca:	6f 9a       	sbi	0x0d, 7	; 13
	/* Enable Global Interrupt */
	S_REG|=(1<<I_BIT);
 2cc:	8f b7       	in	r24, 0x3f	; 63
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8f bf       	out	0x3f, r24	; 63
}
 2d2:	08 95       	ret

000002d4 <SPI_INT_Transmite>:

void SPI_INT_Transmite(u8 data)
{
	SPDR=data;
 2d4:	8f b9       	out	0x0f, r24	; 15
}
 2d6:	08 95       	ret

000002d8 <main>:
#include "HSPI.h"
#include "GPIO.h"

int main(void)
{
	DIO_Set_Pin_Direction(A,0,OUTPUT);
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(B,4,OUTPUT);  /* SS Pins*/
 2e2:	86 e3       	ldi	r24, 0x36	; 54
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	SPI_Master_INT_Init();
 2ec:	0e 94 43 01 	call	0x286	; 0x286 <SPI_Master_INT_Init>
	DIO_Set_Pin_Value(B,4,LOW);
 2f0:	86 e3       	ldi	r24, 0x36	; 54
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(A,0,LOW);
 2fa:	89 e3       	ldi	r24, 0x39	; 57
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	99 e6       	ldi	r25, 0x69	; 105
 308:	a8 e1       	ldi	r26, 0x18	; 24
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	a0 40       	sbci	r26, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x32>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x3c>
 314:	00 00       	nop
	_delay_ms(1000);
    while(1)
    {
		
        SPI_INT_Transmite(0x64);
 316:	84 e6       	ldi	r24, 0x64	; 100
 318:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPI_INT_Transmite>
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	93 ed       	ldi	r25, 0xD3	; 211
 320:	a0 e3       	ldi	r26, 0x30	; 48
 322:	81 50       	subi	r24, 0x01	; 1
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	a0 40       	sbci	r26, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x4a>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x54>
 32c:	00 00       	nop
 32e:	f3 cf       	rjmp	.-26     	; 0x316 <main+0x3e>

00000330 <__vector_12>:
		_delay_ms(2000);
    }
}
ISR(SPI_STC_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	DIO_Toggle_Pin(A,0);
 352:	89 e3       	ldi	r24, 0x39	; 57
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_Toggle_Pin>
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	99 e6       	ldi	r25, 0x69	; 105
 35e:	a8 e1       	ldi	r26, 0x18	; 24
 360:	81 50       	subi	r24, 0x01	; 1
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	a0 40       	sbci	r26, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <__vector_12+0x30>
 368:	00 c0       	rjmp	.+0      	; 0x36a <__vector_12+0x3a>
 36a:	00 00       	nop
	_delay_ms(1000);
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
