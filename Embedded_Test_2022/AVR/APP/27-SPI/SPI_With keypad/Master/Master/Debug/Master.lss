
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003c6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000876  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000317  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a3  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c5  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bb  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  8a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <Keypad_4_4_Init>:
#include "HKeypad_config.h"

void Keypad_4_4_Init(void)
{
	/*set Rows as Output Pins */
	DIO_Set_Pin_Direction(ROW_0,OUTPUT);
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_1,OUTPUT);
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_2,OUTPUT);
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW_3,OUTPUT);
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*set columns as Input_PULL_UP Pins */
	DIO_Set_Pin_Direction(Col_0,INPUT);
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	64 e0       	ldi	r22, 0x04	; 4
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_1,INPUT);
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_2,INPUT);
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	66 e0       	ldi	r22, 0x06	; 6
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(Col_3,INPUT);
 218:	83 e3       	ldi	r24, 0x33	; 51
 21a:	67 e0       	ldi	r22, 0x07	; 7
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	DIO_Set_Pin_Value(Col_0,HIGH);
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_1,HIGH);
 22c:	83 e3       	ldi	r24, 0x33	; 51
 22e:	65 e0       	ldi	r22, 0x05	; 5
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_2,HIGH);
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	66 e0       	ldi	r22, 0x06	; 6
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(Col_3,HIGH);
 240:	83 e3       	ldi	r24, 0x33	; 51
 242:	67 e0       	ldi	r22, 0x07	; 7
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 24a:	08 95       	ret

0000024c <Keypad_4_4_Read>:


unsigned char Keypad_4_4_Read(void)
{
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	10 e0       	ldi	r17, 0x00	; 0
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
			{
				keypad_value=keypad_chr[ROW][COL];
 25a:	0f 2e       	mov	r0, r31
 25c:	f0 e6       	ldi	r31, 0x60	; 96
 25e:	ef 2e       	mov	r14, r31
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ff 2e       	mov	r15, r31
 264:	f0 2d       	mov	r31, r0
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
	{
		DIO_Set_Pin_Value(ROW_0,HIGH);
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_1,HIGH);
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_2,HIGH);
 27a:	83 e3       	ldi	r24, 0x33	; 51
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(ROW_3,HIGH);
 284:	83 e3       	ldi	r24, 0x33	; 51
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	60 2f       	mov	r22, r16
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		for(COL=0;COL<4;COL++)
 298:	c0 e0       	ldi	r28, 0x00	; 0
	DIO_Set_Pin_Value(Col_2,HIGH);
	DIO_Set_Pin_Value(Col_3,HIGH);
}


unsigned char Keypad_4_4_Read(void)
 29a:	6c 2f       	mov	r22, r28
 29c:	6c 5f       	subi	r22, 0xFC	; 252
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
		{	
			if(DIO_Get_Pin_value(Col_0+COL)==0)
 29e:	83 e3       	ldi	r24, 0x33	; 51
 2a0:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Get_Pin_value>
 2a4:	88 23       	and	r24, r24
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <Keypad_4_4_Read+0x78>
			{
				keypad_value=keypad_chr[ROW][COL];
 2a8:	c8 01       	movw	r24, r16
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	8c 0f       	add	r24, r28
 2b4:	91 1d       	adc	r25, r1
 2b6:	f7 01       	movw	r30, r14
 2b8:	e8 0f       	add	r30, r24
 2ba:	f9 1f       	adc	r31, r25
 2bc:	80 81       	ld	r24, Z
				break;
			}
		}
		if((keypad_value)!=0xFF)
 2be:	8f 3f       	cpi	r24, 0xFF	; 255
 2c0:	21 f0       	breq	.+8      	; 0x2ca <Keypad_4_4_Read+0x7e>
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <Keypad_4_4_Read+0x8a>
		DIO_Set_Pin_Value(ROW_1,HIGH);
		DIO_Set_Pin_Value(ROW_2,HIGH);
		DIO_Set_Pin_Value(ROW_3,HIGH);
		
		DIO_Set_Pin_Value(ROW_0+ROW,LOW);
		for(COL=0;COL<4;COL++)
 2c4:	cf 5f       	subi	r28, 0xFF	; 255
 2c6:	c4 30       	cpi	r28, 0x04	; 4
 2c8:	41 f7       	brne	.-48     	; 0x29a <Keypad_4_4_Read+0x4e>
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char ROW=0;
	unsigned char COL=0;
	unsigned char keypad_value=0xFF;
	
	for(ROW=0;ROW<4;ROW++)
 2ce:	04 30       	cpi	r16, 0x04	; 4
 2d0:	11 05       	cpc	r17, r1
 2d2:	49 f6       	brne	.-110    	; 0x266 <Keypad_4_4_Read+0x1a>
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
		
	}
	return keypad_value;
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 2e2:	86 e3       	ldi	r24, 0x36	; 54
 2e4:	65 e0       	ldi	r22, 0x05	; 5
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 2ec:	86 e3       	ldi	r24, 0x36	; 54
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,OUTPUT);
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 300:	8d b1       	in	r24, 0x0d	; 13
 302:	81 65       	ori	r24, 0x51	; 81
 304:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	DIO_Set_Pin_Value(SS,HIGH);
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 310:	08 95       	ret

00000312 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 312:	86 e3       	ldi	r24, 0x36	; 54
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 31c:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 31e:	08 95       	ret

00000320 <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 Data)
{
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	0f 92       	push	r0
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	18 2f       	mov	r17, r24
	volatile u8 Slave_Data;
	
	/*Clear SS to send Data to Slave */
	DIO_Set_Pin_Value(SS,LOW);
 32e:	86 e3       	ldi	r24, 0x36	; 54
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	/* Start Transmission */
	SPDR=Data;
 338:	1f b9       	out	0x0f, r17	; 15
	/* Wait for Transmission complete */
	while (!(SPSR&(1<<SPIF)));
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <SPI_MasterTransmit+0x1a>
	
	Slave_Data=SPDR;
 33e:	8f b1       	in	r24, 0x0f	; 15
 340:	89 83       	std	Y+1, r24	; 0x01
	/*Set SS */
	//DIO_Set_Pin_Value(SS,HIGH);
	/* Return Data Received Data*/
	
	return Slave_Data;
 342:	89 81       	ldd	r24, Y+1	; 0x01
}
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <SPI_SlaveReceive>:

u8 SPI_SlaveReceive(u8 Data)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	0f 92       	push	r0
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	volatile u8 SPI_DataReceived;
	
	SPDR=Data;
 358:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Reception  Received */
	while(!(SPSR&(1<<SPIF)));
 35a:	77 9b       	sbis	0x0e, 7	; 14
 35c:	fe cf       	rjmp	.-4      	; 0x35a <SPI_SlaveReceive+0xc>
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
 35e:	8f b1       	in	r24, 0x0f	; 15
 360:	89 83       	std	Y+1, r24	; 0x01
	return SPI_DataReceived;
 362:	89 81       	ldd	r24, Y+1	; 0x01
}
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <SPI_MasterSendString>:

void SPI_MasterSendString(u8* string)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
	while (*string!='\0')
 372:	88 81       	ld	r24, Y
 374:	88 23       	and	r24, r24
 376:	61 f0       	breq	.+24     	; 0x390 <SPI_MasterSendString+0x24>
	/*return data */
	SPI_DataReceived=SPDR;
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
 378:	21 96       	adiw	r28, 0x01	; 1
{
	while (*string!='\0')
	{
		SPI_MasterTransmit(*string);
 37a:	0e 94 90 01 	call	0x320	; 0x320 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	87 ea       	ldi	r24, 0xA7	; 167
 380:	91 e6       	ldi	r25, 0x61	; 97
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <SPI_MasterSendString+0x16>
 386:	00 c0       	rjmp	.+0      	; 0x388 <SPI_MasterSendString+0x1c>
 388:	00 00       	nop
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
{
	while (*string!='\0')
 38a:	89 91       	ld	r24, Y+
 38c:	88 23       	and	r24, r24
 38e:	a9 f7       	brne	.-22     	; 0x37a <SPI_MasterSendString+0xe>
	{
		SPI_MasterTransmit(*string);
		string++;
		_delay_ms(100);
	}
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
#define NOTPRESSED	0xFF
int main(void)
{
	u8 Keypad_Value;
	u8 Flag=0;
	Keypad_4_4_Init();
 396:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Keypad_4_4_Init>
	SPI_MasterInit();
 39a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <SPI_MasterInit>

#define NOTPRESSED	0xFF
int main(void)
{
	u8 Keypad_Value;
	u8 Flag=0;
 39e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        Keypad_Value=Keypad_4_4_Read();
		if (Keypad_Value!=NOTPRESSED && Flag==0)
		{
			SPI_MasterTransmit(Keypad_Value);
			Flag=1;
 3a0:	d1 e0       	ldi	r29, 0x01	; 1
		}
		else if(Keypad_Value==NOTPRESSED && Flag==1)
		{
			Flag=0;
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <main+0x12>
 3a6:	c1 2f       	mov	r28, r17
	Keypad_4_4_Init();
	SPI_MasterInit();
	
    while(1)
    {
        Keypad_Value=Keypad_4_4_Read();
 3a8:	0e 94 26 01 	call	0x24c	; 0x24c <Keypad_4_4_Read>
		if (Keypad_Value!=NOTPRESSED && Flag==0)
 3ac:	8f 3f       	cpi	r24, 0xFF	; 255
 3ae:	31 f0       	breq	.+12     	; 0x3bc <main+0x26>
 3b0:	cc 23       	and	r28, r28
 3b2:	d1 f7       	brne	.-12     	; 0x3a8 <main+0x12>
		{
			SPI_MasterTransmit(Keypad_Value);
 3b4:	0e 94 90 01 	call	0x320	; 0x320 <SPI_MasterTransmit>
			Flag=1;
 3b8:	cd 2f       	mov	r28, r29
 3ba:	f6 cf       	rjmp	.-20     	; 0x3a8 <main+0x12>
		}
		else if(Keypad_Value==NOTPRESSED && Flag==1)
 3bc:	c1 30       	cpi	r28, 0x01	; 1
 3be:	a1 f7       	brne	.-24     	; 0x3a8 <main+0x12>
 3c0:	f2 cf       	rjmp	.-28     	; 0x3a6 <main+0x10>

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
