
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000540  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab9  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000375  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  0000210c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c8  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000063c  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 92 02 	call	0x524	; 0x524 <main>
  8a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <SPI_MasterInit>:
#define	F_CPU	1000000ul
#include <util/delay.h>
void SPI_MasterInit(void)
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 1dc:	86 e3       	ldi	r24, 0x36	; 54
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SS,OUTPUT);
 1e6:	86 e3       	ldi	r24, 0x36	; 54
 1e8:	64 e0       	ldi	r22, 0x04	; 4
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	81 65       	ori	r24, 0x51	; 81
 1f4:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	DIO_Set_Pin_Value(SS,HIGH);
 1f6:	86 e3       	ldi	r24, 0x36	; 54
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 200:	08 95       	ret

00000202 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	66 e0       	ldi	r22, 0x06	; 6
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 20c:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 20e:	08 95       	ret

00000210 <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 Data)
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	0f 92       	push	r0
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	18 2f       	mov	r17, r24
	volatile u8 Slave_Data;
	
	/*Clear SS to send Data to Slave */
	DIO_Set_Pin_Value(SS,LOW);
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	/* Start Transmission */
	SPDR=Data;
 228:	1f b9       	out	0x0f, r17	; 15
	/* Wait for Transmission complete */
	while (!(SPSR&(1<<SPIF)));
 22a:	77 9b       	sbis	0x0e, 7	; 14
 22c:	fe cf       	rjmp	.-4      	; 0x22a <SPI_MasterTransmit+0x1a>
	
	Slave_Data=SPDR;
 22e:	8f b1       	in	r24, 0x0f	; 15
 230:	89 83       	std	Y+1, r24	; 0x01
	/*Set SS */
	//DIO_Set_Pin_Value(SS,HIGH);
	/* Return Data Received Data*/
	
	return Slave_Data;
 232:	89 81       	ldd	r24, Y+1	; 0x01
}
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <SPI_SlaveReceive>:

u8 SPI_SlaveReceive(u8 Data)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	0f 92       	push	r0
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	volatile u8 SPI_DataReceived;
	
	SPDR=Data;
 248:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Reception  Received */
	while(!(SPSR&(1<<SPIF)));
 24a:	77 9b       	sbis	0x0e, 7	; 14
 24c:	fe cf       	rjmp	.-4      	; 0x24a <SPI_SlaveReceive+0xc>
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
 24e:	8f b1       	in	r24, 0x0f	; 15
 250:	89 83       	std	Y+1, r24	; 0x01
	return SPI_DataReceived;
 252:	89 81       	ldd	r24, Y+1	; 0x01
}
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 25c:	89 e3       	ldi	r24, 0x39	; 57
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_Enable+0xe>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_Enable+0x14>
 270:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 272:	89 e3       	ldi	r24, 0x39	; 57
 274:	65 e0       	ldi	r22, 0x05	; 5
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 27c:	08 95       	ret

0000027e <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 282:	48 2f       	mov	r20, r24
 284:	42 95       	swap	r20
 286:	4f 70       	andi	r20, 0x0F	; 15
 288:	41 70       	andi	r20, 0x01	; 1
 28a:	89 e3       	ldi	r24, 0x39	; 57
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 292:	4c 2f       	mov	r20, r28
 294:	42 95       	swap	r20
 296:	46 95       	lsr	r20
 298:	47 70       	andi	r20, 0x07	; 7
 29a:	41 70       	andi	r20, 0x01	; 1
 29c:	89 e3       	ldi	r24, 0x39	; 57
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 2a4:	4c 2f       	mov	r20, r28
 2a6:	42 95       	swap	r20
 2a8:	46 95       	lsr	r20
 2aa:	46 95       	lsr	r20
 2ac:	43 70       	andi	r20, 0x03	; 3
 2ae:	41 70       	andi	r20, 0x01	; 1
 2b0:	89 e3       	ldi	r24, 0x39	; 57
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 2b8:	4c 2f       	mov	r20, r28
 2ba:	44 1f       	adc	r20, r20
 2bc:	44 27       	eor	r20, r20
 2be:	44 1f       	adc	r20, r20
 2c0:	89 e3       	ldi	r24, 0x39	; 57
 2c2:	63 e0       	ldi	r22, 0x03	; 3
 2c4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 2c8:	89 e3       	ldi	r24, 0x39	; 57
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 2d2:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 2d6:	4c 2f       	mov	r20, r28
 2d8:	41 70       	andi	r20, 0x01	; 1
 2da:	89 e3       	ldi	r24, 0x39	; 57
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 2e2:	4c 2f       	mov	r20, r28
 2e4:	46 95       	lsr	r20
 2e6:	41 70       	andi	r20, 0x01	; 1
 2e8:	89 e3       	ldi	r24, 0x39	; 57
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 2f0:	4c 2f       	mov	r20, r28
 2f2:	46 95       	lsr	r20
 2f4:	46 95       	lsr	r20
 2f6:	41 70       	andi	r20, 0x01	; 1
 2f8:	89 e3       	ldi	r24, 0x39	; 57
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 300:	c6 95       	lsr	r28
 302:	c6 95       	lsr	r28
 304:	c6 95       	lsr	r28
 306:	4c 2f       	mov	r20, r28
 308:	41 70       	andi	r20, 0x01	; 1
 30a:	89 e3       	ldi	r24, 0x39	; 57
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 312:	89 e3       	ldi	r24, 0x39	; 57
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 31c:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Enable>
		
	 #endif
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <LCD_send_string>:

void LCD_send_string(char *data)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 32a:	88 81       	ld	r24, Y
 32c:	88 23       	and	r24, r24
 32e:	31 f0       	breq	.+12     	; 0x33c <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 330:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 332:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 336:	89 91       	ld	r24, Y+
 338:	88 23       	and	r24, r24
 33a:	d9 f7       	brne	.-10     	; 0x332 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 342:	cf 93       	push	r28
 344:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 346:	48 2f       	mov	r20, r24
 348:	42 95       	swap	r20
 34a:	4f 70       	andi	r20, 0x0F	; 15
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 356:	4c 2f       	mov	r20, r28
 358:	42 95       	swap	r20
 35a:	46 95       	lsr	r20
 35c:	47 70       	andi	r20, 0x07	; 7
 35e:	41 70       	andi	r20, 0x01	; 1
 360:	89 e3       	ldi	r24, 0x39	; 57
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 368:	4c 2f       	mov	r20, r28
 36a:	42 95       	swap	r20
 36c:	46 95       	lsr	r20
 36e:	46 95       	lsr	r20
 370:	43 70       	andi	r20, 0x03	; 3
 372:	41 70       	andi	r20, 0x01	; 1
 374:	89 e3       	ldi	r24, 0x39	; 57
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 37c:	4c 2f       	mov	r20, r28
 37e:	44 1f       	adc	r20, r20
 380:	44 27       	eor	r20, r20
 382:	44 1f       	adc	r20, r20
 384:	89 e3       	ldi	r24, 0x39	; 57
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 38c:	89 e3       	ldi	r24, 0x39	; 57
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 396:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 39a:	4c 2f       	mov	r20, r28
 39c:	41 70       	andi	r20, 0x01	; 1
 39e:	89 e3       	ldi	r24, 0x39	; 57
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 3a6:	4c 2f       	mov	r20, r28
 3a8:	46 95       	lsr	r20
 3aa:	41 70       	andi	r20, 0x01	; 1
 3ac:	89 e3       	ldi	r24, 0x39	; 57
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 3b4:	4c 2f       	mov	r20, r28
 3b6:	46 95       	lsr	r20
 3b8:	46 95       	lsr	r20
 3ba:	41 70       	andi	r20, 0x01	; 1
 3bc:	89 e3       	ldi	r24, 0x39	; 57
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 3c4:	c6 95       	lsr	r28
 3c6:	c6 95       	lsr	r28
 3c8:	c6 95       	lsr	r28
 3ca:	4c 2f       	mov	r20, r28
 3cc:	41 70       	andi	r20, 0x01	; 1
 3ce:	89 e3       	ldi	r24, 0x39	; 57
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 3d6:	89 e3       	ldi	r24, 0x39	; 57
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 3e0:	0e 94 2e 01 	call	0x25c	; 0x25c <LCD_Enable>
	
	#endif

}
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <LCD_inti>:
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	91 ee       	ldi	r25, 0xE1	; 225
 3ec:	a4 e0       	ldi	r26, 0x04	; 4
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	a0 40       	sbci	r26, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <LCD_inti+0x6>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_inti+0x10>
 3f8:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 3fa:	89 e3       	ldi	r24, 0x39	; 57
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 404:	89 e3       	ldi	r24, 0x39	; 57
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 40e:	89 e3       	ldi	r24, 0x39	; 57
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 418:	89 e3       	ldi	r24, 0x39	; 57
 41a:	63 e0       	ldi	r22, 0x03	; 3
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 422:	89 e3       	ldi	r24, 0x39	; 57
 424:	65 e0       	ldi	r22, 0x05	; 5
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 42c:	89 e3       	ldi	r24, 0x39	; 57
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 436:	89 e3       	ldi	r24, 0x39	; 57
 438:	66 e0       	ldi	r22, 0x06	; 6
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 440:	89 e3       	ldi	r24, 0x39	; 57
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 450:	af e1       	ldi	r26, 0x1F	; 31
 452:	be e4       	ldi	r27, 0x4E	; 78
 454:	11 97       	sbiw	r26, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <LCD_inti+0x6c>
 458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_inti+0x72>
 45a:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 45c:	88 e2       	ldi	r24, 0x28	; 40
 45e:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 462:	8f ec       	ldi	r24, 0xCF	; 207
 464:	97 e0       	ldi	r25, 0x07	; 7
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <LCD_inti+0x7e>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_inti+0x84>
 46c:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 46e:	8e e0       	ldi	r24, 0x0E	; 14
 470:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 474:	af ec       	ldi	r26, 0xCF	; 207
 476:	b7 e0       	ldi	r27, 0x07	; 7
 478:	11 97       	sbiw	r26, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <LCD_inti+0x90>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_inti+0x96>
 47e:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 486:	8f e1       	ldi	r24, 0x1F	; 31
 488:	9e e4       	ldi	r25, 0x4E	; 78
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_inti+0xa2>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_inti+0xa8>
 490:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 498:	af ec       	ldi	r26, 0xCF	; 207
 49a:	b7 e0       	ldi	r27, 0x07	; 7
 49c:	11 97       	sbiw	r26, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_inti+0xb4>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_inti+0xba>
 4a2:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 4a4:	08 95       	ret

000004a6 <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
	
}
 4ac:	08 95       	ret

000004ae <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	0f 92       	push	r0
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	19 f4       	brne	.+6      	; 0x4c2 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 4bc:	61 58       	subi	r22, 0x81	; 129
 4be:	69 83       	std	Y+1, r22	; 0x01
 4c0:	0e c0       	rjmp	.+28     	; 0x4de <LCD_move_cursor+0x30>
	}
	else if (row==2)
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	19 f4       	brne	.+6      	; 0x4cc <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 4c6:	61 54       	subi	r22, 0x41	; 65
 4c8:	69 83       	std	Y+1, r22	; 0x01
 4ca:	09 c0       	rjmp	.+18     	; 0x4de <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 4cc:	81 50       	subi	r24, 0x01	; 1
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	20 f4       	brcc	.+8      	; 0x4da <LCD_move_cursor+0x2c>
 4d2:	61 31       	cpi	r22, 0x11	; 17
 4d4:	10 f4       	brcc	.+4      	; 0x4da <LCD_move_cursor+0x2c>
 4d6:	66 23       	and	r22, r22
 4d8:	11 f4       	brne	.+4      	; 0x4de <LCD_move_cursor+0x30>
	{
		data=0x80;
 4da:	80 e8       	ldi	r24, 0x80	; 128
 4dc:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_send_cmd>
 4e4:	8f ec       	ldi	r24, 0xCF	; 207
 4e6:	97 e0       	ldi	r25, 0x07	; 7
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCD_move_cursor+0x3a>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <LCD_move_cursor+0x40>
 4ee:	00 00       	nop
	_delay_ms(1);
}
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <lcd_print>:

void lcd_print(char *str)
{
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 500:	fc 01       	movw	r30, r24
 502:	80 81       	ld	r24, Z
 504:	88 23       	and	r24, r24
 506:	51 f0       	breq	.+20     	; 0x51c <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 508:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 50a:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_send_char>
		i++;
 50e:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 510:	f8 01       	movw	r30, r16
 512:	ec 0f       	add	r30, r28
 514:	f1 1d       	adc	r31, r1
 516:	80 81       	ld	r24, Z
 518:	88 23       	and	r24, r24
 51a:	b9 f7       	brne	.-18     	; 0x50a <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <main>:
#include "HSPI.h"

int main(void)
{
	u8 Data=0xFF;
	LCD_inti();
 524:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_inti>
	SPI_SlaveInit();
 528:	0e 94 01 01 	call	0x202	; 0x202 <SPI_SlaveInit>
#include "LCD.h"
#include "HSPI.h"

int main(void)
{
	u8 Data=0xFF;
 52c:	cf ef       	ldi	r28, 0xFF	; 255
	LCD_inti();
	SPI_SlaveInit();
	
    while(1)
    {
		Data=SPI_SlaveReceive(Data);
 52e:	8c 2f       	mov	r24, r28
 530:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_SlaveReceive>
 534:	c8 2f       	mov	r28, r24
		LCD_send_char(Data);
 536:	0e 94 3f 01 	call	0x27e	; 0x27e <LCD_send_char>
 53a:	f9 cf       	rjmp	.-14     	; 0x52e <main+0xa>

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
