
SPI_Interrupt_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006f2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cee  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000476  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000701  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f4  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f9  00000000  00000000  00002ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 02 	call	0x568	; 0x568 <main>
  8a:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 1dc:	86 e3       	ldi	r24, 0x36	; 54
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	//DIO_Set_Pin_Direction(SS,OUTPUT);
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1e6:	8d b1       	in	r24, 0x0d	; 13
 1e8:	81 65       	ori	r24, 0x51	; 81
 1ea:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	//DIO_Set_Pin_Value(SS,HIGH);
}
 1ec:	08 95       	ret

000001ee <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	66 e0       	ldi	r22, 0x06	; 6
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 1f8:	6e 9a       	sbi	0x0d, 6	; 13
	
}
 1fa:	08 95       	ret

000001fc <SPI_MasterTransmit>:

u8 SPI_MasterTransmit(u8 Data)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	0f 92       	push	r0
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	
	/*Clear SS to send Data to Slave */
	//DIO_Set_Pin_Value(SS,LOW);
	
	/* Start Transmission */
	SPDR=Data;
 206:	8f b9       	out	0x0f, r24	; 15
	/* Wait for Transmission complete */
	while (!(SPSR&(1<<SPIF)));
 208:	77 9b       	sbis	0x0e, 7	; 14
 20a:	fe cf       	rjmp	.-4      	; 0x208 <SPI_MasterTransmit+0xc>
	
	Slave_Data=SPDR;
 20c:	8f b1       	in	r24, 0x0f	; 15
 20e:	89 83       	std	Y+1, r24	; 0x01
	/*Set SS */
	//DIO_Set_Pin_Value(SS,HIGH);
	/* Return Data Received Data*/
	
	return Slave_Data;
 210:	89 81       	ldd	r24, Y+1	; 0x01
}
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <SPI_SlaveReceive>:

u8 SPI_SlaveReceive(u8 Data)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	0f 92       	push	r0
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	volatile u8 SPI_DataReceived;
	
	SPDR=Data;
 224:	8f b9       	out	0x0f, r24	; 15
	/*Wait for Reception  Received */
	while(!(SPSR&(1<<SPIF)));
 226:	77 9b       	sbis	0x0e, 7	; 14
 228:	fe cf       	rjmp	.-4      	; 0x226 <SPI_SlaveReceive+0xc>
	//_delay_ms(1000);
	/*return data */
	SPI_DataReceived=SPDR;
 22a:	8f b1       	in	r24, 0x0f	; 15
 22c:	89 83       	std	Y+1, r24	; 0x01
	return SPI_DataReceived;
 22e:	89 81       	ldd	r24, Y+1	; 0x01
}
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <SPI_MasterSendString>:

void SPI_MasterSendString(u8* string)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	while (*string!='\0')
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	61 f0       	breq	.+24     	; 0x25c <SPI_MasterSendString+0x24>
	/*return data */
	SPI_DataReceived=SPDR;
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
 244:	21 96       	adiw	r28, 0x01	; 1
{
	while (*string!='\0')
	{
		SPI_MasterTransmit(*string);
 246:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	87 ea       	ldi	r24, 0xA7	; 167
 24c:	91 e6       	ldi	r25, 0x61	; 97
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <SPI_MasterSendString+0x16>
 252:	00 c0       	rjmp	.+0      	; 0x254 <SPI_MasterSendString+0x1c>
 254:	00 00       	nop
	return SPI_DataReceived;
}

void SPI_MasterSendString(u8* string)
{
	while (*string!='\0')
 256:	89 91       	ld	r24, Y+
 258:	88 23       	and	r24, r24
 25a:	a9 f7       	brne	.-22     	; 0x246 <SPI_MasterSendString+0xe>
	{
		SPI_MasterTransmit(*string);
		string++;
		_delay_ms(100);
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <SPI_Master_INT_Init>:

void SPI_Master_INT_Init()
{
	/*Set MOSI, SCK,SS as OUTPUT Pins */
	DIO_Set_Pin_Direction(MOSI,OUTPUT);
 262:	86 e3       	ldi	r24, 0x36	; 54
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(SCK,OUTPUT);
 26c:	86 e3       	ldi	r24, 0x36	; 54
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	//DIO_Set_Pin_Direction(SS,OUTPUT);
	
	/*Enable SPI Peripheral, Enable Master Mode, Set Clock fosc/16 >> in SPCR Register*/
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
 276:	8d b1       	in	r24, 0x0d	; 13
 278:	81 65       	ori	r24, 0x51	; 81
 27a:	8d b9       	out	0x0d, r24	; 13
	
	/*Write High on SS pin */
	//DIO_Set_Pin_Value(SS,HIGH);
	
	/*Enable SPI Interrupt */
	SPCR|=(1<<SPIE);
 27c:	6f 9a       	sbi	0x0d, 7	; 13
	/* Enable Global Interrupt */  
	S_REG|=(1<<I_BIT);
 27e:	8f b7       	in	r24, 0x3f	; 63
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8f bf       	out	0x3f, r24	; 63
	
}
 284:	08 95       	ret

00000286 <SPI_Slave_INT_Init>:
void SPI_Slave_INT_Init()
{
	/*set MISO As Output Pin */
	DIO_Set_Pin_Direction(MISO,OUTPUT);
 286:	86 e3       	ldi	r24, 0x36	; 54
 288:	66 e0       	ldi	r22, 0x06	; 6
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	/*Enable SPI Peripheral */
	SPCR|=(1<<SPE);
 290:	6e 9a       	sbi	0x0d, 6	; 13
	/*Enable SPI Interrupt */
	SPCR|=(1<<SPIE);
 292:	6f 9a       	sbi	0x0d, 7	; 13
	/* Enable Global Interrupt */
	S_REG|=(1<<I_BIT);
 294:	8f b7       	in	r24, 0x3f	; 63
 296:	80 68       	ori	r24, 0x80	; 128
 298:	8f bf       	out	0x3f, r24	; 63
}
 29a:	08 95       	ret

0000029c <SPI_INT_Transmite>:

void SPI_INT_Transmite(u8 data)
{
	SPDR=data;
 29c:	8f b9       	out	0x0f, r24	; 15
}
 29e:	08 95       	ret

000002a0 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 2a0:	89 e3       	ldi	r24, 0x39	; 57
 2a2:	65 e0       	ldi	r22, 0x05	; 5
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_Enable+0xe>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_Enable+0x14>
 2b4:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 2c0:	08 95       	ret

000002c2 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 2c6:	48 2f       	mov	r20, r24
 2c8:	42 95       	swap	r20
 2ca:	4f 70       	andi	r20, 0x0F	; 15
 2cc:	41 70       	andi	r20, 0x01	; 1
 2ce:	89 e3       	ldi	r24, 0x39	; 57
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 2d6:	4c 2f       	mov	r20, r28
 2d8:	42 95       	swap	r20
 2da:	46 95       	lsr	r20
 2dc:	47 70       	andi	r20, 0x07	; 7
 2de:	41 70       	andi	r20, 0x01	; 1
 2e0:	89 e3       	ldi	r24, 0x39	; 57
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 2e8:	4c 2f       	mov	r20, r28
 2ea:	42 95       	swap	r20
 2ec:	46 95       	lsr	r20
 2ee:	46 95       	lsr	r20
 2f0:	43 70       	andi	r20, 0x03	; 3
 2f2:	41 70       	andi	r20, 0x01	; 1
 2f4:	89 e3       	ldi	r24, 0x39	; 57
 2f6:	62 e0       	ldi	r22, 0x02	; 2
 2f8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 2fc:	4c 2f       	mov	r20, r28
 2fe:	44 1f       	adc	r20, r20
 300:	44 27       	eor	r20, r20
 302:	44 1f       	adc	r20, r20
 304:	89 e3       	ldi	r24, 0x39	; 57
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 30c:	89 e3       	ldi	r24, 0x39	; 57
 30e:	64 e0       	ldi	r22, 0x04	; 4
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 316:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 31a:	4c 2f       	mov	r20, r28
 31c:	41 70       	andi	r20, 0x01	; 1
 31e:	89 e3       	ldi	r24, 0x39	; 57
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 326:	4c 2f       	mov	r20, r28
 328:	46 95       	lsr	r20
 32a:	41 70       	andi	r20, 0x01	; 1
 32c:	89 e3       	ldi	r24, 0x39	; 57
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 334:	4c 2f       	mov	r20, r28
 336:	46 95       	lsr	r20
 338:	46 95       	lsr	r20
 33a:	41 70       	andi	r20, 0x01	; 1
 33c:	89 e3       	ldi	r24, 0x39	; 57
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 344:	c6 95       	lsr	r28
 346:	c6 95       	lsr	r28
 348:	c6 95       	lsr	r28
 34a:	4c 2f       	mov	r20, r28
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	89 e3       	ldi	r24, 0x39	; 57
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 356:	89 e3       	ldi	r24, 0x39	; 57
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 360:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_Enable>
		
	 #endif
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <LCD_send_string>:

void LCD_send_string(char *data)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 36e:	88 81       	ld	r24, Y
 370:	88 23       	and	r24, r24
 372:	31 f0       	breq	.+12     	; 0x380 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 374:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 376:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 37a:	89 91       	ld	r24, Y+
 37c:	88 23       	and	r24, r24
 37e:	d9 f7       	brne	.-10     	; 0x376 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 38a:	48 2f       	mov	r20, r24
 38c:	42 95       	swap	r20
 38e:	4f 70       	andi	r20, 0x0F	; 15
 390:	41 70       	andi	r20, 0x01	; 1
 392:	89 e3       	ldi	r24, 0x39	; 57
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 39a:	4c 2f       	mov	r20, r28
 39c:	42 95       	swap	r20
 39e:	46 95       	lsr	r20
 3a0:	47 70       	andi	r20, 0x07	; 7
 3a2:	41 70       	andi	r20, 0x01	; 1
 3a4:	89 e3       	ldi	r24, 0x39	; 57
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 3ac:	4c 2f       	mov	r20, r28
 3ae:	42 95       	swap	r20
 3b0:	46 95       	lsr	r20
 3b2:	46 95       	lsr	r20
 3b4:	43 70       	andi	r20, 0x03	; 3
 3b6:	41 70       	andi	r20, 0x01	; 1
 3b8:	89 e3       	ldi	r24, 0x39	; 57
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 3c0:	4c 2f       	mov	r20, r28
 3c2:	44 1f       	adc	r20, r20
 3c4:	44 27       	eor	r20, r20
 3c6:	44 1f       	adc	r20, r20
 3c8:	89 e3       	ldi	r24, 0x39	; 57
 3ca:	63 e0       	ldi	r22, 0x03	; 3
 3cc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 3d0:	89 e3       	ldi	r24, 0x39	; 57
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 3da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 3de:	4c 2f       	mov	r20, r28
 3e0:	41 70       	andi	r20, 0x01	; 1
 3e2:	89 e3       	ldi	r24, 0x39	; 57
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 3ea:	4c 2f       	mov	r20, r28
 3ec:	46 95       	lsr	r20
 3ee:	41 70       	andi	r20, 0x01	; 1
 3f0:	89 e3       	ldi	r24, 0x39	; 57
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 3f8:	4c 2f       	mov	r20, r28
 3fa:	46 95       	lsr	r20
 3fc:	46 95       	lsr	r20
 3fe:	41 70       	andi	r20, 0x01	; 1
 400:	89 e3       	ldi	r24, 0x39	; 57
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 408:	c6 95       	lsr	r28
 40a:	c6 95       	lsr	r28
 40c:	c6 95       	lsr	r28
 40e:	4c 2f       	mov	r20, r28
 410:	41 70       	andi	r20, 0x01	; 1
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 41a:	89 e3       	ldi	r24, 0x39	; 57
 41c:	64 e0       	ldi	r22, 0x04	; 4
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 424:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_Enable>
	
	#endif

}
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <LCD_inti>:
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	91 ee       	ldi	r25, 0xE1	; 225
 430:	a4 e0       	ldi	r26, 0x04	; 4
 432:	81 50       	subi	r24, 0x01	; 1
 434:	90 40       	sbci	r25, 0x00	; 0
 436:	a0 40       	sbci	r26, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <LCD_inti+0x6>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_inti+0x10>
 43c:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 43e:	89 e3       	ldi	r24, 0x39	; 57
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 448:	89 e3       	ldi	r24, 0x39	; 57
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 452:	89 e3       	ldi	r24, 0x39	; 57
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 45c:	89 e3       	ldi	r24, 0x39	; 57
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 466:	89 e3       	ldi	r24, 0x39	; 57
 468:	65 e0       	ldi	r22, 0x05	; 5
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 470:	89 e3       	ldi	r24, 0x39	; 57
 472:	64 e0       	ldi	r22, 0x04	; 4
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 47a:	89 e3       	ldi	r24, 0x39	; 57
 47c:	66 e0       	ldi	r22, 0x06	; 6
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 484:	89 e3       	ldi	r24, 0x39	; 57
 486:	66 e0       	ldi	r22, 0x06	; 6
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 494:	af e1       	ldi	r26, 0x1F	; 31
 496:	be e4       	ldi	r27, 0x4E	; 78
 498:	11 97       	sbiw	r26, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_inti+0x6c>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_inti+0x72>
 49e:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 4a0:	88 e2       	ldi	r24, 0x28	; 40
 4a2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 4a6:	8f ec       	ldi	r24, 0xCF	; 207
 4a8:	97 e0       	ldi	r25, 0x07	; 7
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_inti+0x7e>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_inti+0x84>
 4b0:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 4b2:	8e e0       	ldi	r24, 0x0E	; 14
 4b4:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 4b8:	af ec       	ldi	r26, 0xCF	; 207
 4ba:	b7 e0       	ldi	r27, 0x07	; 7
 4bc:	11 97       	sbiw	r26, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_inti+0x90>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_inti+0x96>
 4c2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 4ca:	8f e1       	ldi	r24, 0x1F	; 31
 4cc:	9e e4       	ldi	r25, 0x4E	; 78
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_inti+0xa2>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_inti+0xa8>
 4d4:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 4dc:	af ec       	ldi	r26, 0xCF	; 207
 4de:	b7 e0       	ldi	r27, 0x07	; 7
 4e0:	11 97       	sbiw	r26, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_inti+0xb4>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_inti+0xba>
 4e6:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 4e8:	08 95       	ret

000004ea <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
	
}
 4f0:	08 95       	ret

000004f2 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	0f 92       	push	r0
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	19 f4       	brne	.+6      	; 0x506 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 500:	61 58       	subi	r22, 0x81	; 129
 502:	69 83       	std	Y+1, r22	; 0x01
 504:	0e c0       	rjmp	.+28     	; 0x522 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	19 f4       	brne	.+6      	; 0x510 <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 50a:	61 54       	subi	r22, 0x41	; 65
 50c:	69 83       	std	Y+1, r22	; 0x01
 50e:	09 c0       	rjmp	.+18     	; 0x522 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 510:	81 50       	subi	r24, 0x01	; 1
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	20 f4       	brcc	.+8      	; 0x51e <LCD_move_cursor+0x2c>
 516:	61 31       	cpi	r22, 0x11	; 17
 518:	10 f4       	brcc	.+4      	; 0x51e <LCD_move_cursor+0x2c>
 51a:	66 23       	and	r22, r22
 51c:	11 f4       	brne	.+4      	; 0x522 <LCD_move_cursor+0x30>
	{
		data=0x80;
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
 528:	8f ec       	ldi	r24, 0xCF	; 207
 52a:	97 e0       	ldi	r25, 0x07	; 7
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <LCD_move_cursor+0x3a>
 530:	00 c0       	rjmp	.+0      	; 0x532 <LCD_move_cursor+0x40>
 532:	00 00       	nop
	_delay_ms(1);
}
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <lcd_print>:

void lcd_print(char *str)
{
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 544:	fc 01       	movw	r30, r24
 546:	80 81       	ld	r24, Z
 548:	88 23       	and	r24, r24
 54a:	51 f0       	breq	.+20     	; 0x560 <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 54c:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 54e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		i++;
 552:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 554:	f8 01       	movw	r30, r16
 556:	ec 0f       	add	r30, r28
 558:	f1 1d       	adc	r31, r1
 55a:	80 81       	ld	r24, Z
 55c:	88 23       	and	r24, r24
 55e:	b9 f7       	brne	.-18     	; 0x54e <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <main>:

void Send_Val_to_LCD(u16 u16_Value);

int main(void)
{
	LCD_inti();
 568:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 56c:	8c e0       	ldi	r24, 0x0C	; 12
 56e:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_send_cmd>
	SPI_Slave_INT_Init();
 572:	0e 94 43 01 	call	0x286	; 0x286 <SPI_Slave_INT_Init>
 576:	ff cf       	rjmp	.-2      	; 0x576 <main+0xe>

00000578 <Send_Val_to_LCD>:
	//SPDR=0x33;
}


void Send_Val_to_LCD(u16 u16_Value)
{
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	ec 01       	movw	r28, r24
	 
	if (u16_Value<10)
 582:	8a 30       	cpi	r24, 0x0A	; 10
 584:	91 05       	cpc	r25, r1
 586:	70 f4       	brcc	.+28     	; 0x5a4 <Send_Val_to_LCD+0x2c>
	{	
		LCD_send_char(48);
 588:	80 e3       	ldi	r24, 0x30	; 48
 58a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(48);
 58e:	80 e3       	ldi	r24, 0x30	; 48
 590:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(48);
 594:	80 e3       	ldi	r24, 0x30	; 48
 596:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(u16_Value+48);
 59a:	8c 2f       	mov	r24, r28
 59c:	80 5d       	subi	r24, 0xD0	; 208
 59e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
 5a2:	62 c0       	rjmp	.+196    	; 0x668 <Send_Val_to_LCD+0xf0>
	}
	else if(u16_Value<100)
 5a4:	84 36       	cpi	r24, 0x64	; 100
 5a6:	91 05       	cpc	r25, r1
 5a8:	a8 f4       	brcc	.+42     	; 0x5d4 <Send_Val_to_LCD+0x5c>
	{
		LCD_send_char(48);
 5aa:	80 e3       	ldi	r24, 0x30	; 48
 5ac:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(48);
 5b0:	80 e3       	ldi	r24, 0x30	; 48
 5b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char((u16_Value/10)+48);
 5b6:	ce 01       	movw	r24, r28
 5b8:	6a e0       	ldi	r22, 0x0A	; 10
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 5c0:	c8 2f       	mov	r28, r24
 5c2:	86 2f       	mov	r24, r22
 5c4:	80 5d       	subi	r24, 0xD0	; 208
 5c6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 5ca:	8c 2f       	mov	r24, r28
 5cc:	80 5d       	subi	r24, 0xD0	; 208
 5ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
 5d2:	4a c0       	rjmp	.+148    	; 0x668 <Send_Val_to_LCD+0xf0>
	}
	else if(u16_Value<1000)
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	c8 3e       	cpi	r28, 0xE8	; 232
 5d8:	d8 07       	cpc	r29, r24
 5da:	f8 f4       	brcc	.+62     	; 0x61a <Send_Val_to_LCD+0xa2>
	{
		LCD_send_char(48);
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char((u16_Value/100)+48);
 5e2:	ce 01       	movw	r24, r28
 5e4:	64 e6       	ldi	r22, 0x64	; 100
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 5ec:	86 2f       	mov	r24, r22
 5ee:	80 5d       	subi	r24, 0xD0	; 208
 5f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(((u16_Value/10)%10)+48);
 5f4:	2a e0       	ldi	r18, 0x0A	; 10
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	ce 01       	movw	r24, r28
 5fa:	b9 01       	movw	r22, r18
 5fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 600:	c8 2f       	mov	r28, r24
 602:	cb 01       	movw	r24, r22
 604:	b9 01       	movw	r22, r18
 606:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 60a:	80 5d       	subi	r24, 0xD0	; 208
 60c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 610:	8c 2f       	mov	r24, r28
 612:	80 5d       	subi	r24, 0xD0	; 208
 614:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
 618:	27 c0       	rjmp	.+78     	; 0x668 <Send_Val_to_LCD+0xf0>
	}
	else
	{
		LCD_send_char((u16_Value/1000)+48);
 61a:	ce 01       	movw	r24, r28
 61c:	68 ee       	ldi	r22, 0xE8	; 232
 61e:	73 e0       	ldi	r23, 0x03	; 3
 620:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 624:	86 2f       	mov	r24, r22
 626:	80 5d       	subi	r24, 0xD0	; 208
 628:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(((u16_Value/100)%10)+48);
 62c:	ce 01       	movw	r24, r28
 62e:	64 e6       	ldi	r22, 0x64	; 100
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 636:	cb 01       	movw	r24, r22
 638:	0a e0       	ldi	r16, 0x0A	; 10
 63a:	10 e0       	ldi	r17, 0x00	; 0
 63c:	b8 01       	movw	r22, r16
 63e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 642:	80 5d       	subi	r24, 0xD0	; 208
 644:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char(((u16_Value/10)%10)+48);
 648:	ce 01       	movw	r24, r28
 64a:	b8 01       	movw	r22, r16
 64c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 650:	c8 2f       	mov	r28, r24
 652:	cb 01       	movw	r24, r22
 654:	b8 01       	movw	r22, r16
 656:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodhi4>
 65a:	80 5d       	subi	r24, 0xD0	; 208
 65c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
		LCD_send_char((u16_Value%10)+48);
 660:	8c 2f       	mov	r24, r28
 662:	80 5d       	subi	r24, 0xD0	; 208
 664:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_send_char>
	}

 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret

00000672 <__vector_12>:
    {
       
    }
}
ISR(SPI_STC_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	LCD_move_cursor(1,1);
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	61 e0       	ldi	r22, 0x01	; 1
 698:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_move_cursor>
	Send_Val_to_LCD(SPDR);
 69c:	8f b1       	in	r24, 0x0f	; 15
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 bc 02 	call	0x578	; 0x578 <Send_Val_to_LCD>
	//SPDR=0x33;
}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__udivmodhi4>:
 6c6:	aa 1b       	sub	r26, r26
 6c8:	bb 1b       	sub	r27, r27
 6ca:	51 e1       	ldi	r21, 0x11	; 17
 6cc:	07 c0       	rjmp	.+14     	; 0x6dc <__udivmodhi4_ep>

000006ce <__udivmodhi4_loop>:
 6ce:	aa 1f       	adc	r26, r26
 6d0:	bb 1f       	adc	r27, r27
 6d2:	a6 17       	cp	r26, r22
 6d4:	b7 07       	cpc	r27, r23
 6d6:	10 f0       	brcs	.+4      	; 0x6dc <__udivmodhi4_ep>
 6d8:	a6 1b       	sub	r26, r22
 6da:	b7 0b       	sbc	r27, r23

000006dc <__udivmodhi4_ep>:
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	5a 95       	dec	r21
 6e2:	a9 f7       	brne	.-22     	; 0x6ce <__udivmodhi4_loop>
 6e4:	80 95       	com	r24
 6e6:	90 95       	com	r25
 6e8:	bc 01       	movw	r22, r24
 6ea:	cd 01       	movw	r24, r26
 6ec:	08 95       	ret

000006ee <_exit>:
 6ee:	f8 94       	cli

000006f0 <__stop_program>:
 6f0:	ff cf       	rjmp	.-2      	; 0x6f0 <__stop_program>
