
Seven_Segment_with_STP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000728  000007bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  000007ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3a  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000317  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067f  00000000  00000000  00001d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e4  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 92 03 	jmp	0x724	; 0x724 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <main>:
u8	 DIGIT_NUM_6=0;

int main(void)
{
	/*DIO Initialization */
	DIO_Set_Pin_Direction(C,0,OUTPUT);
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(C,1,OUTPUT);
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(C,2,OUTPUT);
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_1 */
		}
		else if (Counter<1000000)
		{
			DIGIT_NUM_1=(Counter/100000);
			DIGIT_NUM_2=((Counter/10000)%10);
 1f0:	0f 2e       	mov	r0, r31
 1f2:	fa e0       	ldi	r31, 0x0A	; 10
 1f4:	8f 2e       	mov	r8, r31
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	9f 2e       	mov	r9, r31
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	af 2e       	mov	r10, r31
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	bf 2e       	mov	r11, r31
 202:	f0 2d       	mov	r31, r0
			DIGIT_NUM_3=((Counter/1000)%10);
			DIGIT_NUM_4=((Counter/100)%10);
 204:	0f 2e       	mov	r0, r31
 206:	f4 e6       	ldi	r31, 0x64	; 100
 208:	4f 2e       	mov	r4, r31
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	5f 2e       	mov	r5, r31
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	6f 2e       	mov	r6, r31
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	7f 2e       	mov	r7, r31
 216:	f0 2d       	mov	r31, r0
			DIGIT_NUM_5=((Counter/10)%10);
			DIGIT_NUM_6=Counter%10;
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_6 */
 218:	c4 e6       	ldi	r28, 0x64	; 100
 21a:	d0 e0       	ldi	r29, 0x00	; 0
	DIO_Set_Pin_Direction(C,2,OUTPUT);
	

    while(1)
    {
		if (Counter<100)
 21c:	c0 90 60 00 	lds	r12, 0x0060
 220:	d0 90 61 00 	lds	r13, 0x0061
 224:	e0 90 62 00 	lds	r14, 0x0062
 228:	f0 90 63 00 	lds	r15, 0x0063
 22c:	84 e6       	ldi	r24, 0x64	; 100
 22e:	c8 16       	cp	r12, r24
 230:	d1 04       	cpc	r13, r1
 232:	e1 04       	cpc	r14, r1
 234:	f1 04       	cpc	r15, r1
 236:	08 f0       	brcs	.+2      	; 0x23a <main+0x68>
 238:	41 c0       	rjmp	.+130    	; 0x2bc <main+0xea>
		{
			DIGIT_NUM_1=Counter/10;
 23a:	c7 01       	movw	r24, r14
 23c:	b6 01       	movw	r22, r12
 23e:	a5 01       	movw	r20, r10
 240:	94 01       	movw	r18, r8
 242:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 246:	20 93 73 00 	sts	0x0073, r18
			DIGIT_NUM_2=Counter%10;
 24a:	60 93 72 00 	sts	0x0072, r22
			DIGIT_NUM_3=0;
 24e:	10 92 71 00 	sts	0x0071, r1
			DIGIT_NUM_4=0;
 252:	10 92 70 00 	sts	0x0070, r1
			DIGIT_NUM_5=0;
 256:	10 92 6f 00 	sts	0x006F, r1
			DIGIT_NUM_6=0;
 25a:	10 92 6e 00 	sts	0x006E, r1
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_2]);		 /*Seven_Seg_6 */
 25e:	fe 01       	movw	r30, r28
 260:	e6 0f       	add	r30, r22
 262:	f1 1d       	adc	r31, r1
 264:	80 81       	ld	r24, Z
 266:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_1]);		 /*Seven_Seg_5 */
 26a:	80 91 73 00 	lds	r24, 0x0073
 26e:	fe 01       	movw	r30, r28
 270:	e8 0f       	add	r30, r24
 272:	f1 1d       	adc	r31, r1
 274:	80 81       	ld	r24, Z
 276:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);
 27a:	80 91 6e 00 	lds	r24, 0x006E
 27e:	fe 01       	movw	r30, r28
 280:	e8 0f       	add	r30, r24
 282:	f1 1d       	adc	r31, r1
 284:	80 81       	ld	r24, Z
 286:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_5]);
 28a:	80 91 6f 00 	lds	r24, 0x006F
 28e:	fe 01       	movw	r30, r28
 290:	e8 0f       	add	r30, r24
 292:	f1 1d       	adc	r31, r1
 294:	80 81       	ld	r24, Z
 296:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_4]);
 29a:	80 91 70 00 	lds	r24, 0x0070
 29e:	fe 01       	movw	r30, r28
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	80 81       	ld	r24, Z
 2a6:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_3]);
 2aa:	80 91 71 00 	lds	r24, 0x0071
 2ae:	fe 01       	movw	r30, r28
 2b0:	e8 0f       	add	r30, r24
 2b2:	f1 1d       	adc	r31, r1
 2b4:	80 81       	ld	r24, Z
 2b6:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
 2ba:	b3 c1       	rjmp	.+870    	; 0x622 <main+0x450>

		}
		else if (Counter<1000)
 2bc:	98 ee       	ldi	r25, 0xE8	; 232
 2be:	c9 16       	cp	r12, r25
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	d9 06       	cpc	r13, r25
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	e9 06       	cpc	r14, r25
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	f9 06       	cpc	r15, r25
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <main+0xfe>
 2ce:	4e c0       	rjmp	.+156    	; 0x36c <main+0x19a>
		{
			DIGIT_NUM_1=Counter/100;
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	a3 01       	movw	r20, r6
 2d6:	92 01       	movw	r18, r4
 2d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 2dc:	20 93 73 00 	sts	0x0073, r18
			DIGIT_NUM_2=(Counter/10)%10;
 2e0:	c7 01       	movw	r24, r14
 2e2:	b6 01       	movw	r22, r12
 2e4:	a5 01       	movw	r20, r10
 2e6:	94 01       	movw	r18, r8
 2e8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 2ec:	c6 2e       	mov	r12, r22
 2ee:	ca 01       	movw	r24, r20
 2f0:	b9 01       	movw	r22, r18
 2f2:	a5 01       	movw	r20, r10
 2f4:	94 01       	movw	r18, r8
 2f6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 2fa:	60 93 72 00 	sts	0x0072, r22
			DIGIT_NUM_3=Counter%10;
 2fe:	c0 92 71 00 	sts	0x0071, r12
			DIGIT_NUM_4=0;
 302:	10 92 70 00 	sts	0x0070, r1
			DIGIT_NUM_5=0;
 306:	10 92 6f 00 	sts	0x006F, r1
			DIGIT_NUM_6=0;
 30a:	10 92 6e 00 	sts	0x006E, r1
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_3]);		 /*Seven_Seg_6 */
 30e:	fe 01       	movw	r30, r28
 310:	ec 0d       	add	r30, r12
 312:	f1 1d       	adc	r31, r1
 314:	80 81       	ld	r24, Z
 316:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_2]);		 /*Seven_Seg_5 */
 31a:	80 91 72 00 	lds	r24, 0x0072
 31e:	fe 01       	movw	r30, r28
 320:	e8 0f       	add	r30, r24
 322:	f1 1d       	adc	r31, r1
 324:	80 81       	ld	r24, Z
 326:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_1]);		 /*Seven_Seg_4 */
 32a:	80 91 73 00 	lds	r24, 0x0073
 32e:	fe 01       	movw	r30, r28
 330:	e8 0f       	add	r30, r24
 332:	f1 1d       	adc	r31, r1
 334:	80 81       	ld	r24, Z
 336:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_4]);		 /*Seven_Seg_3 */
 33a:	80 91 70 00 	lds	r24, 0x0070
 33e:	fe 01       	movw	r30, r28
 340:	e8 0f       	add	r30, r24
 342:	f1 1d       	adc	r31, r1
 344:	80 81       	ld	r24, Z
 346:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_5]);		 /*Seven_Seg_2 */
 34a:	80 91 6f 00 	lds	r24, 0x006F
 34e:	fe 01       	movw	r30, r28
 350:	e8 0f       	add	r30, r24
 352:	f1 1d       	adc	r31, r1
 354:	80 81       	ld	r24, Z
 356:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_1 */
 35a:	80 91 6e 00 	lds	r24, 0x006E
 35e:	fe 01       	movw	r30, r28
 360:	e8 0f       	add	r30, r24
 362:	f1 1d       	adc	r31, r1
 364:	80 81       	ld	r24, Z
 366:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
 36a:	5b c1       	rjmp	.+694    	; 0x622 <main+0x450>
			
		}
		else if (Counter<10000)
 36c:	a0 e1       	ldi	r26, 0x10	; 16
 36e:	ca 16       	cp	r12, r26
 370:	a7 e2       	ldi	r26, 0x27	; 39
 372:	da 06       	cpc	r13, r26
 374:	a0 e0       	ldi	r26, 0x00	; 0
 376:	ea 06       	cpc	r14, r26
 378:	a0 e0       	ldi	r26, 0x00	; 0
 37a:	fa 06       	cpc	r15, r26
 37c:	08 f0       	brcs	.+2      	; 0x380 <main+0x1ae>
 37e:	5c c0       	rjmp	.+184    	; 0x438 <main+0x266>
		{
			DIGIT_NUM_1=Counter/1000;
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
 384:	28 ee       	ldi	r18, 0xE8	; 232
 386:	33 e0       	ldi	r19, 0x03	; 3
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 390:	20 93 73 00 	sts	0x0073, r18
			DIGIT_NUM_2=(Counter/100)%10;
 394:	c7 01       	movw	r24, r14
 396:	b6 01       	movw	r22, r12
 398:	a3 01       	movw	r20, r6
 39a:	92 01       	movw	r18, r4
 39c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 3a0:	ca 01       	movw	r24, r20
 3a2:	b9 01       	movw	r22, r18
 3a4:	a5 01       	movw	r20, r10
 3a6:	94 01       	movw	r18, r8
 3a8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 3ac:	60 93 72 00 	sts	0x0072, r22
			DIGIT_NUM_3=((Counter/10)%10);
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	a5 01       	movw	r20, r10
 3b6:	94 01       	movw	r18, r8
 3b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 3bc:	c6 2e       	mov	r12, r22
 3be:	ca 01       	movw	r24, r20
 3c0:	b9 01       	movw	r22, r18
 3c2:	a5 01       	movw	r20, r10
 3c4:	94 01       	movw	r18, r8
 3c6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 3ca:	60 93 71 00 	sts	0x0071, r22
			DIGIT_NUM_4=Counter%10;
 3ce:	c0 92 70 00 	sts	0x0070, r12
			DIGIT_NUM_5=0;
 3d2:	10 92 6f 00 	sts	0x006F, r1
			DIGIT_NUM_6=0;
 3d6:	10 92 6e 00 	sts	0x006E, r1
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_4]);		 /*Seven_Seg_6 */
 3da:	fe 01       	movw	r30, r28
 3dc:	ec 0d       	add	r30, r12
 3de:	f1 1d       	adc	r31, r1
 3e0:	80 81       	ld	r24, Z
 3e2:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_3]);		 /*Seven_Seg_5 */
 3e6:	80 91 71 00 	lds	r24, 0x0071
 3ea:	fe 01       	movw	r30, r28
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	80 81       	ld	r24, Z
 3f2:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_2]);		 /*Seven_Seg_4 */
 3f6:	80 91 72 00 	lds	r24, 0x0072
 3fa:	fe 01       	movw	r30, r28
 3fc:	e8 0f       	add	r30, r24
 3fe:	f1 1d       	adc	r31, r1
 400:	80 81       	ld	r24, Z
 402:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_1]);		 /*Seven_Seg_3 */
 406:	80 91 73 00 	lds	r24, 0x0073
 40a:	fe 01       	movw	r30, r28
 40c:	e8 0f       	add	r30, r24
 40e:	f1 1d       	adc	r31, r1
 410:	80 81       	ld	r24, Z
 412:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_5]);		 /*Seven_Seg_2 */
 416:	80 91 6f 00 	lds	r24, 0x006F
 41a:	fe 01       	movw	r30, r28
 41c:	e8 0f       	add	r30, r24
 41e:	f1 1d       	adc	r31, r1
 420:	80 81       	ld	r24, Z
 422:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_1 */
 426:	80 91 6e 00 	lds	r24, 0x006E
 42a:	fe 01       	movw	r30, r28
 42c:	e8 0f       	add	r30, r24
 42e:	f1 1d       	adc	r31, r1
 430:	80 81       	ld	r24, Z
 432:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
 436:	f5 c0       	rjmp	.+490    	; 0x622 <main+0x450>
		}
		else if (Counter<100000)
 438:	b0 ea       	ldi	r27, 0xA0	; 160
 43a:	cb 16       	cp	r12, r27
 43c:	b6 e8       	ldi	r27, 0x86	; 134
 43e:	db 06       	cpc	r13, r27
 440:	b1 e0       	ldi	r27, 0x01	; 1
 442:	eb 06       	cpc	r14, r27
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	fb 06       	cpc	r15, r27
 448:	08 f0       	brcs	.+2      	; 0x44c <main+0x27a>
 44a:	6a c0       	rjmp	.+212    	; 0x520 <main+0x34e>
		{
			DIGIT_NUM_1=Counter/10000;
 44c:	c7 01       	movw	r24, r14
 44e:	b6 01       	movw	r22, r12
 450:	20 e1       	ldi	r18, 0x10	; 16
 452:	37 e2       	ldi	r19, 0x27	; 39
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 45c:	20 93 73 00 	sts	0x0073, r18
			DIGIT_NUM_2=((Counter/1000)%10);
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	28 ee       	ldi	r18, 0xE8	; 232
 466:	33 e0       	ldi	r19, 0x03	; 3
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 470:	ca 01       	movw	r24, r20
 472:	b9 01       	movw	r22, r18
 474:	a5 01       	movw	r20, r10
 476:	94 01       	movw	r18, r8
 478:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 47c:	60 93 72 00 	sts	0x0072, r22
			DIGIT_NUM_3=((Counter/100)%10 );
 480:	c7 01       	movw	r24, r14
 482:	b6 01       	movw	r22, r12
 484:	a3 01       	movw	r20, r6
 486:	92 01       	movw	r18, r4
 488:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 48c:	ca 01       	movw	r24, r20
 48e:	b9 01       	movw	r22, r18
 490:	a5 01       	movw	r20, r10
 492:	94 01       	movw	r18, r8
 494:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 498:	60 93 71 00 	sts	0x0071, r22
			DIGIT_NUM_4=((Counter/10)%10  );
 49c:	c7 01       	movw	r24, r14
 49e:	b6 01       	movw	r22, r12
 4a0:	a5 01       	movw	r20, r10
 4a2:	94 01       	movw	r18, r8
 4a4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 4a8:	c6 2e       	mov	r12, r22
 4aa:	ca 01       	movw	r24, r20
 4ac:	b9 01       	movw	r22, r18
 4ae:	a5 01       	movw	r20, r10
 4b0:	94 01       	movw	r18, r8
 4b2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 4b6:	60 93 70 00 	sts	0x0070, r22
			DIGIT_NUM_5=Counter%10;
 4ba:	c0 92 6f 00 	sts	0x006F, r12
			DIGIT_NUM_6=0;
 4be:	10 92 6e 00 	sts	0x006E, r1
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_5]);		 /*Seven_Seg_6 */
 4c2:	fe 01       	movw	r30, r28
 4c4:	ec 0d       	add	r30, r12
 4c6:	f1 1d       	adc	r31, r1
 4c8:	80 81       	ld	r24, Z
 4ca:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_4]);		 /*Seven_Seg_5 */
 4ce:	80 91 70 00 	lds	r24, 0x0070
 4d2:	fe 01       	movw	r30, r28
 4d4:	e8 0f       	add	r30, r24
 4d6:	f1 1d       	adc	r31, r1
 4d8:	80 81       	ld	r24, Z
 4da:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_3]);		 /*Seven_Seg_4 */
 4de:	80 91 71 00 	lds	r24, 0x0071
 4e2:	fe 01       	movw	r30, r28
 4e4:	e8 0f       	add	r30, r24
 4e6:	f1 1d       	adc	r31, r1
 4e8:	80 81       	ld	r24, Z
 4ea:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_2]);		 /*Seven_Seg_3 */
 4ee:	80 91 72 00 	lds	r24, 0x0072
 4f2:	fe 01       	movw	r30, r28
 4f4:	e8 0f       	add	r30, r24
 4f6:	f1 1d       	adc	r31, r1
 4f8:	80 81       	ld	r24, Z
 4fa:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_1]);		 /*Seven_Seg_2 */
 4fe:	80 91 73 00 	lds	r24, 0x0073
 502:	fe 01       	movw	r30, r28
 504:	e8 0f       	add	r30, r24
 506:	f1 1d       	adc	r31, r1
 508:	80 81       	ld	r24, Z
 50a:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_1 */
 50e:	80 91 6e 00 	lds	r24, 0x006E
 512:	fe 01       	movw	r30, r28
 514:	e8 0f       	add	r30, r24
 516:	f1 1d       	adc	r31, r1
 518:	80 81       	ld	r24, Z
 51a:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
 51e:	81 c0       	rjmp	.+258    	; 0x622 <main+0x450>
		}
		else if (Counter<1000000)
 520:	80 e4       	ldi	r24, 0x40	; 64
 522:	c8 16       	cp	r12, r24
 524:	82 e4       	ldi	r24, 0x42	; 66
 526:	d8 06       	cpc	r13, r24
 528:	8f e0       	ldi	r24, 0x0F	; 15
 52a:	e8 06       	cpc	r14, r24
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	f8 06       	cpc	r15, r24
 530:	08 f0       	brcs	.+2      	; 0x534 <main+0x362>
 532:	77 c0       	rjmp	.+238    	; 0x622 <main+0x450>
		{
			DIGIT_NUM_1=(Counter/100000);
 534:	c7 01       	movw	r24, r14
 536:	b6 01       	movw	r22, r12
 538:	20 ea       	ldi	r18, 0xA0	; 160
 53a:	36 e8       	ldi	r19, 0x86	; 134
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 544:	20 93 73 00 	sts	0x0073, r18
			DIGIT_NUM_2=((Counter/10000)%10);
 548:	c7 01       	movw	r24, r14
 54a:	b6 01       	movw	r22, r12
 54c:	20 e1       	ldi	r18, 0x10	; 16
 54e:	37 e2       	ldi	r19, 0x27	; 39
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 558:	ca 01       	movw	r24, r20
 55a:	b9 01       	movw	r22, r18
 55c:	a5 01       	movw	r20, r10
 55e:	94 01       	movw	r18, r8
 560:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 564:	60 93 72 00 	sts	0x0072, r22
			DIGIT_NUM_3=((Counter/1000)%10);
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	28 ee       	ldi	r18, 0xE8	; 232
 56e:	33 e0       	ldi	r19, 0x03	; 3
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 578:	ca 01       	movw	r24, r20
 57a:	b9 01       	movw	r22, r18
 57c:	a5 01       	movw	r20, r10
 57e:	94 01       	movw	r18, r8
 580:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 584:	60 93 71 00 	sts	0x0071, r22
			DIGIT_NUM_4=((Counter/100)%10);
 588:	c7 01       	movw	r24, r14
 58a:	b6 01       	movw	r22, r12
 58c:	a3 01       	movw	r20, r6
 58e:	92 01       	movw	r18, r4
 590:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 594:	ca 01       	movw	r24, r20
 596:	b9 01       	movw	r22, r18
 598:	a5 01       	movw	r20, r10
 59a:	94 01       	movw	r18, r8
 59c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 5a0:	60 93 70 00 	sts	0x0070, r22
			DIGIT_NUM_5=((Counter/10)%10);
 5a4:	c7 01       	movw	r24, r14
 5a6:	b6 01       	movw	r22, r12
 5a8:	a5 01       	movw	r20, r10
 5aa:	94 01       	movw	r18, r8
 5ac:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 5b0:	c6 2e       	mov	r12, r22
 5b2:	ca 01       	movw	r24, r20
 5b4:	b9 01       	movw	r22, r18
 5b6:	a5 01       	movw	r20, r10
 5b8:	94 01       	movw	r18, r8
 5ba:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__udivmodsi4>
 5be:	60 93 6f 00 	sts	0x006F, r22
			DIGIT_NUM_6=Counter%10;
 5c2:	c0 92 6e 00 	sts	0x006E, r12
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_6]);		 /*Seven_Seg_6 */
 5c6:	fe 01       	movw	r30, r28
 5c8:	ec 0d       	add	r30, r12
 5ca:	f1 1d       	adc	r31, r1
 5cc:	80 81       	ld	r24, Z
 5ce:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_5]);		 /*Seven_Seg_5 */
 5d2:	80 91 6f 00 	lds	r24, 0x006F
 5d6:	fe 01       	movw	r30, r28
 5d8:	e8 0f       	add	r30, r24
 5da:	f1 1d       	adc	r31, r1
 5dc:	80 81       	ld	r24, Z
 5de:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_4]);		 /*Seven_Seg_4 */
 5e2:	80 91 70 00 	lds	r24, 0x0070
 5e6:	fe 01       	movw	r30, r28
 5e8:	e8 0f       	add	r30, r24
 5ea:	f1 1d       	adc	r31, r1
 5ec:	80 81       	ld	r24, Z
 5ee:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_3]);		 /*Seven_Seg_3 */
 5f2:	80 91 71 00 	lds	r24, 0x0071
 5f6:	fe 01       	movw	r30, r28
 5f8:	e8 0f       	add	r30, r24
 5fa:	f1 1d       	adc	r31, r1
 5fc:	80 81       	ld	r24, Z
 5fe:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_2]);		 /*Seven_Seg_2 */
 602:	80 91 72 00 	lds	r24, 0x0072
 606:	fe 01       	movw	r30, r28
 608:	e8 0f       	add	r30, r24
 60a:	f1 1d       	adc	r31, r1
 60c:	80 81       	ld	r24, Z
 60e:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
			HSTP_voidSendSynchronuse(Seg_num[DIGIT_NUM_1]);		 /*Seven_Seg_1 */
 612:	80 91 73 00 	lds	r24, 0x0073
 616:	fe 01       	movw	r30, r28
 618:	e8 0f       	add	r30, r24
 61a:	f1 1d       	adc	r31, r1
 61c:	80 81       	ld	r24, Z
 61e:	0e 94 2e 03 	call	0x65c	; 0x65c <HSTP_voidSendSynchronuse>
		}
		
		
		
		Counter++;
 622:	80 91 60 00 	lds	r24, 0x0060
 626:	90 91 61 00 	lds	r25, 0x0061
 62a:	a0 91 62 00 	lds	r26, 0x0062
 62e:	b0 91 63 00 	lds	r27, 0x0063
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	a1 1d       	adc	r26, r1
 636:	b1 1d       	adc	r27, r1
 638:	80 93 60 00 	sts	0x0060, r24
 63c:	90 93 61 00 	sts	0x0061, r25
 640:	a0 93 62 00 	sts	0x0062, r26
 644:	b0 93 63 00 	sts	0x0063, r27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	94 e3       	ldi	r25, 0x34	; 52
 64c:	ac e0       	ldi	r26, 0x0C	; 12
 64e:	81 50       	subi	r24, 0x01	; 1
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	a0 40       	sbci	r26, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <main+0x47c>
 656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x486>
 658:	00 00       	nop
 65a:	e0 cd       	rjmp	.-1088   	; 0x21c <main+0x4a>

0000065c <HSTP_voidSendSynchronuse>:
#include "STP_interface.h"
#include "STP_private.h"
#include "STP_config.h"

void HSTP_voidSendSynchronuse(u8 copy_u8DataToSend)
{
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	c7 e0       	ldi	r28, 0x07	; 7
 666:	d0 e0       	ldi	r29, 0x00	; 0
	s8 Local_u8Counter;
	u8 Local_u8Bit;
	/* Send bit by bit MSB first*/
	for(Local_u8Counter=7; Local_u8Counter>=0; Local_u8Counter--)
	{
		Local_u8Bit=GET_BIT(copy_u8DataToSend,Local_u8Counter);
 668:	08 2f       	mov	r16, r24
 66a:	10 e0       	ldi	r17, 0x00	; 0
 66c:	a8 01       	movw	r20, r16
 66e:	0c 2e       	mov	r0, r28
 670:	02 c0       	rjmp	.+4      	; 0x676 <HSTP_voidSendSynchronuse+0x1a>
 672:	55 95       	asr	r21
 674:	47 95       	ror	r20
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <HSTP_voidSendSynchronuse+0x16>
 67a:	41 70       	andi	r20, 0x01	; 1
		DIO_Set_Pin_Value(HSTP_SERIAL_DATA,Local_u8Bit);
 67c:	83 e3       	ldi	r24, 0x33	; 51
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		/* send pulse on Shift clock  100ns  or more   */
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,HIGH);
 684:	83 e3       	ldi	r24, 0x33	; 51
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	8a 95       	dec	r24
 692:	f1 f7       	brne	.-4      	; 0x690 <HSTP_voidSendSynchronuse+0x34>
 694:	00 c0       	rjmp	.+0      	; 0x696 <HSTP_voidSendSynchronuse+0x3a>
		_delay_us(1);				/* 1us*/ 
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,LOW);
 696:	83 e3       	ldi	r24, 0x33	; 51
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	8a 95       	dec	r24
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <HSTP_voidSendSynchronuse+0x46>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <HSTP_voidSendSynchronuse+0x4c>
 6a8:	21 97       	sbiw	r28, 0x01	; 1
void HSTP_voidSendSynchronuse(u8 copy_u8DataToSend)
{
	s8 Local_u8Counter;
	u8 Local_u8Bit;
	/* Send bit by bit MSB first*/
	for(Local_u8Counter=7; Local_u8Counter>=0; Local_u8Counter--)
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	cf 3f       	cpi	r28, 0xFF	; 255
 6ae:	d8 07       	cpc	r29, r24
 6b0:	e9 f6       	brne	.-70     	; 0x66c <HSTP_voidSendSynchronuse+0x10>
		_delay_us(1);				/* 1us*/ 
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,LOW);
		_delay_us(1);				/* 1us*/
	}
	/* send pulse on Stor clock  100ns  or more   */
	DIO_Set_Pin_Value(HSTP_STORE_CLOCK,HIGH);
 6b2:	83 e3       	ldi	r24, 0x33	; 51
 6b4:	62 e0       	ldi	r22, 0x02	; 2
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	8a 95       	dec	r24
 6c0:	f1 f7       	brne	.-4      	; 0x6be <HSTP_voidSendSynchronuse+0x62>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <HSTP_voidSendSynchronuse+0x68>
	_delay_us(1);				/* 1us*/ 
	DIO_Set_Pin_Value(HSTP_STORE_CLOCK,LOW);
 6c4:	83 e3       	ldi	r24, 0x33	; 51
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	8a 95       	dec	r24
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <HSTP_voidSendSynchronuse+0x74>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <HSTP_voidSendSynchronuse+0x7a>
	_delay_us(1);				/* 1us*/
	
}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	08 95       	ret

000006e0 <__udivmodsi4>:
 6e0:	a1 e2       	ldi	r26, 0x21	; 33
 6e2:	1a 2e       	mov	r1, r26
 6e4:	aa 1b       	sub	r26, r26
 6e6:	bb 1b       	sub	r27, r27
 6e8:	fd 01       	movw	r30, r26
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <__udivmodsi4_ep>

000006ec <__udivmodsi4_loop>:
 6ec:	aa 1f       	adc	r26, r26
 6ee:	bb 1f       	adc	r27, r27
 6f0:	ee 1f       	adc	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	a2 17       	cp	r26, r18
 6f6:	b3 07       	cpc	r27, r19
 6f8:	e4 07       	cpc	r30, r20
 6fa:	f5 07       	cpc	r31, r21
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__udivmodsi4_ep>
 6fe:	a2 1b       	sub	r26, r18
 700:	b3 0b       	sbc	r27, r19
 702:	e4 0b       	sbc	r30, r20
 704:	f5 0b       	sbc	r31, r21

00000706 <__udivmodsi4_ep>:
 706:	66 1f       	adc	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	1a 94       	dec	r1
 710:	69 f7       	brne	.-38     	; 0x6ec <__udivmodsi4_loop>
 712:	60 95       	com	r22
 714:	70 95       	com	r23
 716:	80 95       	com	r24
 718:	90 95       	com	r25
 71a:	9b 01       	movw	r18, r22
 71c:	ac 01       	movw	r20, r24
 71e:	bd 01       	movw	r22, r26
 720:	cf 01       	movw	r24, r30
 722:	08 95       	ret

00000724 <_exit>:
 724:	f8 94       	cli

00000726 <__stop_program>:
 726:	ff cf       	rjmp	.-2      	; 0x726 <__stop_program>
