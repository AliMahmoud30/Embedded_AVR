
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002ae  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085d  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002dc  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059f  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000272  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034b  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "STP_interface.h"

int main(void)
{
	/*DIO Initialization */
	DIO_Set_Pin_Direction(C,0,OUTPUT);
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 80 00 	call	0x100	; 0x100 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(C,1,OUTPUT);
  9c:	83 e3       	ldi	r24, 0x33	; 51
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 80 00 	call	0x100	; 0x100 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(C,2,OUTPUT);
  a6:	83 e3       	ldi	r24, 0x33	; 51
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 80 00 	call	0x100	; 0x100 <DIO_Set_Pin_Direction>
	HSTP_voidSendSynchronuse(0x05);
	*/
    while(1)
    {
		
		for(u8 i =0; i<8;i++)
  b0:	c0 e0       	ldi	r28, 0x00	; 0
		{
			HSTP_voidSendSynchronuse(1<<i);
  b2:	01 e0       	ldi	r16, 0x01	; 1
  b4:	10 e0       	ldi	r17, 0x00	; 0
	HSTP_voidSendSynchronuse(0x05);
	*/
    while(1)
    {
		
		for(u8 i =0; i<8;i++)
  b6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			HSTP_voidSendSynchronuse(1<<i);
  b8:	c8 01       	movw	r24, r16
  ba:	0c 2e       	mov	r0, r28
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x2c>
  c6:	0e 94 13 01 	call	0x226	; 0x226 <HSTP_voidSendSynchronuse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	91 ee       	ldi	r25, 0xE1	; 225
  ce:	a4 e0       	ldi	r26, 0x04	; 4
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	a0 40       	sbci	r26, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x48>
  da:	00 00       	nop
	HSTP_voidSendSynchronuse(0x05);
	*/
    while(1)
    {
		
		for(u8 i =0; i<8;i++)
  dc:	cf 5f       	subi	r28, 0xFF	; 255
  de:	c8 30       	cpi	r28, 0x08	; 8
  e0:	58 f3       	brcs	.-42     	; 0xb8 <main+0x26>
  e2:	cd 2f       	mov	r28, r29
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x26>

000000e6 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  e6:	61 30       	cpi	r22, 0x01	; 1
  e8:	29 f4       	brne	.+10     	; 0xf4 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	81 83       	std	Z+1, r24	; 0x01
  f2:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  f4:	66 23       	and	r22, r22
  f6:	19 f4       	brne	.+6      	; 0xfe <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	11 82       	std	Z+1, r1	; 0x01
  fe:	08 95       	ret

00000100 <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	79 f4       	brne	.+30     	; 0x122 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	21 81       	ldd	r18, Z+1	; 0x01
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_Set_Pin_Direction+0x16>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_Set_Pin_Direction+0x12>
 11a:	ba 01       	movw	r22, r20
 11c:	62 2b       	or	r22, r18
 11e:	61 83       	std	Z+1, r22	; 0x01
 120:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
 122:	44 23       	and	r20, r20
 124:	79 f4       	brne	.+30     	; 0x144 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	21 81       	ldd	r18, Z+1	; 0x01
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	ac 01       	movw	r20, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_Set_Pin_Direction+0x38>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_Set_Pin_Direction+0x34>
 13c:	ba 01       	movw	r22, r20
 13e:	60 95       	com	r22
 140:	62 23       	and	r22, r18
 142:	61 83       	std	Z+1, r22	; 0x01
 144:	08 95       	ret

00000146 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	62 83       	std	Z+2, r22	; 0x02
}
 14c:	08 95       	ret

0000014e <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	79 f4       	brne	.+30     	; 0x170 <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	22 81       	ldd	r18, Z+2	; 0x02
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ac 01       	movw	r20, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_Set_Pin_Value+0x16>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_Set_Pin_Value+0x12>
 168:	ba 01       	movw	r22, r20
 16a:	62 2b       	or	r22, r18
 16c:	62 83       	std	Z+2, r22	; 0x02
 16e:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 170:	44 23       	and	r20, r20
 172:	79 f4       	brne	.+30     	; 0x192 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	22 81       	ldd	r18, Z+2	; 0x02
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	ac 01       	movw	r20, r24
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_Set_Pin_Value+0x38>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_Set_Pin_Value+0x34>
 18a:	ba 01       	movw	r22, r20
 18c:	60 95       	com	r22
 18e:	62 23       	and	r22, r18
 190:	62 83       	std	Z+2, r22	; 0x02
 192:	08 95       	ret

00000194 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	0f 92       	push	r0
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	0f 92       	push	r0
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	9c 01       	movw	r18, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_Get_Pin_value+0x1a>
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_Get_Pin_value+0x16>
 1ce:	b9 01       	movw	r22, r18
 1d0:	61 70       	andi	r22, 0x01	; 1
 1d2:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 1de:	e8 2f       	mov	r30, r24
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_Toggle_Pin+0x12>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_Toggle_Pin+0xe>
 1f4:	ba 01       	movw	r22, r20
 1f6:	62 27       	eor	r22, r18
 1f8:	62 83       	std	Z+2, r22	; 0x02
}
 1fa:	08 95       	ret

000001fc <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	82 81       	ldd	r24, Z+2	; 0x02
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 206:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 208:	62 95       	swap	r22
 20a:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 20c:	68 27       	eor	r22, r24
 20e:	62 83       	std	Z+2, r22	; 0x02
	
} 
 210:	08 95       	ret

00000212 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 212:	e8 2f       	mov	r30, r24
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 21c:	82 81       	ldd	r24, Z+2	; 0x02
 21e:	6f 70       	andi	r22, 0x0F	; 15
 220:	68 27       	eor	r22, r24
 222:	62 83       	std	Z+2, r22	; 0x02
	
}
 224:	08 95       	ret

00000226 <HSTP_voidSendSynchronuse>:
#include "STP_interface.h"
#include "STP_private.h"
#include "STP_config.h"

void HSTP_voidSendSynchronuse(u8 copy_u8DataToSend)
{
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	c7 e0       	ldi	r28, 0x07	; 7
 230:	d0 e0       	ldi	r29, 0x00	; 0
	s8 Local_u8Counter;
	u8 Local_u8Bit;
	/* Send bit by bit MSB first*/
	for(Local_u8Counter=7; Local_u8Counter>=0; Local_u8Counter--)
	{
		Local_u8Bit=GET_BIT(copy_u8DataToSend,Local_u8Counter);
 232:	08 2f       	mov	r16, r24
 234:	10 e0       	ldi	r17, 0x00	; 0
 236:	a8 01       	movw	r20, r16
 238:	0c 2e       	mov	r0, r28
 23a:	02 c0       	rjmp	.+4      	; 0x240 <HSTP_voidSendSynchronuse+0x1a>
 23c:	55 95       	asr	r21
 23e:	47 95       	ror	r20
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <HSTP_voidSendSynchronuse+0x16>
 244:	41 70       	andi	r20, 0x01	; 1
		DIO_Set_Pin_Value(HSTP_SERIAL_DATA,Local_u8Bit);
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_Set_Pin_Value>
		/* send pulse on Shift clock  100ns  or more   */
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,HIGH);
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <HSTP_voidSendSynchronuse+0x34>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <HSTP_voidSendSynchronuse+0x3a>
		_delay_us(1);				/* 1us*/ 
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,LOW);
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_Set_Pin_Value>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <HSTP_voidSendSynchronuse+0x46>
 270:	00 c0       	rjmp	.+0      	; 0x272 <HSTP_voidSendSynchronuse+0x4c>
 272:	21 97       	sbiw	r28, 0x01	; 1
void HSTP_voidSendSynchronuse(u8 copy_u8DataToSend)
{
	s8 Local_u8Counter;
	u8 Local_u8Bit;
	/* Send bit by bit MSB first*/
	for(Local_u8Counter=7; Local_u8Counter>=0; Local_u8Counter--)
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	cf 3f       	cpi	r28, 0xFF	; 255
 278:	d8 07       	cpc	r29, r24
 27a:	e9 f6       	brne	.-70     	; 0x236 <HSTP_voidSendSynchronuse+0x10>
		_delay_us(1);				/* 1us*/ 
		DIO_Set_Pin_Value(HSTP_SHIFT_CLOCK,LOW);
		_delay_us(1);				/* 1us*/
	}
	/* send pulse on Stor clock  100ns  or more   */
	DIO_Set_Pin_Value(HSTP_STORE_CLOCK,HIGH);
 27c:	83 e3       	ldi	r24, 0x33	; 51
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_Set_Pin_Value>
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <HSTP_voidSendSynchronuse+0x62>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <HSTP_voidSendSynchronuse+0x68>
	_delay_us(1);				/* 1us*/ 
	DIO_Set_Pin_Value(HSTP_STORE_CLOCK,LOW);
 28e:	83 e3       	ldi	r24, 0x33	; 51
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_Set_Pin_Value>
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <HSTP_voidSendSynchronuse+0x74>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <HSTP_voidSendSynchronuse+0x7a>
	_delay_us(1);				/* 1us*/
	
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
