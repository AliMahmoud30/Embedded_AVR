
Timer2_CTC_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000154  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000940  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000039c  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c8  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile unsigned short Counter3;

int main(void)
{
	
	SET_BIT(DDRA,0);
  92:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(DDRA,1);
  94:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,2);
  96:	d2 9a       	sbi	0x1a, 2	; 26
	
	SET_BIT(DDRD,7);
  98:	8f 9a       	sbi	0x11, 7	; 17
	/* Initialization  Timer2*/
	
	/* Set CTC Mode */
	SET_BIT(TCCR2,WGM21);
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	85 bd       	out	0x25, r24	; 37
	/* Set Prescaler DIV/1024*/
	SET_BIT(TCCR2,CS20);
  a0:	85 b5       	in	r24, 0x25	; 37
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	85 bd       	out	0x25, r24	; 37
	/* Load Value in OCR2 Register */
	OCR2=80;
  b2:	80 e5       	ldi	r24, 0x50	; 80
  b4:	83 bd       	out	0x23, r24	; 35
	
	SET_BIT(TCCR2,COM20);
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	85 bd       	out	0x25, r24	; 37
	
	/* Set CTC Interrupt Enable bit*/
	SET_BIT(TIMSK,OCIE2);
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	89 bf       	out	0x39, r24	; 57
	/* Set Global Interrupt bit (I-BIT) */
	sei();
  c2:	78 94       	sei
	
    while(1)
    {
		if (Counter1>100)
		{
			TOG_BIT(PORTA,0);
  c4:	31 e0       	ldi	r19, 0x01	; 1
			Counter1=0;
		}
		if (Counter2>200)
		{
			TOG_BIT(PORTA,1);
  c6:	22 e0       	ldi	r18, 0x02	; 2
			Counter2=0;
		}
		if (Counter3>300)
		{
			TOG_BIT(PORTA,2);
  c8:	44 e0       	ldi	r20, 0x04	; 4
	
	
	
    while(1)
    {
		if (Counter1>100)
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	85 36       	cpi	r24, 0x65	; 101
  d0:	28 f0       	brcs	.+10     	; 0xdc <main+0x4a>
		{
			TOG_BIT(PORTA,0);
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	83 27       	eor	r24, r19
  d6:	8b bb       	out	0x1b, r24	; 27
			Counter1=0;
  d8:	10 92 60 00 	sts	0x0060, r1
		}
		if (Counter2>200)
  dc:	80 91 63 00 	lds	r24, 0x0063
  e0:	89 3c       	cpi	r24, 0xC9	; 201
  e2:	28 f0       	brcs	.+10     	; 0xee <main+0x5c>
		{
			TOG_BIT(PORTA,1);
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	82 27       	eor	r24, r18
  e8:	8b bb       	out	0x1b, r24	; 27
			Counter2=0;
  ea:	10 92 63 00 	sts	0x0063, r1
		}
		if (Counter3>300)
  ee:	80 91 61 00 	lds	r24, 0x0061
  f2:	90 91 62 00 	lds	r25, 0x0062
  f6:	51 e0       	ldi	r21, 0x01	; 1
  f8:	8d 32       	cpi	r24, 0x2D	; 45
  fa:	95 07       	cpc	r25, r21
  fc:	30 f3       	brcs	.-52     	; 0xca <main+0x38>
		{
			TOG_BIT(PORTA,2);
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	84 27       	eor	r24, r20
 102:	8b bb       	out	0x1b, r24	; 27
			Counter3=0;
 104:	10 92 62 00 	sts	0x0062, r1
 108:	10 92 61 00 	sts	0x0061, r1
 10c:	de cf       	rjmp	.-68     	; 0xca <main+0x38>

0000010e <__vector_4>:
    }
}


ISR(TIMER2_COMP_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	Counter1++;
 11c:	80 91 60 00 	lds	r24, 0x0060
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 60 00 	sts	0x0060, r24
	Counter2++;
 126:	80 91 63 00 	lds	r24, 0x0063
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 63 00 	sts	0x0063, r24
	Counter3++;
 130:	80 91 61 00 	lds	r24, 0x0061
 134:	90 91 62 00 	lds	r25, 0x0062
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 62 00 	sts	0x0062, r25
 13e:	80 93 61 00 	sts	0x0061, r24
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
