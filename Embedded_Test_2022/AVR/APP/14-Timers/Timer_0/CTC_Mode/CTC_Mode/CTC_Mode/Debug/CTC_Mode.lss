
CTC_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000342  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000676  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bf  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  0000138d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile unsigned short counter3;

int main(void)
{
	/*Initialization */
	DIO_Set_Pin_Direction(A,0,OUTPUT);
  92:	89 e3       	ldi	r24, 0x39	; 57
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(A,1,OUTPUT);
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(A,2,OUTPUT);
  a6:	89 e3       	ldi	r24, 0x39	; 57
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_Set_Pin_Direction>
	
	
	Timer0_CTC_Interrupt_Init(80);
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	0e 94 41 01 	call	0x282	; 0x282 <Timer0_CTC_Interrupt_Init>
		
		
    while(1)
    {
		if (counter1>=100)
  b6:	80 91 62 00 	lds	r24, 0x0062
  ba:	84 36       	cpi	r24, 0x64	; 100
  bc:	30 f0       	brcs	.+12     	; 0xca <main+0x38>
		{
			DIO_Toggle_Pin(A,0);
  be:	89 e3       	ldi	r24, 0x39	; 57
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_Toggle_Pin>
			counter1=0;
  c6:	10 92 62 00 	sts	0x0062, r1
		}
		if (counter2>=200)
  ca:	80 91 63 00 	lds	r24, 0x0063
  ce:	88 3c       	cpi	r24, 0xC8	; 200
  d0:	30 f0       	brcs	.+12     	; 0xde <main+0x4c>
		{
			DIO_Toggle_Pin(A,1);
  d2:	89 e3       	ldi	r24, 0x39	; 57
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_Toggle_Pin>
			counter2=0;
  da:	10 92 63 00 	sts	0x0063, r1
		}
		if (counter3>=300)
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	90 91 61 00 	lds	r25, 0x0061
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	8c 32       	cpi	r24, 0x2C	; 44
  ea:	92 07       	cpc	r25, r18
  ec:	20 f3       	brcs	.-56     	; 0xb6 <main+0x24>
		{
			DIO_Toggle_Pin(A,2);
  ee:	89 e3       	ldi	r24, 0x39	; 57
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_Toggle_Pin>
			counter3=0;
  f6:	10 92 61 00 	sts	0x0061, r1
  fa:	10 92 60 00 	sts	0x0060, r1
  fe:	db cf       	rjmp	.-74     	; 0xb6 <main+0x24>

00000100 <__vector_10>:
		
       
    }
}
ISR(TIMER0_COMP_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	counter1++;
 10e:	80 91 62 00 	lds	r24, 0x0062
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 62 00 	sts	0x0062, r24
	counter2++;
 118:	80 91 63 00 	lds	r24, 0x0063
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 63 00 	sts	0x0063, r24
	counter3++;
 122:	80 91 60 00 	lds	r24, 0x0060
 126:	90 91 61 00 	lds	r25, 0x0061
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 61 00 	sts	0x0061, r25
 130:	80 93 60 00 	sts	0x0060, r24
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	29 f4       	brne	.+10     	; 0x150 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	81 83       	std	Z+1, r24	; 0x01
 14e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
 150:	66 23       	and	r22, r22
 152:	19 f4       	brne	.+6      	; 0x15a <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
 154:	e8 2f       	mov	r30, r24
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	11 82       	std	Z+1, r1	; 0x01
 15a:	08 95       	ret

0000015c <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
 15c:	41 30       	cpi	r20, 0x01	; 1
 15e:	79 f4       	brne	.+30     	; 0x17e <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
 160:	e8 2f       	mov	r30, r24
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	21 81       	ldd	r18, Z+1	; 0x01
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_Set_Pin_Direction+0x16>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_Set_Pin_Direction+0x12>
 176:	ba 01       	movw	r22, r20
 178:	62 2b       	or	r22, r18
 17a:	61 83       	std	Z+1, r22	; 0x01
 17c:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
 17e:	44 23       	and	r20, r20
 180:	79 f4       	brne	.+30     	; 0x1a0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
 182:	e8 2f       	mov	r30, r24
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	21 81       	ldd	r18, Z+1	; 0x01
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_Set_Pin_Direction+0x38>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_Set_Pin_Direction+0x34>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	61 83       	std	Z+1, r22	; 0x01
 1a0:	08 95       	ret

000001a2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
 1a2:	e8 2f       	mov	r30, r24
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	62 83       	std	Z+2, r22	; 0x02
}
 1a8:	08 95       	ret

000001aa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	79 f4       	brne	.+30     	; 0x1cc <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
 1ae:	e8 2f       	mov	r30, r24
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	22 81       	ldd	r18, Z+2	; 0x02
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_Set_Pin_Value+0x16>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_Set_Pin_Value+0x12>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	62 83       	std	Z+2, r22	; 0x02
 1ca:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 1cc:	44 23       	and	r20, r20
 1ce:	79 f4       	brne	.+30     	; 0x1ee <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 1d0:	e8 2f       	mov	r30, r24
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	22 81       	ldd	r18, Z+2	; 0x02
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_Set_Pin_Value+0x38>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_Set_Pin_Value+0x34>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	62 83       	std	Z+2, r22	; 0x02
 1ee:	08 95       	ret

000001f0 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	0f 92       	push	r0
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 202:	89 81       	ldd	r24, Y+1	; 0x01
}
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	0f 92       	push	r0
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 216:	e8 2f       	mov	r30, r24
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9c 01       	movw	r18, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_Get_Pin_value+0x1a>
 222:	35 95       	asr	r19
 224:	27 95       	ror	r18
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_Get_Pin_value+0x16>
 22a:	b9 01       	movw	r22, r18
 22c:	61 70       	andi	r22, 0x01	; 1
 22e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 230:	89 81       	ldd	r24, Y+1	; 0x01
}
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 23a:	e8 2f       	mov	r30, r24
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	22 81       	ldd	r18, Z+2	; 0x02
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Toggle_Pin+0x12>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Toggle_Pin+0xe>
 250:	ba 01       	movw	r22, r20
 252:	62 27       	eor	r22, r18
 254:	62 83       	std	Z+2, r22	; 0x02
}
 256:	08 95       	ret

00000258 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 258:	e8 2f       	mov	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 262:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 264:	62 95       	swap	r22
 266:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 268:	68 27       	eor	r22, r24
 26a:	62 83       	std	Z+2, r22	; 0x02
	
} 
 26c:	08 95       	ret

0000026e <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 26e:	e8 2f       	mov	r30, r24
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	82 81       	ldd	r24, Z+2	; 0x02
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	6f 70       	andi	r22, 0x0F	; 15
 27c:	68 27       	eor	r22, r24
 27e:	62 83       	std	Z+2, r22	; 0x02
	
}
 280:	08 95       	ret

00000282 <Timer0_CTC_Interrupt_Init>:


void Timer0_CTC_Interrupt_Init(u8 OCR0_Value)
{
	/* Set Output Compare Mode (CTC Mode) */
	CLR_BIT(TCCR0,WGM00);
 282:	93 b7       	in	r25, 0x33	; 51
 284:	9f 7b       	andi	r25, 0xBF	; 191
 286:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,WGM01);
 288:	93 b7       	in	r25, 0x33	; 51
 28a:	98 60       	ori	r25, 0x08	; 8
 28c:	93 bf       	out	0x33, r25	; 51
	
	/* Set prescaler For Timer0 */
	
	TCCR0&=0xF8;					/* clear CS00, CS01 and CS02 before write */
 28e:	93 b7       	in	r25, 0x33	; 51
 290:	98 7f       	andi	r25, 0xF8	; 248
 292:	93 bf       	out	0x33, r25	; 51
	TCCR0|=TIMER0_CLOCK_SELECT;		/* write Prescaler value without change others bits*/
 294:	93 b7       	in	r25, 0x33	; 51
 296:	97 60       	ori	r25, 0x07	; 7
 298:	93 bf       	out	0x33, r25	; 51

	/* Load Value to OCR0*/
	OCR0=OCR0_Value;
 29a:	8c bf       	out	0x3c, r24	; 60

	/* Set Timer0 Interrupt Enable*/
	SET_BIT(TIMSK,OCIE0);
 29c:	89 b7       	in	r24, 0x39	; 57
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	89 bf       	out	0x39, r24	; 57

	/* Set Global Interrupt (I-BIT) */
	SET_BIT(SREG,I_BIT);
 2a2:	8f b7       	in	r24, 0x3f	; 63
 2a4:	80 68       	ori	r24, 0x80	; 128
 2a6:	8f bf       	out	0x3f, r24	; 63
}
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
