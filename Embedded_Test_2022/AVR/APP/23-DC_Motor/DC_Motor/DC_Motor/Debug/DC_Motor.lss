
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027d  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000269  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000366  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define IN4	5

int main(void)
{

	DIO_Set_Port_Direction(D,OUTPUT);
  92:	80 e3       	ldi	r24, 0x30	; 48
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_Set_Port_Direction>
	DIO_Set_Pin_Value(D,EN1,HIGH);
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D,EN2,HIGH);
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
	
	Timer0_PWM_init();
  ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Timer0_PWM_init>
	unsigned char i;
    while(1)
    {
		DIO_Set_Pin_Value(D,IN1,HIGH);
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(D,IN2,LOW);
  bc:	80 e3       	ldi	r24, 0x30	; 48
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(D,IN3,LOW);
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	64 e0       	ldi	r22, 0x04	; 4
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(D,IN4,LOW);
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	65 e0       	ldi	r22, 0x05	; 5
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_Set_Pin_Value>
		for (i=0;i<255;i++)
  da:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Timer0_PWM_Change(i);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 8a 01 	call	0x314	; 0x314 <Timer0_PWM_Change>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e3       	ldi	r24, 0x3F	; 63
  e4:	9c e9       	ldi	r25, 0x9C	; 156
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x54>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5a>
  ec:	00 00       	nop
    {
		DIO_Set_Pin_Value(D,IN1,HIGH);
		DIO_Set_Pin_Value(D,IN2,LOW);
		DIO_Set_Pin_Value(D,IN3,LOW);
		DIO_Set_Pin_Value(D,IN4,LOW);
		for (i=0;i<255;i++)
  ee:	cf 5f       	subi	r28, 0xFF	; 255
  f0:	cf 3f       	cpi	r28, 0xFF	; 255
  f2:	a1 f7       	brne	.-24     	; 0xdc <main+0x4a>
			Timer0_PWM_Change(i);
			_delay_ms(20);
		}
		for (i=255;i>0;i--)
		{
			Timer0_PWM_Change(i);
  f4:	8c 2f       	mov	r24, r28
  f6:	0e 94 8a 01 	call	0x314	; 0x314 <Timer0_PWM_Change>
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9c e9       	ldi	r25, 0x9C	; 156
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x72>
 104:	00 00       	nop
		for (i=0;i<255;i++)
		{
			Timer0_PWM_Change(i);
			_delay_ms(20);
		}
		for (i=255;i>0;i--)
 106:	c1 50       	subi	r28, 0x01	; 1
 108:	a9 f7       	brne	.-22     	; 0xf4 <main+0x62>
 10a:	d3 cf       	rjmp	.-90     	; 0xb2 <main+0x20>

0000010c <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
 110:	e8 2f       	mov	r30, r24
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	81 83       	std	Z+1, r24	; 0x01
 118:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
 11a:	66 23       	and	r22, r22
 11c:	19 f4       	brne	.+6      	; 0x124 <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	08 95       	ret

00000126 <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	79 f4       	brne	.+30     	; 0x148 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	21 81       	ldd	r18, Z+1	; 0x01
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_Set_Pin_Direction+0x16>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_Set_Pin_Direction+0x12>
 140:	ba 01       	movw	r22, r20
 142:	62 2b       	or	r22, r18
 144:	61 83       	std	Z+1, r22	; 0x01
 146:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
 148:	44 23       	and	r20, r20
 14a:	79 f4       	brne	.+30     	; 0x16a <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
 14c:	e8 2f       	mov	r30, r24
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	21 81       	ldd	r18, Z+1	; 0x01
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_Set_Pin_Direction+0x38>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_Set_Pin_Direction+0x34>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	61 83       	std	Z+1, r22	; 0x01
 16a:	08 95       	ret

0000016c <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
 16c:	e8 2f       	mov	r30, r24
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	62 83       	std	Z+2, r22	; 0x02
}
 172:	08 95       	ret

00000174 <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	79 f4       	brne	.+30     	; 0x196 <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
 178:	e8 2f       	mov	r30, r24
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	22 81       	ldd	r18, Z+2	; 0x02
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_Set_Pin_Value+0x16>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_Set_Pin_Value+0x12>
 18e:	ba 01       	movw	r22, r20
 190:	62 2b       	or	r22, r18
 192:	62 83       	std	Z+2, r22	; 0x02
 194:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 196:	44 23       	and	r20, r20
 198:	79 f4       	brne	.+30     	; 0x1b8 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	22 81       	ldd	r18, Z+2	; 0x02
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ac 01       	movw	r20, r24
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Set_Pin_Value+0x38>
 1a8:	44 0f       	add	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Set_Pin_Value+0x34>
 1b0:	ba 01       	movw	r22, r20
 1b2:	60 95       	com	r22
 1b4:	62 23       	and	r22, r18
 1b6:	62 83       	std	Z+2, r22	; 0x02
 1b8:	08 95       	ret

000001ba <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	0f 92       	push	r0
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 1c4:	e8 2f       	mov	r30, r24
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ce:	0f 90       	pop	r0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	0f 92       	push	r0
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 1e0:	e8 2f       	mov	r30, r24
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9c 01       	movw	r18, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_Get_Pin_value+0x1a>
 1ec:	35 95       	asr	r19
 1ee:	27 95       	ror	r18
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_Get_Pin_value+0x16>
 1f4:	b9 01       	movw	r22, r18
 1f6:	61 70       	andi	r22, 0x01	; 1
 1f8:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 204:	e8 2f       	mov	r30, r24
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	22 81       	ldd	r18, Z+2	; 0x02
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	ac 01       	movw	r20, r24
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_Toggle_Pin+0x12>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_Toggle_Pin+0xe>
 21a:	ba 01       	movw	r22, r20
 21c:	62 27       	eor	r22, r18
 21e:	62 83       	std	Z+2, r22	; 0x02
}
 220:	08 95       	ret

00000222 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 222:	e8 2f       	mov	r30, r24
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	82 81       	ldd	r24, Z+2	; 0x02
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 22c:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 22e:	62 95       	swap	r22
 230:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 232:	68 27       	eor	r22, r24
 234:	62 83       	std	Z+2, r22	; 0x02
	
} 
 236:	08 95       	ret

00000238 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 238:	e8 2f       	mov	r30, r24
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	82 81       	ldd	r24, Z+2	; 0x02
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	6f 70       	andi	r22, 0x0F	; 15
 246:	68 27       	eor	r22, r24
 248:	62 83       	std	Z+2, r22	; 0x02
	
}
 24a:	08 95       	ret

0000024c <Timer0_CTC_Interrupt_Init>:


void Timer0_CTC_Interrupt_Init(u8 OCR0_Value)
{
	/* Set Output Compare Mode (CTC Mode) */
	CLR_BIT(TCCR0,WGM00);
 24c:	93 b7       	in	r25, 0x33	; 51
 24e:	9f 7b       	andi	r25, 0xBF	; 191
 250:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0,WGM01);
 252:	93 b7       	in	r25, 0x33	; 51
 254:	98 60       	ori	r25, 0x08	; 8
 256:	93 bf       	out	0x33, r25	; 51
	
	/* Set prescaler For Timer0 */
	
	TCCR0&=0xF8;					/* clear CS00, CS01 and CS02 before write */
 258:	93 b7       	in	r25, 0x33	; 51
 25a:	98 7f       	andi	r25, 0xF8	; 248
 25c:	93 bf       	out	0x33, r25	; 51
	TCCR0|=TIMER0_CLOCK_SELECT;		/* write Prescaler value without change others bits*/
 25e:	93 b7       	in	r25, 0x33	; 51
 260:	95 60       	ori	r25, 0x05	; 5
 262:	93 bf       	out	0x33, r25	; 51

	/* Load Value to OCR0*/
	OCR0=OCR0_Value;
 264:	8c bf       	out	0x3c, r24	; 60

	/* Set Timer0 Interrupt Enable*/
	SET_BIT(TIMSK,OCIE0);
 266:	89 b7       	in	r24, 0x39	; 57
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	89 bf       	out	0x39, r24	; 57

	/* Set Global Interrupt (I-BIT) */
	SET_BIT(SREG,I_BIT);
 26c:	8f b7       	in	r24, 0x3f	; 63
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8f bf       	out	0x3f, r24	; 63
}
 272:	08 95       	ret

00000274 <Timer0_Wave_Non_PWM>:


void Timer0_Wave_Non_PWM(u8 OCR0_Value,u8 OC0_Pin_Mode)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	d8 2f       	mov	r29, r24
 27a:	c6 2f       	mov	r28, r22
	
	/* Set OC0 PIN as OUTPUT Pin */
	DIO_Set_Pin_Direction(B,3,OUTPUT);
 27c:	86 e3       	ldi	r24, 0x36	; 54
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	0e 94 93 00 	call	0x126	; 0x126 <DIO_Set_Pin_Direction>
	/* Set CTC Mode in TCCR0 Register (WGM00=0, WGM01=1) */
	CLR_BIT(TCCR0,WGM00);
 286:	83 b7       	in	r24, 0x33	; 51
 288:	8f 7b       	andi	r24, 0xBF	; 191
 28a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 28c:	83 b7       	in	r24, 0x33	; 51
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	83 bf       	out	0x33, r24	; 51
	/* Set prescaler For Timer0 */
	TCCR0&=0xF8;					/* clear CS00, CS01 and CS02 before write */
 292:	83 b7       	in	r24, 0x33	; 51
 294:	88 7f       	andi	r24, 0xF8	; 248
 296:	83 bf       	out	0x33, r24	; 51
	TCCR0|=TIMER0_CLOCK_SELECT;		/* write Prescaler value without change others bits*/
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	85 60       	ori	r24, 0x05	; 5
 29c:	83 bf       	out	0x33, r24	; 51
	/* Load OCR0 Value	*/
	OCR0=OCR0_Value;
 29e:	dc bf       	out	0x3c, r29	; 60
	/* Set OC0 PIN Mode (Toggle or Clear or Set ) on compare Match */
	TCCR0|=GET_BIT(OC0_Pin_Mode,0)<<COM00;
 2a0:	43 b7       	in	r20, 0x33	; 51
 2a2:	2c 2f       	mov	r18, r28
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	21 70       	andi	r18, 0x01	; 1
 2a8:	30 70       	andi	r19, 0x00	; 0
 2aa:	c9 01       	movw	r24, r18
 2ac:	82 95       	swap	r24
 2ae:	92 95       	swap	r25
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	98 27       	eor	r25, r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	84 2b       	or	r24, r20
 2ba:	83 bf       	out	0x33, r24	; 51
	TCCR0|=GET_BIT(OC0_Pin_Mode,1)<<COM01;
 2bc:	23 b7       	in	r18, 0x33	; 51
 2be:	c6 95       	lsr	r28
 2c0:	8c 2f       	mov	r24, r28
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	81 70       	andi	r24, 0x01	; 1
 2c6:	90 70       	andi	r25, 0x00	; 0
 2c8:	ec 01       	movw	r28, r24
 2ca:	cc 0f       	add	r28, r28
 2cc:	dd 1f       	adc	r29, r29
 2ce:	c2 95       	swap	r28
 2d0:	d2 95       	swap	r29
 2d2:	d0 7f       	andi	r29, 0xF0	; 240
 2d4:	dc 27       	eor	r29, r28
 2d6:	c0 7f       	andi	r28, 0xF0	; 240
 2d8:	dc 27       	eor	r29, r28
 2da:	c2 2b       	or	r28, r18
 2dc:	c3 bf       	out	0x33, r28	; 51
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <Timer0_PWM_init>:
void Timer0_PWM_init(void)
{
	/* Set OC0 PIN(PB3) as OUTPUT PIN */
	DIO_Set_Pin_Direction(B,3,OUTPUT);
 2e4:	86 e3       	ldi	r24, 0x36	; 54
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	0e 94 93 00 	call	0x126	; 0x126 <DIO_Set_Pin_Direction>
	/* Set Fast PWM Mode in TCCR0 Register (WGM00=1, WGM01=1) */
	SET_BIT(TCCR0,WGM00);
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	88 60       	ori	r24, 0x08	; 8
 2f8:	83 bf       	out	0x33, r24	; 51
	/* Set prescaler For Timer0 */
	TCCR0&=0xF8;					/* clear CS00, CS01 and CS02 before write */
 2fa:	83 b7       	in	r24, 0x33	; 51
 2fc:	88 7f       	andi	r24, 0xF8	; 248
 2fe:	83 bf       	out	0x33, r24	; 51
	TCCR0|=TIMER0_CLOCK_SELECT;		/* write Prescaler value without change others bits*/
 300:	83 b7       	in	r24, 0x33	; 51
 302:	85 60       	ori	r24, 0x05	; 5
 304:	83 bf       	out	0x33, r24	; 51
	
	/* Set OC0 PIN Mode (clear on Compare Match, set on Bottom >> COM00=0,COM01=1	 >> Non-Inverting Mode
						 Set on Compare Match, Clear on Bottom >> COM00=1,COM01=1    >> inverting Mode */
	CLR_BIT(TCCR0,COM00);
 306:	83 b7       	in	r24, 0x33	; 51
 308:	8f 7e       	andi	r24, 0xEF	; 239
 30a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	80 62       	ori	r24, 0x20	; 32
 310:	83 bf       	out	0x33, r24	; 51
}
 312:	08 95       	ret

00000314 <Timer0_PWM_Change>:


void Timer0_PWM_Change(u8 PWM_Value)
{
	/* Load OCR0 Value	*/
	OCR0=PWM_Value;
 314:	8c bf       	out	0x3c, r24	; 60
}
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
