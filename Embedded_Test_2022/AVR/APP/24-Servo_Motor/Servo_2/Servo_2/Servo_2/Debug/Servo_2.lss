
Servo_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000444  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000115  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <stdio.h>		/* Include std. library file */
#include <util/delay.h>		/* Include Delay header file */

int main(void)
{
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
  92:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;		/* Set timer1 count zero */
  94:	1d bc       	out	0x2d, r1	; 45
  96:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
  98:	83 ec       	ldi	r24, 0xC3	; 195
  9a:	99 e0       	ldi	r25, 0x09	; 9
  9c:	97 bd       	out	0x27, r25	; 39
  9e:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  a0:	82 e8       	ldi	r24, 0x82	; 130
  a2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  a4:	8b e1       	ldi	r24, 0x1B	; 27
  a6:	8e bd       	out	0x2e, r24	; 46
	while(1)
	{
		OCR1A = 65;	/* Set servo shaft at -90° position */
  a8:	41 e4       	ldi	r20, 0x41	; 65
  aa:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(1500);
		OCR1A = 175;	/* Set servo shaft at 0° position */
  ac:	2f ea       	ldi	r18, 0xAF	; 175
  ae:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1500);
		OCR1A = 300;	/* Set servo at +90° position */
  b0:	6c e2       	ldi	r22, 0x2C	; 44
  b2:	71 e0       	ldi	r23, 0x01	; 1
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	while(1)
	{
		OCR1A = 65;	/* Set servo shaft at -90° position */
  b4:	5b bd       	out	0x2b, r21	; 43
  b6:	4a bd       	out	0x2a, r20	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	9e e9       	ldi	r25, 0x9E	; 158
  bc:	a4 e2       	ldi	r26, 0x24	; 36
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	a0 40       	sbci	r26, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x36>
  c8:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 175;	/* Set servo shaft at 0° position */
  ca:	3b bd       	out	0x2b, r19	; 43
  cc:	2a bd       	out	0x2a, r18	; 42
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9e e9       	ldi	r25, 0x9E	; 158
  d2:	a4 e2       	ldi	r26, 0x24	; 36
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	a0 40       	sbci	r26, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4c>
  de:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 300;	/* Set servo at +90° position */
  e0:	7b bd       	out	0x2b, r23	; 43
  e2:	6a bd       	out	0x2a, r22	; 42
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	9e e9       	ldi	r25, 0x9E	; 158
  e8:	a4 e2       	ldi	r26, 0x24	; 36
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x58>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x62>
  f4:	00 00       	nop
  f6:	de cf       	rjmp	.-68     	; 0xb4 <main+0x22>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
