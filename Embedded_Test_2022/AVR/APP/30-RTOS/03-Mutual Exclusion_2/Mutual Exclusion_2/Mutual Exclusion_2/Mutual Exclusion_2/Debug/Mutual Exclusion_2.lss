
Mutual Exclusion_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000027d2  00002866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ba  00800072  00800072  00002878  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000030b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003626  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c50  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001397  00000000  00000000  00007486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  00008820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015c8  00000000  00000000  000093ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd8  00000000  00000000  0000a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000e98c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 04 	call	0x844	; 0x844 <main>
      8a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
      92:	44 23       	and	r20, r20
      94:	41 f4       	brne	.+16     	; 0xa6 <prvTestWaitCondition+0x14>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
      96:	68 23       	and	r22, r24
      98:	79 23       	and	r23, r25
		{
			xWaitConditionMet = pdTRUE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	61 15       	cp	r22, r1
      9e:	71 05       	cpc	r23, r1
      a0:	51 f4       	brne	.+20     	; 0xb6 <prvTestWaitCondition+0x24>
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
      a6:	9b 01       	movw	r18, r22
      a8:	28 23       	and	r18, r24
      aa:	39 23       	and	r19, r25
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	62 17       	cp	r22, r18
      b0:	73 07       	cpc	r23, r19
      b2:	09 f0       	breq	.+2      	; 0xb6 <prvTestWaitCondition+0x24>
      b4:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
      b6:	08 95       	ret

000000b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
      bc:	8b e0       	ldi	r24, 0x0B	; 11
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
      c4:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	31 f0       	breq	.+12     	; 0xd6 <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
      ca:	fc 01       	movw	r30, r24
      cc:	11 92       	st	Z+, r1
      ce:	11 92       	st	Z+, r1
      d0:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
      d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
      d6:	8c 2f       	mov	r24, r28
      d8:	9d 2f       	mov	r25, r29
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	5c 01       	movw	r10, r24
      f6:	6b 01       	movw	r12, r22
      f8:	e4 2e       	mov	r14, r20
      fa:	f2 2e       	mov	r15, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
      fc:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     100:	f5 01       	movw	r30, r10
     102:	c0 81       	ld	r28, Z
     104:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     106:	ce 01       	movw	r24, r28
     108:	b6 01       	movw	r22, r12
     10a:	4f 2d       	mov	r20, r15
     10c:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     110:	88 23       	and	r24, r24
     112:	51 f0       	breq	.+20     	; 0x128 <xEventGroupWaitBits+0x48>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     114:	ee 20       	and	r14, r14
     116:	01 f1       	breq	.+64     	; 0x158 <xEventGroupWaitBits+0x78>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     118:	c0 94       	com	r12
     11a:	d0 94       	com	r13
     11c:	cc 22       	and	r12, r28
     11e:	dd 22       	and	r13, r29
     120:	f5 01       	movw	r30, r10
     122:	d1 82       	std	Z+1, r13	; 0x01
     124:	c0 82       	st	Z, r12
     126:	18 c0       	rjmp	.+48     	; 0x158 <xEventGroupWaitBits+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     128:	01 15       	cp	r16, r1
     12a:	11 05       	cpc	r17, r1
     12c:	a9 f0       	breq	.+42     	; 0x158 <xEventGroupWaitBits+0x78>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     12e:	ee 20       	and	r14, r14
     130:	19 f4       	brne	.+6      	; 0x138 <xEventGroupWaitBits+0x58>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <xEventGroupWaitBits+0x5c>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     13c:	f1 10       	cpse	r15, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     13e:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     140:	6c 29       	or	r22, r12
     142:	7d 29       	or	r23, r13
     144:	c5 01       	movw	r24, r10
     146:	02 96       	adiw	r24, 0x02	; 2
     148:	a8 01       	movw	r20, r16
     14a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     14e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     152:	88 23       	and	r24, r24
     154:	39 f4       	brne	.+14     	; 0x164 <xEventGroupWaitBits+0x84>
     156:	04 c0       	rjmp	.+8      	; 0x160 <xEventGroupWaitBits+0x80>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     158:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
     15c:	ce 01       	movw	r24, r28
     15e:	21 c0       	rjmp	.+66     	; 0x1a2 <xEventGroupWaitBits+0xc2>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     160:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     164:	0e 94 5f 11 	call	0x22be	; 0x22be <uxTaskResetEventItemValue>
     168:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     16a:	91 fd       	sbrc	r25, 1
     16c:	18 c0       	rjmp	.+48     	; 0x19e <xEventGroupWaitBits+0xbe>
		{
			taskENTER_CRITICAL();
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     174:	f5 01       	movw	r30, r10
     176:	c0 81       	ld	r28, Z
     178:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     17a:	ce 01       	movw	r24, r28
     17c:	b6 01       	movw	r22, r12
     17e:	4f 2d       	mov	r20, r15
     180:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>
     184:	88 23       	and	r24, r24
     186:	49 f0       	breq	.+18     	; 0x19a <xEventGroupWaitBits+0xba>
				{
					if( xClearOnExit != pdFALSE )
     188:	ee 20       	and	r14, r14
     18a:	39 f0       	breq	.+14     	; 0x19a <xEventGroupWaitBits+0xba>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     18c:	c0 94       	com	r12
     18e:	d0 94       	com	r13
     190:	cc 22       	and	r12, r28
     192:	dd 22       	and	r13, r29
     194:	f5 01       	movw	r30, r10
     196:	d1 82       	std	Z+1, r13	; 0x01
     198:	c0 82       	st	Z, r12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     19e:	ce 01       	movw	r24, r28
     1a0:	90 70       	andi	r25, 0x00	; 0
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	ef 90       	pop	r14
     1ae:	df 90       	pop	r13
     1b0:	cf 90       	pop	r12
     1b2:	bf 90       	pop	r11
     1b4:	af 90       	pop	r10
     1b6:	08 95       	ret

000001b8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     1b8:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     1c4:	60 95       	com	r22
     1c6:	70 95       	com	r23
     1c8:	68 23       	and	r22, r24
     1ca:	79 23       	and	r23, r25
     1cc:	71 83       	std	Z+1, r23	; 0x01
     1ce:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     1d4:	08 95       	ret

000001d6 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     1d6:	fc 01       	movw	r30, r24
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	08 95       	ret

000001de <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
     1f4:	eb 01       	movw	r28, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	cf 2e       	mov	r12, r31
     1fc:	dd 24       	eor	r13, r13
     1fe:	f0 2d       	mov	r31, r0
     200:	c8 0e       	add	r12, r24
     202:	d9 1e       	adc	r13, r25
	vTaskSuspendAll();
     204:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     208:	d8 01       	movw	r26, r16
     20a:	17 96       	adiw	r26, 0x07	; 7
     20c:	ed 91       	ld	r30, X+
     20e:	fc 91       	ld	r31, X
     210:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     212:	8d 91       	ld	r24, X+
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	8c 2b       	or	r24, r28
     21a:	9d 2b       	or	r25, r29
     21c:	11 96       	adiw	r26, 0x01	; 1
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     222:	ce 16       	cp	r12, r30
     224:	df 06       	cpc	r13, r31
     226:	c1 f1       	breq	.+112    	; 0x298 <xEventGroupSetBits+0xba>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     228:	aa 24       	eor	r10, r10
     22a:	bb 24       	eor	r11, r11
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     22c:	ff 24       	eor	r15, r15
     22e:	f3 94       	inc	r15
     230:	ee 24       	eor	r14, r14
     232:	01 c0       	rjmp	.+2      	; 0x236 <xEventGroupSetBits+0x58>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     234:	fe 01       	movw	r30, r28
		{
			pxNext = listGET_NEXT( pxListItem );
     236:	c2 81       	ldd	r28, Z+2	; 0x02
     238:	d3 81       	ldd	r29, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     23e:	bc 01       	movw	r22, r24
     240:	60 70       	andi	r22, 0x00	; 0
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     242:	9c 01       	movw	r18, r24
     244:	30 70       	andi	r19, 0x00	; 0

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     246:	92 fd       	sbrc	r25, 2
     248:	0b c0       	rjmp	.+22     	; 0x260 <xEventGroupSetBits+0x82>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     24a:	d8 01       	movw	r26, r16
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 23       	and	r24, r18
     254:	93 23       	and	r25, r19
				{
					xMatchFound = pdTRUE;
     256:	4f 2d       	mov	r20, r15
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	69 f4       	brne	.+26     	; 0x276 <xEventGroupSetBits+0x98>
     25c:	4e 2d       	mov	r20, r14
     25e:	0b c0       	rjmp	.+22     	; 0x276 <xEventGroupSetBits+0x98>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     260:	d8 01       	movw	r26, r16
     262:	8d 91       	ld	r24, X+
     264:	9c 91       	ld	r25, X
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	82 23       	and	r24, r18
     26a:	93 23       	and	r25, r19
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     26c:	4f 2d       	mov	r20, r15
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <xEventGroupSetBits+0x98>
     274:	4e 2d       	mov	r20, r14
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     276:	44 23       	and	r20, r20
     278:	59 f0       	breq	.+22     	; 0x290 <xEventGroupSetBits+0xb2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     27a:	70 ff       	sbrs	r23, 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <xEventGroupSetBits+0xa4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     27e:	a2 2a       	or	r10, r18
     280:	b3 2a       	or	r11, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     282:	d8 01       	movw	r26, r16
     284:	6d 91       	ld	r22, X+
     286:	7c 91       	ld	r23, X
     288:	72 60       	ori	r23, 0x02	; 2
     28a:	cf 01       	movw	r24, r30
     28c:	0e 94 3d 10 	call	0x207a	; 0x207a <xTaskRemoveFromUnorderedEventList>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     290:	cc 16       	cp	r12, r28
     292:	dd 06       	cpc	r13, r29
     294:	79 f6       	brne	.-98     	; 0x234 <xEventGroupSetBits+0x56>
     296:	02 c0       	rjmp	.+4      	; 0x29c <xEventGroupSetBits+0xbe>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     298:	aa 24       	eor	r10, r10
     29a:	bb 24       	eor	r11, r11
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     29c:	c5 01       	movw	r24, r10
     29e:	80 95       	com	r24
     2a0:	90 95       	com	r25
     2a2:	f8 01       	movw	r30, r16
     2a4:	a0 80       	ld	r10, Z
     2a6:	b1 80       	ldd	r11, Z+1	; 0x01
     2a8:	a8 22       	and	r10, r24
     2aa:	b9 22       	and	r11, r25
     2ac:	b1 82       	std	Z+1, r11	; 0x01
     2ae:	a0 82       	st	Z, r10
	}
	( void ) xTaskResumeAll();
     2b0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     2b4:	d8 01       	movw	r26, r16
     2b6:	8c 91       	ld	r24, X
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	11 97       	sbiw	r26, 0x01	; 1
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	08 95       	ret

000002d4 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	6c 01       	movw	r12, r24
     2ea:	eb 01       	movw	r28, r22
     2ec:	7a 01       	movw	r14, r20
     2ee:	59 01       	movw	r10, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     2f0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     2f4:	f6 01       	movw	r30, r12
     2f6:	00 81       	ld	r16, Z
     2f8:	11 81       	ldd	r17, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     2fa:	c6 01       	movw	r24, r12
     2fc:	be 01       	movw	r22, r28
     2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     302:	c0 2b       	or	r28, r16
     304:	d1 2b       	or	r29, r17
     306:	c7 01       	movw	r24, r14
     308:	8c 23       	and	r24, r28
     30a:	9d 23       	and	r25, r29
     30c:	8e 15       	cp	r24, r14
     30e:	9f 05       	cpc	r25, r15
     310:	51 f4       	brne	.+20     	; 0x326 <xEventGroupSync+0x52>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     312:	80 95       	com	r24
     314:	90 95       	com	r25
     316:	f6 01       	movw	r30, r12
     318:	20 81       	ld	r18, Z
     31a:	31 81       	ldd	r19, Z+1	; 0x01
     31c:	82 23       	and	r24, r18
     31e:	93 23       	and	r25, r19
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	12 c0       	rjmp	.+36     	; 0x34a <xEventGroupSync+0x76>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     326:	a1 14       	cp	r10, r1
     328:	b1 04       	cpc	r11, r1
     32a:	61 f0       	breq	.+24     	; 0x344 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     32c:	b7 01       	movw	r22, r14
     32e:	75 60       	ori	r23, 0x05	; 5
     330:	c6 01       	movw	r24, r12
     332:	02 96       	adiw	r24, 0x02	; 2
     334:	a5 01       	movw	r20, r10
     336:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     33a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     33e:	88 23       	and	r24, r24
     340:	49 f4       	brne	.+18     	; 0x354 <xEventGroupSync+0x80>
     342:	06 c0       	rjmp	.+12     	; 0x350 <xEventGroupSync+0x7c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     344:	f6 01       	movw	r30, r12
     346:	c0 81       	ld	r28, Z
     348:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     34a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
     34e:	1c c0       	rjmp	.+56     	; 0x388 <xEventGroupSync+0xb4>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     350:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     354:	0e 94 5f 11 	call	0x22be	; 0x22be <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     358:	91 fd       	sbrc	r25, 1
     35a:	14 c0       	rjmp	.+40     	; 0x384 <xEventGroupSync+0xb0>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     362:	f6 01       	movw	r30, r12
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     368:	97 01       	movw	r18, r14
     36a:	28 23       	and	r18, r24
     36c:	39 23       	and	r19, r25
     36e:	2e 15       	cp	r18, r14
     370:	3f 05       	cpc	r19, r15
     372:	31 f4       	brne	.+12     	; 0x380 <xEventGroupSync+0xac>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     374:	20 95       	com	r18
     376:	30 95       	com	r19
     378:	28 23       	and	r18, r24
     37a:	39 23       	and	r19, r25
     37c:	31 83       	std	Z+1, r19	; 0x01
     37e:	20 83       	st	Z, r18
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     384:	ec 01       	movw	r28, r24
     386:	d0 70       	andi	r29, 0x00	; 0
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     388:	8c 2f       	mov	r24, r28
     38a:	9d 2f       	mov	r25, r29
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	08 95       	ret

000003a2 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     3a8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	88 23       	and	r24, r24
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <vEventGroupDelete+0x22>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	72 e0       	ldi	r23, 0x02	; 2
     3ba:	0e 94 3d 10 	call	0x207a	; 0x207a <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	88 23       	and	r24, r24
     3c2:	b9 f7       	brne	.-18     	; 0x3b2 <vEventGroupDelete+0x10>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     3ca:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     3d4:	ba 01       	movw	r22, r20
     3d6:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>
}
     3da:	08 95       	ret

000003dc <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     3dc:	ba 01       	movw	r22, r20
     3de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <xEventGroupClearBits>
}
     3e2:	08 95       	ret

000003e4 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
     3e8:	e8 2f       	mov	r30, r24
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	81 83       	std	Z+1, r24	; 0x01
     3f0:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
     3f2:	66 23       	and	r22, r22
     3f4:	19 f4       	brne	.+6      	; 0x3fc <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
     3f6:	e8 2f       	mov	r30, r24
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	08 95       	ret

000003fe <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
     3fe:	41 30       	cpi	r20, 0x01	; 1
     400:	79 f4       	brne	.+30     	; 0x420 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
     402:	e8 2f       	mov	r30, r24
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	21 81       	ldd	r18, Z+1	; 0x01
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	ac 01       	movw	r20, r24
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_Set_Pin_Direction+0x16>
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	6a 95       	dec	r22
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_Set_Pin_Direction+0x12>
     418:	ba 01       	movw	r22, r20
     41a:	62 2b       	or	r22, r18
     41c:	61 83       	std	Z+1, r22	; 0x01
     41e:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
     420:	44 23       	and	r20, r20
     422:	79 f4       	brne	.+30     	; 0x442 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
     424:	e8 2f       	mov	r30, r24
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	21 81       	ldd	r18, Z+1	; 0x01
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	ac 01       	movw	r20, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_Set_Pin_Direction+0x38>
     432:	44 0f       	add	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_Set_Pin_Direction+0x34>
     43a:	ba 01       	movw	r22, r20
     43c:	60 95       	com	r22
     43e:	62 23       	and	r22, r18
     440:	61 83       	std	Z+1, r22	; 0x01
     442:	08 95       	ret

00000444 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	62 83       	std	Z+2, r22	; 0x02
}
     44a:	08 95       	ret

0000044c <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	79 f4       	brne	.+30     	; 0x46e <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
     450:	e8 2f       	mov	r30, r24
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	22 81       	ldd	r18, Z+2	; 0x02
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_Set_Pin_Value+0x16>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_Set_Pin_Value+0x12>
     466:	ba 01       	movw	r22, r20
     468:	62 2b       	or	r22, r18
     46a:	62 83       	std	Z+2, r22	; 0x02
     46c:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
     46e:	44 23       	and	r20, r20
     470:	79 f4       	brne	.+30     	; 0x490 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
     472:	e8 2f       	mov	r30, r24
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	ac 01       	movw	r20, r24
     47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_Set_Pin_Value+0x38>
     480:	44 0f       	add	r20, r20
     482:	55 1f       	adc	r21, r21
     484:	6a 95       	dec	r22
     486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_Set_Pin_Value+0x34>
     488:	ba 01       	movw	r22, r20
     48a:	60 95       	com	r22
     48c:	62 23       	and	r22, r18
     48e:	62 83       	std	Z+2, r22	; 0x02
     490:	08 95       	ret

00000492 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
     49c:	e8 2f       	mov	r30, r24
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	89 83       	std	Y+1, r24	; 0x01
	return Value;
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9c 01       	movw	r18, r24
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_Get_Pin_value+0x1a>
     4c4:	35 95       	asr	r19
     4c6:	27 95       	ror	r18
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_Get_Pin_value+0x16>
     4cc:	b9 01       	movw	r22, r18
     4ce:	61 70       	andi	r22, 0x01	; 1
     4d0:	69 83       	std	Y+1, r22	; 0x01
	return Value;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	22 81       	ldd	r18, Z+2	; 0x02
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_Toggle_Pin+0x12>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_Toggle_Pin+0xe>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 27       	eor	r22, r18
     4f6:	62 83       	std	Z+2, r22	; 0x02
}
     4f8:	08 95       	ret

000004fa <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
     4fa:	e8 2f       	mov	r30, r24
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
     504:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
     506:	62 95       	swap	r22
     508:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
     50a:	68 27       	eor	r22, r24
     50c:	62 83       	std	Z+2, r22	; 0x02
	
} 
     50e:	08 95       	ret

00000510 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
     510:	e8 2f       	mov	r30, r24
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	6f 70       	andi	r22, 0x0F	; 15
     51e:	68 27       	eor	r22, r24
     520:	62 83       	std	Z+2, r22	; 0x02
	
}
     522:	08 95       	ret

00000524 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     52e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     532:	80 91 72 00 	lds	r24, 0x0072
     536:	88 23       	and	r24, r24
     538:	f9 f4       	brne	.+62     	; 0x578 <pvPortMalloc+0x54>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     53a:	8c e7       	ldi	r24, 0x7C	; 124
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 74 00 	sts	0x0074, r25
     542:	80 93 73 00 	sts	0x0073, r24
	xStart.xBlockSize = ( size_t ) 0;
     546:	10 92 76 00 	sts	0x0076, r1
     54a:	10 92 75 00 	sts	0x0075, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     54e:	8f e1       	ldi	r24, 0x1F	; 31
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	90 93 7a 00 	sts	0x007A, r25
     556:	80 93 79 00 	sts	0x0079, r24
	xEnd.pxNextFreeBlock = NULL;
     55a:	e9 e7       	ldi	r30, 0x79	; 121
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	12 92       	st	-Z, r1
     560:	12 92       	st	-Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     562:	90 93 7f 00 	sts	0x007F, r25
     566:	80 93 7e 00 	sts	0x007E, r24
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     56a:	f0 93 7d 00 	sts	0x007D, r31
     56e:	e0 93 7c 00 	sts	0x007C, r30
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 72 00 	sts	0x0072, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     578:	20 97       	sbiw	r28, 0x00	; 0
     57a:	09 f4       	brne	.+2      	; 0x57e <pvPortMalloc+0x5a>
     57c:	62 c0       	rjmp	.+196    	; 0x642 <pvPortMalloc+0x11e>
		{
			xWantedSize += heapSTRUCT_SIZE;
     57e:	9e 01       	movw	r18, r28
     580:	2c 5f       	subi	r18, 0xFC	; 252
     582:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     584:	23 96       	adiw	r28, 0x03	; 3
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	ce 31       	cpi	r28, 0x1E	; 30
     58a:	d8 07       	cpc	r29, r24
     58c:	08 f0       	brcs	.+2      	; 0x590 <pvPortMalloc+0x6c>
     58e:	5c c0       	rjmp	.+184    	; 0x648 <pvPortMalloc+0x124>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     590:	e0 91 73 00 	lds	r30, 0x0073
     594:	f0 91 74 00 	lds	r31, 0x0074

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     598:	a3 e7       	ldi	r26, 0x73	; 115
     59a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <pvPortMalloc+0x7e>
     59e:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     5a0:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	82 17       	cp	r24, r18
     5a8:	93 07       	cpc	r25, r19
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <pvPortMalloc+0x90>
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	a9 f7       	brne	.-22     	; 0x59e <pvPortMalloc+0x7a>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5b4:	c0 e0       	ldi	r28, 0x00	; 0
     5b6:	e7 37       	cpi	r30, 0x77	; 119
     5b8:	fc 07       	cpc	r31, r28
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x9a>
     5bc:	48 c0       	rjmp	.+144    	; 0x64e <pvPortMalloc+0x12a>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	11 97       	sbiw	r26, 0x01	; 1
     5c4:	8c 01       	movw	r16, r24
     5c6:	0c 5f       	subi	r16, 0xFC	; 252
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	89 30       	cpi	r24, 0x09	; 9
     5de:	91 05       	cpc	r25, r1
     5e0:	18 f1       	brcs	.+70     	; 0x628 <pvPortMalloc+0x104>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5e2:	af 01       	movw	r20, r30
     5e4:	42 0f       	add	r20, r18
     5e6:	53 1f       	adc	r21, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5e8:	da 01       	movw	r26, r20
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	9c 93       	st	X, r25
     5ee:	8e 93       	st	-X, r24
     5f0:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     5f2:	33 83       	std	Z+3, r19	; 0x03
     5f4:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	2d 91       	ld	r18, X+
     5fa:	3c 91       	ld	r19, X
     5fc:	13 97       	sbiw	r26, 0x03	; 3
     5fe:	63 e7       	ldi	r22, 0x73	; 115
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	01 c0       	rjmp	.+2      	; 0x606 <pvPortMalloc+0xe2>
     604:	bd 01       	movw	r22, r26
     606:	eb 01       	movw	r28, r22
     608:	a8 81       	ld	r26, Y
     60a:	b9 81       	ldd	r27, Y+1	; 0x01
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	8d 91       	ld	r24, X+
     610:	9c 91       	ld	r25, X
     612:	13 97       	sbiw	r26, 0x03	; 3
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	a8 f3       	brcs	.-22     	; 0x604 <pvPortMalloc+0xe0>
     61a:	ea 01       	movw	r28, r20
     61c:	b9 83       	std	Y+1, r27	; 0x01
     61e:	a8 83       	st	Y, r26
     620:	db 01       	movw	r26, r22
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	5c 93       	st	X, r21
     626:	4e 93       	st	-X, r20
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     628:	80 91 60 00 	lds	r24, 0x0060
     62c:	90 91 61 00 	lds	r25, 0x0061
     630:	22 81       	ldd	r18, Z+2	; 0x02
     632:	33 81       	ldd	r19, Z+3	; 0x03
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	90 93 61 00 	sts	0x0061, r25
     63c:	80 93 60 00 	sts	0x0060, r24
     640:	08 c0       	rjmp	.+16     	; 0x652 <pvPortMalloc+0x12e>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	05 c0       	rjmp	.+10     	; 0x652 <pvPortMalloc+0x12e>
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <pvPortMalloc+0x12e>
     64e:	00 e0       	ldi	r16, 0x00	; 0
     650:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     652:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     656:	80 2f       	mov	r24, r16
     658:	91 2f       	mov	r25, r17
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	39 f1       	breq	.+78     	; 0x6c0 <vPortFree+0x5c>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     672:	8c 01       	movw	r16, r24
     674:	04 50       	subi	r16, 0x04	; 4
     676:	10 40       	sbci	r17, 0x00	; 0

		vTaskSuspendAll();
     678:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     67c:	f8 01       	movw	r30, r16
     67e:	22 81       	ldd	r18, Z+2	; 0x02
     680:	33 81       	ldd	r19, Z+3	; 0x03
     682:	a3 e7       	ldi	r26, 0x73	; 115
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	01 c0       	rjmp	.+2      	; 0x68a <vPortFree+0x26>
     688:	df 01       	movw	r26, r30
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	11 97       	sbiw	r26, 0x01	; 1
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	82 17       	cp	r24, r18
     696:	93 07       	cpc	r25, r19
     698:	b8 f3       	brcs	.-18     	; 0x688 <vPortFree+0x24>
     69a:	24 97       	sbiw	r28, 0x04	; 4
     69c:	f9 83       	std	Y+1, r31	; 0x01
     69e:	e8 83       	st	Y, r30
     6a0:	0d 93       	st	X+, r16
     6a2:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     6a4:	80 91 60 00 	lds	r24, 0x0060
     6a8:	90 91 61 00 	lds	r25, 0x0061
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	3b 81       	ldd	r19, Y+3	; 0x03
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	90 93 61 00 	sts	0x0061, r25
     6b8:	80 93 60 00 	sts	0x0060, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6bc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
	}
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     6ca:	80 91 60 00 	lds	r24, 0x0060
     6ce:	90 91 61 00 	lds	r25, 0x0061
     6d2:	08 95       	ret

000006d4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     6d4:	08 95       	ret

000006d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d8:	03 96       	adiw	r24, 0x03	; 3
     6da:	92 83       	std	Z+2, r25	; 0x02
     6dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	3f ef       	ldi	r19, 0xFF	; 255
     6e2:	34 83       	std	Z+4, r19	; 0x04
     6e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e6:	96 83       	std	Z+6, r25	; 0x06
     6e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6ea:	90 87       	std	Z+8, r25	; 0x08
     6ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6ee:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     6f0:	08 95       	ret

000006f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6f2:	fc 01       	movw	r30, r24
     6f4:	11 86       	std	Z+9, r1	; 0x09
     6f6:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     6f8:	08 95       	ret

000006fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     700:	dc 01       	movw	r26, r24
     702:	11 96       	adiw	r26, 0x01	; 1
     704:	cd 91       	ld	r28, X+
     706:	dc 91       	ld	r29, X
     708:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     70a:	d3 83       	std	Z+3, r29	; 0x03
     70c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	3d 81       	ldd	r19, Y+5	; 0x05
     712:	35 83       	std	Z+5, r19	; 0x05
     714:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     716:	ac 81       	ldd	r26, Y+4	; 0x04
     718:	bd 81       	ldd	r27, Y+5	; 0x05
     71a:	13 96       	adiw	r26, 0x03	; 3
     71c:	7c 93       	st	X, r23
     71e:	6e 93       	st	-X, r22
     720:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     722:	7d 83       	std	Y+5, r23	; 0x05
     724:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	20 83       	st	Z, r18
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ac 01       	movw	r20, r24
     73e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     740:	28 81       	ld	r18, Y
     742:	39 81       	ldd	r19, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	2f 3f       	cpi	r18, 0xFF	; 255
     748:	38 07       	cpc	r19, r24
     74a:	21 f4       	brne	.+8      	; 0x754 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     74c:	fa 01       	movw	r30, r20
     74e:	a7 81       	ldd	r26, Z+7	; 0x07
     750:	b0 85       	ldd	r27, Z+8	; 0x08
     752:	0d c0       	rjmp	.+26     	; 0x76e <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     754:	da 01       	movw	r26, r20
     756:	13 96       	adiw	r26, 0x03	; 3
     758:	01 c0       	rjmp	.+2      	; 0x75c <vListInsert+0x24>
     75a:	df 01       	movw	r26, r30
     75c:	12 96       	adiw	r26, 0x02	; 2
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	13 97       	sbiw	r26, 0x03	; 3
     764:	80 81       	ld	r24, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	b0 f7       	brcc	.-20     	; 0x75a <vListInsert+0x22>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	13 97       	sbiw	r26, 0x03	; 3
     776:	fb 83       	std	Y+3, r31	; 0x03
     778:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     77a:	d5 83       	std	Z+5, r29	; 0x05
     77c:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     77e:	bd 83       	std	Y+5, r27	; 0x05
     780:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     782:	13 96       	adiw	r26, 0x03	; 3
     784:	dc 93       	st	X, r29
     786:	ce 93       	st	-X, r28
     788:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     78a:	59 87       	std	Y+9, r21	; 0x09
     78c:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     78e:	fa 01       	movw	r30, r20
     790:	80 81       	ld	r24, Z
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 83       	st	Z, r24
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7a2:	c0 85       	ldd	r28, Z+8	; 0x08
     7a4:	d1 85       	ldd	r29, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7a6:	a2 81       	ldd	r26, Z+2	; 0x02
     7a8:	b3 81       	ldd	r27, Z+3	; 0x03
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	95 81       	ldd	r25, Z+5	; 0x05
     7ae:	15 96       	adiw	r26, 0x05	; 5
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7b6:	a4 81       	ldd	r26, Z+4	; 0x04
     7b8:	b5 81       	ldd	r27, Z+5	; 0x05
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	13 96       	adiw	r26, 0x03	; 3
     7c0:	9c 93       	st	X, r25
     7c2:	8e 93       	st	-X, r24
     7c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7c6:	a9 81       	ldd	r26, Y+1	; 0x01
     7c8:	ba 81       	ldd	r27, Y+2	; 0x02
     7ca:	ae 17       	cp	r26, r30
     7cc:	bf 07       	cpc	r27, r31
     7ce:	31 f4       	brne	.+12     	; 0x7dc <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7d0:	14 96       	adiw	r26, 0x04	; 4
     7d2:	8d 91       	ld	r24, X+
     7d4:	9c 91       	ld	r25, X
     7d6:	15 97       	sbiw	r26, 0x05	; 5
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7dc:	11 86       	std	Z+9, r1	; 0x09
     7de:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     7e0:	88 81       	ld	r24, Y
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <Task2>:
}
void Task2(void* pv)
{
	while(1)
	{
		vTaskSuspendAll();
     7ec:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
		x++;
     7f0:	80 91 0a 04 	lds	r24, 0x040A
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 0a 04 	sts	0x040A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	91 ee       	ldi	r25, 0xE1	; 225
     7fe:	a4 e0       	ldi	r26, 0x04	; 4
     800:	81 50       	subi	r24, 0x01	; 1
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	a0 40       	sbci	r26, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <Task2+0x14>
     808:	00 c0       	rjmp	.+0      	; 0x80a <Task2+0x1e>
     80a:	00 00       	nop
		_delay_ms(200);
		y++;
     80c:	80 91 0b 04 	lds	r24, 0x040B
     810:	8f 5f       	subi	r24, 0xFF	; 255
     812:	80 93 0b 04 	sts	0x040B, r24
		xTaskResumeAll();
     816:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
     81a:	e8 cf       	rjmp	.-48     	; 0x7ec <Task2>

0000081c <Task1>:
       
    }
}
void Task1(void* pv)
{
	DIO_Set_Pin_Direction(D,1,OUTPUT);
     81c:	80 e3       	ldi	r24, 0x30	; 48
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_Set_Pin_Direction>
	while(1)
	{
		if (x!=y)
     826:	90 91 0a 04 	lds	r25, 0x040A
     82a:	80 91 0b 04 	lds	r24, 0x040B
     82e:	98 17       	cp	r25, r24
     830:	21 f0       	breq	.+8      	; 0x83a <Task1+0x1e>
		{
			DIO_Toggle_Pin(D,0);	
     832:	80 e3       	ldi	r24, 0x30	; 48
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_Toggle_Pin>
		}
		vTaskDelay(100);
     83a:	84 e6       	ldi	r24, 0x64	; 100
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <vTaskDelay>
	}	
     842:	f1 cf       	rjmp	.-30     	; 0x826 <Task1+0xa>

00000844 <main>:
void Task2(void* pv);

u8 x,y;
int main(void)
{
	xTaskCreate(Task1,"Ali",100,NULL,2,NULL);
     844:	8e e0       	ldi	r24, 0x0E	; 14
     846:	94 e0       	ldi	r25, 0x04	; 4
     848:	62 e6       	ldi	r22, 0x62	; 98
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	44 e6       	ldi	r20, 0x64	; 100
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	02 e0       	ldi	r16, 0x02	; 2
     856:	ee 24       	eor	r14, r14
     858:	ff 24       	eor	r15, r15
     85a:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
	xTaskCreate(Task2,"Morsy",100,NULL,1,NULL);
     85e:	86 ef       	ldi	r24, 0xF6	; 246
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	66 e6       	ldi	r22, 0x66	; 102
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	44 e6       	ldi	r20, 0x64	; 100
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	01 e0       	ldi	r16, 0x01	; 1
     870:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
	
	
	vTaskStartScheduler();
     874:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <vTaskStartScheduler>
     878:	ff cf       	rjmp	.-2      	; 0x878 <__stack+0x19>

0000087a <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     87a:	21 e1       	ldi	r18, 0x11	; 17
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	32 e2       	ldi	r19, 0x22	; 34
     884:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     886:	fc 01       	movw	r30, r24
     888:	32 97       	sbiw	r30, 0x02	; 2
     88a:	a3 e3       	ldi	r26, 0x33	; 51
     88c:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     88e:	fc 01       	movw	r30, r24
     890:	33 97       	sbiw	r30, 0x03	; 3
     892:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     894:	fc 01       	movw	r30, r24
     896:	34 97       	sbiw	r30, 0x04	; 4
     898:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     89a:	fc 01       	movw	r30, r24
     89c:	35 97       	sbiw	r30, 0x05	; 5
     89e:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     8a0:	fc 01       	movw	r30, r24
     8a2:	36 97       	sbiw	r30, 0x06	; 6
     8a4:	60 e8       	ldi	r22, 0x80	; 128
     8a6:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     8a8:	fc 01       	movw	r30, r24
     8aa:	37 97       	sbiw	r30, 0x07	; 7
     8ac:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     8ae:	fc 01       	movw	r30, r24
     8b0:	38 97       	sbiw	r30, 0x08	; 8
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     8b6:	fc 01       	movw	r30, r24
     8b8:	39 97       	sbiw	r30, 0x09	; 9
     8ba:	63 e0       	ldi	r22, 0x03	; 3
     8bc:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     8be:	fc 01       	movw	r30, r24
     8c0:	3a 97       	sbiw	r30, 0x0a	; 10
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     8c6:	fc 01       	movw	r30, r24
     8c8:	3b 97       	sbiw	r30, 0x0b	; 11
     8ca:	65 e0       	ldi	r22, 0x05	; 5
     8cc:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     8ce:	fc 01       	movw	r30, r24
     8d0:	3c 97       	sbiw	r30, 0x0c	; 12
     8d2:	66 e0       	ldi	r22, 0x06	; 6
     8d4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     8d6:	fc 01       	movw	r30, r24
     8d8:	3d 97       	sbiw	r30, 0x0d	; 13
     8da:	67 e0       	ldi	r22, 0x07	; 7
     8dc:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     8de:	fc 01       	movw	r30, r24
     8e0:	3e 97       	sbiw	r30, 0x0e	; 14
     8e2:	68 e0       	ldi	r22, 0x08	; 8
     8e4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     8e6:	fc 01       	movw	r30, r24
     8e8:	3f 97       	sbiw	r30, 0x0f	; 15
     8ea:	69 e0       	ldi	r22, 0x09	; 9
     8ec:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     8ee:	fc 01       	movw	r30, r24
     8f0:	70 97       	sbiw	r30, 0x10	; 16
     8f2:	60 e1       	ldi	r22, 0x10	; 16
     8f4:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     8f6:	fc 01       	movw	r30, r24
     8f8:	71 97       	sbiw	r30, 0x11	; 17
     8fa:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     8fc:	fc 01       	movw	r30, r24
     8fe:	72 97       	sbiw	r30, 0x12	; 18
     900:	22 e1       	ldi	r18, 0x12	; 18
     902:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     904:	fc 01       	movw	r30, r24
     906:	73 97       	sbiw	r30, 0x13	; 19
     908:	23 e1       	ldi	r18, 0x13	; 19
     90a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     90c:	fc 01       	movw	r30, r24
     90e:	74 97       	sbiw	r30, 0x14	; 20
     910:	24 e1       	ldi	r18, 0x14	; 20
     912:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     914:	fc 01       	movw	r30, r24
     916:	75 97       	sbiw	r30, 0x15	; 21
     918:	25 e1       	ldi	r18, 0x15	; 21
     91a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     91c:	fc 01       	movw	r30, r24
     91e:	76 97       	sbiw	r30, 0x16	; 22
     920:	26 e1       	ldi	r18, 0x16	; 22
     922:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     924:	fc 01       	movw	r30, r24
     926:	77 97       	sbiw	r30, 0x17	; 23
     928:	27 e1       	ldi	r18, 0x17	; 23
     92a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     92c:	fc 01       	movw	r30, r24
     92e:	78 97       	sbiw	r30, 0x18	; 24
     930:	28 e1       	ldi	r18, 0x18	; 24
     932:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     934:	fc 01       	movw	r30, r24
     936:	79 97       	sbiw	r30, 0x19	; 25
     938:	29 e1       	ldi	r18, 0x19	; 25
     93a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     93c:	fc 01       	movw	r30, r24
     93e:	7a 97       	sbiw	r30, 0x1a	; 26
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     944:	fc 01       	movw	r30, r24
     946:	7b 97       	sbiw	r30, 0x1b	; 27
     948:	21 e2       	ldi	r18, 0x21	; 33
     94a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     94c:	fc 01       	movw	r30, r24
     94e:	7c 97       	sbiw	r30, 0x1c	; 28
     950:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     952:	fc 01       	movw	r30, r24
     954:	7d 97       	sbiw	r30, 0x1d	; 29
     956:	23 e2       	ldi	r18, 0x23	; 35
     958:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     95a:	fc 01       	movw	r30, r24
     95c:	7e 97       	sbiw	r30, 0x1e	; 30
     95e:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     960:	fc 01       	movw	r30, r24
     962:	7f 97       	sbiw	r30, 0x1f	; 31
     964:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     966:	fc 01       	movw	r30, r24
     968:	b0 97       	sbiw	r30, 0x20	; 32
     96a:	26 e2       	ldi	r18, 0x26	; 38
     96c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     96e:	fc 01       	movw	r30, r24
     970:	b1 97       	sbiw	r30, 0x21	; 33
     972:	27 e2       	ldi	r18, 0x27	; 39
     974:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     976:	fc 01       	movw	r30, r24
     978:	b2 97       	sbiw	r30, 0x22	; 34
     97a:	28 e2       	ldi	r18, 0x28	; 40
     97c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     97e:	fc 01       	movw	r30, r24
     980:	b3 97       	sbiw	r30, 0x23	; 35
     982:	29 e2       	ldi	r18, 0x29	; 41
     984:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     986:	fc 01       	movw	r30, r24
     988:	b4 97       	sbiw	r30, 0x24	; 36
     98a:	20 e3       	ldi	r18, 0x30	; 48
     98c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     98e:	fc 01       	movw	r30, r24
     990:	b5 97       	sbiw	r30, 0x25	; 37
     992:	21 e3       	ldi	r18, 0x31	; 49
     994:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     996:	86 97       	sbiw	r24, 0x26	; 38
}
     998:	08 95       	ret

0000099a <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     99a:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
     99c:	8c e7       	ldi	r24, 0x7C	; 124
     99e:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     9a0:	8b e0       	ldi	r24, 0x0B	; 11
     9a2:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     9a4:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     9a6:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     9a8:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     9aa:	a0 91 9b 03 	lds	r26, 0x039B
     9ae:	b0 91 9c 03 	lds	r27, 0x039C
     9b2:	cd 91       	ld	r28, X+
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	dd 91       	ld	r29, X+
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	ff 91       	pop	r31
     9bc:	ef 91       	pop	r30
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	7f 90       	pop	r7
     9ec:	6f 90       	pop	r6
     9ee:	5f 90       	pop	r5
     9f0:	4f 90       	pop	r4
     9f2:	3f 90       	pop	r3
     9f4:	2f 90       	pop	r2
     9f6:	1f 90       	pop	r1
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     9fe:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret

00000a04 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     a04:	08 95       	ret

00000a06 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a06:	0f 92       	push	r0
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	0f 92       	push	r0
     a0e:	1f 92       	push	r1
     a10:	11 24       	eor	r1, r1
     a12:	2f 92       	push	r2
     a14:	3f 92       	push	r3
     a16:	4f 92       	push	r4
     a18:	5f 92       	push	r5
     a1a:	6f 92       	push	r6
     a1c:	7f 92       	push	r7
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	af 92       	push	r10
     a24:	bf 92       	push	r11
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
     a4e:	a0 91 9b 03 	lds	r26, 0x039B
     a52:	b0 91 9c 03 	lds	r27, 0x039C
     a56:	0d b6       	in	r0, 0x3d	; 61
     a58:	0d 92       	st	X+, r0
     a5a:	0e b6       	in	r0, 0x3e	; 62
     a5c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a5e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a62:	a0 91 9b 03 	lds	r26, 0x039B
     a66:	b0 91 9c 03 	lds	r27, 0x039C
     a6a:	cd 91       	ld	r28, X+
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	dd 91       	ld	r29, X+
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	bf 91       	pop	r27
     a7c:	af 91       	pop	r26
     a7e:	9f 91       	pop	r25
     a80:	8f 91       	pop	r24
     a82:	7f 91       	pop	r23
     a84:	6f 91       	pop	r22
     a86:	5f 91       	pop	r21
     a88:	4f 91       	pop	r20
     a8a:	3f 91       	pop	r19
     a8c:	2f 91       	pop	r18
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	bf 90       	pop	r11
     a9c:	af 90       	pop	r10
     a9e:	9f 90       	pop	r9
     aa0:	8f 90       	pop	r8
     aa2:	7f 90       	pop	r7
     aa4:	6f 90       	pop	r6
     aa6:	5f 90       	pop	r5
     aa8:	4f 90       	pop	r4
     aaa:	3f 90       	pop	r3
     aac:	2f 90       	pop	r2
     aae:	1f 90       	pop	r1
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ab6:	08 95       	ret

00000ab8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	0f 92       	push	r0
     ac0:	1f 92       	push	r1
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
     b00:	a0 91 9b 03 	lds	r26, 0x039B
     b04:	b0 91 9c 03 	lds	r27, 0x039C
     b08:	0d b6       	in	r0, 0x3d	; 61
     b0a:	0d 92       	st	X+, r0
     b0c:	0e b6       	in	r0, 0x3e	; 62
     b0e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     b10:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskIncrementTick>
     b14:	88 23       	and	r24, r24
     b16:	11 f0       	breq	.+4      	; 0xb1c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     b18:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     b1c:	a0 91 9b 03 	lds	r26, 0x039B
     b20:	b0 91 9c 03 	lds	r27, 0x039C
     b24:	cd 91       	ld	r28, X+
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	dd 91       	ld	r29, X+
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	ff 91       	pop	r31
     b2e:	ef 91       	pop	r30
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	4f 90       	pop	r4
     b64:	3f 90       	pop	r3
     b66:	2f 90       	pop	r2
     b68:	1f 90       	pop	r1
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b70:	08 95       	ret

00000b72 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     b72:	0e 94 5c 05 	call	0xab8	; 0xab8 <vPortYieldFromTick>
		asm volatile ( "reti" );
     b76:	18 95       	reti

00000b78 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     b7e:	fc 01       	movw	r30, r24
     b80:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	91 11       	cpse	r25, r1
     b8a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();

	return xReturn;
}
     b8c:	08 95       	ret

00000b8e <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b8e:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     b90:	44 8d       	ldd	r20, Z+28	; 0x1c
     b92:	44 23       	and	r20, r20
     b94:	c1 f0       	breq	.+48     	; 0xbc6 <prvCopyDataFromQueue+0x38>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b96:	26 81       	ldd	r18, Z+6	; 0x06
     b98:	37 81       	ldd	r19, Z+7	; 0x07
     b9a:	24 0f       	add	r18, r20
     b9c:	31 1d       	adc	r19, r1
     b9e:	37 83       	std	Z+7, r19	; 0x07
     ba0:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     ba2:	a2 81       	ldd	r26, Z+2	; 0x02
     ba4:	b3 81       	ldd	r27, Z+3	; 0x03
     ba6:	2a 17       	cp	r18, r26
     ba8:	3b 07       	cpc	r19, r27
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <prvCopyDataFromQueue+0x26>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     bac:	20 81       	ld	r18, Z
     bae:	31 81       	ldd	r19, Z+1	; 0x01
     bb0:	37 83       	std	Z+7, r19	; 0x07
     bb2:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     bb4:	36 81       	ldd	r19, Z+6	; 0x06
     bb6:	27 81       	ldd	r18, Z+7	; 0x07
     bb8:	86 2f       	mov	r24, r22
     bba:	97 2f       	mov	r25, r23
     bbc:	63 2f       	mov	r22, r19
     bbe:	72 2f       	mov	r23, r18
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 de 13 	call	0x27bc	; 0x27bc <memcpy>
     bc6:	08 95       	ret

00000bc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	8c 01       	movw	r16, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     bda:	fc 01       	movw	r30, r24
     bdc:	c6 8d       	ldd	r28, Z+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     bde:	1c 16       	cp	r1, r28
     be0:	cc f4       	brge	.+50     	; 0xc14 <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     be2:	81 89       	ldd	r24, Z+17	; 0x11
     be4:	88 23       	and	r24, r24
     be6:	31 f4       	brne	.+12     	; 0xbf4 <prvUnlockQueue+0x2c>
     be8:	15 c0       	rjmp	.+42     	; 0xc14 <prvUnlockQueue+0x4c>
     bea:	f8 01       	movw	r30, r16
     bec:	81 89       	ldd	r24, Z+17	; 0x11
     bee:	88 23       	and	r24, r24
     bf0:	41 f4       	brne	.+16     	; 0xc02 <prvUnlockQueue+0x3a>
     bf2:	10 c0       	rjmp	.+32     	; 0xc14 <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f1 e1       	ldi	r31, 0x11	; 17
     bf8:	ef 2e       	mov	r14, r31
     bfa:	ff 24       	eor	r15, r15
     bfc:	f0 2d       	mov	r31, r0
     bfe:	e0 0e       	add	r14, r16
     c00:	f1 1e       	adc	r15, r17
     c02:	c7 01       	movw	r24, r14
     c04:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
     c08:	88 23       	and	r24, r24
     c0a:	11 f0       	breq	.+4      	; 0xc10 <prvUnlockQueue+0x48>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     c0c:	0e 94 b7 10 	call	0x216e	; 0x216e <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     c10:	c1 50       	subi	r28, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     c12:	59 f7       	brne	.-42     	; 0xbea <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	f8 01       	movw	r30, r16
     c18:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     c24:	f8 01       	movw	r30, r16
     c26:	c5 8d       	ldd	r28, Z+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c28:	1c 16       	cp	r1, r28
     c2a:	c4 f4       	brge	.+48     	; 0xc5c <prvUnlockQueue+0x94>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c2c:	80 85       	ldd	r24, Z+8	; 0x08
     c2e:	88 23       	and	r24, r24
     c30:	31 f4       	brne	.+12     	; 0xc3e <prvUnlockQueue+0x76>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <prvUnlockQueue+0x94>
     c34:	f8 01       	movw	r30, r16
     c36:	80 85       	ldd	r24, Z+8	; 0x08
     c38:	88 23       	and	r24, r24
     c3a:	39 f4       	brne	.+14     	; 0xc4a <prvUnlockQueue+0x82>
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	68 94       	set
     c44:	e3 f8       	bld	r14, 3
     c46:	e0 0e       	add	r14, r16
     c48:	f1 1e       	adc	r15, r17
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
     c50:	88 23       	and	r24, r24
     c52:	11 f0       	breq	.+4      	; 0xc58 <prvUnlockQueue+0x90>
				{
					vTaskMissedYield();
     c54:	0e 94 b7 10 	call	0x216e	; 0x216e <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     c58:	c1 50       	subi	r28, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c5a:	61 f7       	brne	.-40     	; 0xc34 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	f8 01       	movw	r30, r16
     c60:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
}
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	08 95       	ret

00000c72 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
     c7c:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c7e:	0a 8d       	ldd	r16, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     c80:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c82:	44 23       	and	r20, r20
     c84:	61 f4       	brne	.+24     	; 0xc9e <prvCopyDataToQueue+0x2c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	09 f0       	breq	.+2      	; 0xc90 <prvCopyDataToQueue+0x1e>
     c8e:	42 c0       	rjmp	.+132    	; 0xd14 <prvCopyDataToQueue+0xa2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	0e 94 1e 11 	call	0x223c	; 0x223c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     c98:	1b 82       	std	Y+3, r1	; 0x03
     c9a:	1a 82       	std	Y+2, r1	; 0x02
     c9c:	42 c0       	rjmp	.+132    	; 0xd22 <prvCopyDataToQueue+0xb0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     c9e:	11 23       	and	r17, r17
     ca0:	b9 f4       	brne	.+46     	; 0xcd0 <prvCopyDataToQueue+0x5e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     ca2:	8c 81       	ldd	r24, Y+4	; 0x04
     ca4:	9d 81       	ldd	r25, Y+5	; 0x05
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	0e 94 de 13 	call	0x27bc	; 0x27bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     cac:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cae:	8c 81       	ldd	r24, Y+4	; 0x04
     cb0:	9d 81       	ldd	r25, Y+5	; 0x05
     cb2:	82 0f       	add	r24, r18
     cb4:	91 1d       	adc	r25, r1
     cb6:	9d 83       	std	Y+5, r25	; 0x05
     cb8:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     cba:	2a 81       	ldd	r18, Y+2	; 0x02
     cbc:	3b 81       	ldd	r19, Y+3	; 0x03
     cbe:	82 17       	cp	r24, r18
     cc0:	93 07       	cpc	r25, r19
     cc2:	50 f1       	brcs	.+84     	; 0xd18 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     cc4:	88 81       	ld	r24, Y
     cc6:	99 81       	ldd	r25, Y+1	; 0x01
     cc8:	9d 83       	std	Y+5, r25	; 0x05
     cca:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	29 c0       	rjmp	.+82     	; 0xd22 <prvCopyDataToQueue+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	0e 94 de 13 	call	0x27bc	; 0x27bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     cda:	4c 8d       	ldd	r20, Y+28	; 0x1c
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	50 95       	com	r21
     ce0:	41 95       	neg	r20
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	84 0f       	add	r24, r20
     cea:	95 1f       	adc	r25, r21
     cec:	9f 83       	std	Y+7, r25	; 0x07
     cee:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     cf0:	28 81       	ld	r18, Y
     cf2:	39 81       	ldd	r19, Y+1	; 0x01
     cf4:	82 17       	cp	r24, r18
     cf6:	93 07       	cpc	r25, r19
     cf8:	30 f4       	brcc	.+12     	; 0xd06 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	84 0f       	add	r24, r20
     d00:	95 1f       	adc	r25, r21
     d02:	9f 83       	std	Y+7, r25	; 0x07
     d04:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     d06:	12 30       	cpi	r17, 0x02	; 2
     d08:	49 f4       	brne	.+18     	; 0xd1c <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     d0a:	00 23       	and	r16, r16
     d0c:	49 f0       	breq	.+18     	; 0xd20 <prvCopyDataToQueue+0xae>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     d0e:	01 50       	subi	r16, 0x01	; 1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <prvCopyDataToQueue+0xb0>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <prvCopyDataToQueue+0xb0>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <prvCopyDataToQueue+0xb0>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <prvCopyDataToQueue+0xb0>
     d20:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     d22:	0f 5f       	subi	r16, 0xFF	; 255
     d24:	0a 8f       	std	Y+26, r16	; 0x1a

	return xReturn;
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d3c:	48 81       	ld	r20, Y
     d3e:	59 81       	ldd	r21, Y+1	; 0x01
     d40:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	2e 9f       	mul	r18, r30
     d4a:	c0 01       	movw	r24, r0
     d4c:	2f 9f       	mul	r18, r31
     d4e:	90 0d       	add	r25, r0
     d50:	3e 9f       	mul	r19, r30
     d52:	90 0d       	add	r25, r0
     d54:	11 24       	eor	r1, r1
     d56:	84 0f       	add	r24, r20
     d58:	95 1f       	adc	r25, r21
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d5e:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d60:	5d 83       	std	Y+5, r21	; 0x05
     d62:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d64:	c9 01       	movw	r24, r18
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	e8 9f       	mul	r30, r24
     d6a:	90 01       	movw	r18, r0
     d6c:	e9 9f       	mul	r30, r25
     d6e:	30 0d       	add	r19, r0
     d70:	f8 9f       	mul	r31, r24
     d72:	30 0d       	add	r19, r0
     d74:	11 24       	eor	r1, r1
     d76:	24 0f       	add	r18, r20
     d78:	35 1f       	adc	r19, r21
     d7a:	3f 83       	std	Y+7, r19	; 0x07
     d7c:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
     d82:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     d84:	66 23       	and	r22, r22
     d86:	61 f4       	brne	.+24     	; 0xda0 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d88:	88 85       	ldd	r24, Y+8	; 0x08
     d8a:	88 23       	and	r24, r24
     d8c:	89 f0       	breq	.+34     	; 0xdb0 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     d8e:	ce 01       	movw	r24, r28
     d90:	08 96       	adiw	r24, 0x08	; 8
     d92:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
     d96:	88 23       	and	r24, r24
     d98:	59 f0       	breq	.+22     	; 0xdb0 <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
     d9a:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     da0:	ce 01       	movw	r24, r28
     da2:	08 96       	adiw	r24, 0x08	; 8
     da4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     da8:	ce 01       	movw	r24, r28
     daa:	41 96       	adiw	r24, 0x11	; 17
     dac:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	08 2f       	mov	r16, r24
     dc6:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
     dc8:	66 23       	and	r22, r22
     dca:	21 f0       	breq	.+8      	; 0xdd4 <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     dcc:	68 9f       	mul	r22, r24
     dce:	c0 01       	movw	r24, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <xQueueGenericCreate+0x1c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     dd8:	4f 96       	adiw	r24, 0x1f	; 31
     dda:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
     dde:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	71 f0       	breq	.+28     	; 0xe00 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     de4:	11 23       	and	r17, r17
     de6:	19 f4       	brne	.+6      	; 0xdee <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     de8:	99 83       	std	Y+1, r25	; 0x01
     dea:	88 83       	st	Y, r24
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <xQueueGenericCreate+0x38>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     dee:	4f 96       	adiw	r24, 0x1f	; 31
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     df0:	99 83       	std	Y+1, r25	; 0x01
     df2:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     df4:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
     df6:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     df8:	ce 01       	movw	r24, r28
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	0e 94 98 06 	call	0xd30	; 0xd30 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
     e00:	8c 2f       	mov	r24, r28
     e02:	9d 2f       	mov	r25, r29
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	00 d0       	rcall	.+0      	; 0xe26 <xQueueGenericSend+0x18>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <xQueueGenericSend+0x1a>
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	8c 01       	movw	r16, r24
     e30:	4b 01       	movw	r8, r22
     e32:	5d 83       	std	Y+5, r21	; 0x05
     e34:	4c 83       	std	Y+4, r20	; 0x04
     e36:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     e38:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
     e3a:	bb 24       	eor	r11, r11
     e3c:	b3 94       	inc	r11
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e3e:	cc 24       	eor	r12, r12
     e40:	dd 24       	eor	r13, r13
     e42:	68 94       	set
     e44:	c3 f8       	bld	r12, 3
     e46:	c8 0e       	add	r12, r24
     e48:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     e50:	f8 01       	movw	r30, r16
     e52:	92 8d       	ldd	r25, Z+26	; 0x1a
     e54:	83 8d       	ldd	r24, Z+27	; 0x1b
     e56:	98 17       	cp	r25, r24
     e58:	18 f0       	brcs	.+6      	; 0xe60 <xQueueGenericSend+0x52>
     e5a:	f2 e0       	ldi	r31, 0x02	; 2
     e5c:	ef 16       	cp	r14, r31
     e5e:	d1 f4       	brne	.+52     	; 0xe94 <xQueueGenericSend+0x86>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     e60:	c8 01       	movw	r24, r16
     e62:	b4 01       	movw	r22, r8
     e64:	4e 2d       	mov	r20, r14
     e66:	0e 94 39 06 	call	0xc72	; 0xc72 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e6a:	f8 01       	movw	r30, r16
     e6c:	91 89       	ldd	r25, Z+17	; 0x11
     e6e:	99 23       	and	r25, r25
     e70:	49 f0       	breq	.+18     	; 0xe84 <xQueueGenericSend+0x76>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e72:	c8 01       	movw	r24, r16
     e74:	41 96       	adiw	r24, 0x11	; 17
     e76:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
     e7a:	88 23       	and	r24, r24
     e7c:	39 f0       	breq	.+14     	; 0xe8c <xQueueGenericSend+0x7e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     e7e:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <xQueueGenericSend+0x7e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     e84:	88 23       	and	r24, r24
     e86:	11 f0       	breq	.+4      	; 0xe8c <xQueueGenericSend+0x7e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     e88:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	52 c0       	rjmp	.+164    	; 0xf38 <xQueueGenericSend+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	21 f4       	brne	.+8      	; 0xea4 <xQueueGenericSend+0x96>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	4a c0       	rjmp	.+148    	; 0xf38 <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
     ea4:	ff 20       	and	r15, r15
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	0e 94 77 10 	call	0x20ee	; 0x20ee <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     eb0:	fb 2c       	mov	r15, r11
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     eb6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	0f 92       	push	r0
     ec0:	f8 01       	movw	r30, r16
     ec2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	09 f4       	brne	.+2      	; 0xeca <xQueueGenericSend+0xbc>
     ec8:	15 8e       	std	Z+29, r1	; 0x1d
     eca:	f8 01       	movw	r30, r16
     ecc:	86 8d       	ldd	r24, Z+30	; 0x1e
     ece:	8f 3f       	cpi	r24, 0xFF	; 255
     ed0:	09 f4       	brne	.+2      	; 0xed4 <xQueueGenericSend+0xc6>
     ed2:	16 8e       	std	Z+30, r1	; 0x1e
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	be 01       	movw	r22, r28
     ede:	6c 5f       	subi	r22, 0xFC	; 252
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	0e 94 82 10 	call	0x2104	; 0x2104 <xTaskCheckForTimeOut>
     ee6:	88 23       	and	r24, r24
     ee8:	09 f5       	brne	.+66     	; 0xf2c <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     ef0:	f8 01       	movw	r30, r16
     ef2:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     ef8:	f8 01       	movw	r30, r16
     efa:	83 8d       	ldd	r24, Z+27	; 0x1b
     efc:	98 17       	cp	r25, r24
     efe:	81 f4       	brne	.+32     	; 0xf20 <xQueueGenericSend+0x112>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     f00:	6c 81       	ldd	r22, Y+4	; 0x04
     f02:	7d 81       	ldd	r23, Y+5	; 0x05
     f04:	c6 01       	movw	r24, r12
     f06:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     f10:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
     f14:	88 23       	and	r24, r24
     f16:	09 f0       	breq	.+2      	; 0xf1a <xQueueGenericSend+0x10c>
     f18:	98 cf       	rjmp	.-208    	; 0xe4a <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
     f1a:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
     f1e:	95 cf       	rjmp	.-214    	; 0xe4a <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f20:	c8 01       	movw	r24, r16
     f22:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     f26:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
     f2a:	8f cf       	rjmp	.-226    	; 0xe4a <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     f32:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     f36:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	08 95       	ret

00000f5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	48 2f       	mov	r20, r24
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 de 06 	call	0xdbc	; 0xdbc <xQueueGenericCreate>
     f68:	ec 01       	movw	r28, r24

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	61 f0       	breq	.+24     	; 0xf86 <xQueueCreateMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     f6e:	1b 82       	std	Y+3, r1	; 0x03
     f70:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	18 82       	st	Y, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
     f76:	1e 82       	std	Y+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	0e 94 07 07 	call	0xe0e	; 0xe0e <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
     f86:	8c 2f       	mov	r24, r28
     f88:	9d 2f       	mov	r25, r29
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	8c 01       	movw	r16, r24
     f9c:	7a 01       	movw	r14, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     f9e:	fc 01       	movw	r30, r24
     fa0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fa2:	83 8d       	ldd	r24, Z+27	; 0x1b
     fa4:	98 17       	cp	r25, r24
     fa6:	10 f0       	brcs	.+4      	; 0xfac <xQueueGenericSendFromISR+0x1c>
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	f1 f4       	brne	.+60     	; 0xfe8 <xQueueGenericSendFromISR+0x58>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
     fac:	f8 01       	movw	r30, r16
     fae:	c6 8d       	ldd	r28, Z+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     fb0:	c8 01       	movw	r24, r16
     fb2:	42 2f       	mov	r20, r18
     fb4:	0e 94 39 06 	call	0xc72	; 0xc72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
     fb8:	cf 3f       	cpi	r28, 0xFF	; 255
     fba:	89 f4       	brne	.+34     	; 0xfde <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     fbc:	f8 01       	movw	r30, r16
     fbe:	81 89       	ldd	r24, Z+17	; 0x11
     fc0:	88 23       	and	r24, r24
     fc2:	a1 f0       	breq	.+40     	; 0xfec <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     fc4:	c8 01       	movw	r24, r16
     fc6:	41 96       	adiw	r24, 0x11	; 17
     fc8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
     fcc:	88 23       	and	r24, r24
     fce:	81 f0       	breq	.+32     	; 0xff0 <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     fd0:	e1 14       	cp	r14, r1
     fd2:	f1 04       	cpc	r15, r1
     fd4:	79 f0       	breq	.+30     	; 0xff4 <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	f7 01       	movw	r30, r14
     fda:	80 83       	st	Z, r24
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     fde:	cf 5f       	subi	r28, 0xFF	; 255
     fe0:	f8 01       	movw	r30, r16
     fe2:	c6 8f       	std	Z+30, r28	; 0x1e
			}

			xReturn = pdPASS;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <xQueueGenericSendFromISR+0x66>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <xQueueGenericSendFromISR+0x66>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	08 95       	ret

00001002 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	fc 01       	movw	r30, r24
    1008:	eb 01       	movw	r28, r22
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    100a:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    100c:	93 8d       	ldd	r25, Z+27	; 0x1b
    100e:	89 17       	cp	r24, r25
    1010:	b8 f4       	brcc	.+46     	; 0x1040 <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1012:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	71 f4       	brne	.+28     	; 0x1038 <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    101c:	81 89       	ldd	r24, Z+17	; 0x11
    101e:	88 23       	and	r24, r24
    1020:	89 f0       	breq	.+34     	; 0x1044 <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1022:	cf 01       	movw	r24, r30
    1024:	41 96       	adiw	r24, 0x11	; 17
    1026:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
    102a:	88 23       	and	r24, r24
    102c:	69 f0       	breq	.+26     	; 0x1048 <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    102e:	20 97       	sbiw	r28, 0x00	; 0
    1030:	69 f0       	breq	.+26     	; 0x104c <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	88 83       	st	Y, r24
    1036:	0b c0       	rjmp	.+22     	; 0x104e <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	07 c0       	rjmp	.+14     	; 0x104e <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	05 c0       	rjmp	.+10     	; 0x104e <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	03 c0       	rjmp	.+6      	; 0x104e <xQueueGiveFromISR+0x4c>
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	01 c0       	rjmp	.+2      	; 0x104e <xQueueGiveFromISR+0x4c>
    104c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	00 d0       	rcall	.+0      	; 0x106e <xQueueGenericReceive+0x1a>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <xQueueGenericReceive+0x1c>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	7c 01       	movw	r14, r24
    1078:	4b 01       	movw	r8, r22
    107a:	5d 83       	std	Y+5, r21	; 0x05
    107c:	4c 83       	std	Y+4, r20	; 0x04
    107e:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1080:	00 e0       	ldi	r16, 0x00	; 0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1082:	dd 24       	eor	r13, r13
    1084:	d3 94       	inc	r13
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1086:	0f 2e       	mov	r0, r31
    1088:	f1 e1       	ldi	r31, 0x11	; 17
    108a:	af 2e       	mov	r10, r31
    108c:	bb 24       	eor	r11, r11
    108e:	f0 2d       	mov	r31, r0
    1090:	a8 0e       	add	r10, r24
    1092:	b9 1e       	adc	r11, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    109a:	f7 01       	movw	r30, r14
    109c:	12 8d       	ldd	r17, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    109e:	11 23       	and	r17, r17
    10a0:	99 f1       	breq	.+102    	; 0x1108 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    10a2:	a6 80       	ldd	r10, Z+6	; 0x06
    10a4:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    10a6:	c7 01       	movw	r24, r14
    10a8:	b4 01       	movw	r22, r8
    10aa:	0e 94 c7 05 	call	0xb8e	; 0xb8e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    10ae:	cc 20       	and	r12, r12
    10b0:	c9 f4       	brne	.+50     	; 0x10e4 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    10b2:	11 50       	subi	r17, 0x01	; 1
    10b4:	f7 01       	movw	r30, r14
    10b6:	12 8f       	std	Z+26, r17	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	29 f4       	brne	.+10     	; 0x10ca <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    10c0:	0e 94 77 11 	call	0x22ee	; 0x22ee <pvTaskIncrementMutexHeldCount>
    10c4:	f7 01       	movw	r30, r14
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    10ca:	f7 01       	movw	r30, r14
    10cc:	80 85       	ldd	r24, Z+8	; 0x08
    10ce:	88 23       	and	r24, r24
    10d0:	b9 f0       	breq	.+46     	; 0x1100 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    10d2:	c7 01       	movw	r24, r14
    10d4:	08 96       	adiw	r24, 0x08	; 8
    10d6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
    10da:	88 23       	and	r24, r24
    10dc:	89 f0       	breq	.+34     	; 0x1100 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
    10de:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    10e2:	0e c0       	rjmp	.+28     	; 0x1100 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    10e4:	f7 01       	movw	r30, r14
    10e6:	b7 82       	std	Z+7, r11	; 0x07
    10e8:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10ea:	81 89       	ldd	r24, Z+17	; 0x11
    10ec:	88 23       	and	r24, r24
    10ee:	41 f0       	breq	.+16     	; 0x1100 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10f0:	c7 01       	movw	r24, r14
    10f2:	41 96       	adiw	r24, 0x11	; 17
    10f4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
    10f8:	88 23       	and	r24, r24
    10fa:	11 f0       	breq	.+4      	; 0x1100 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    10fc:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	61 c0       	rjmp	.+194    	; 0x11ca <xQueueGenericReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	21 f4       	brne	.+8      	; 0x1118 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	59 c0       	rjmp	.+178    	; 0x11ca <xQueueGenericReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
    1118:	00 23       	and	r16, r16
    111a:	29 f4       	brne	.+10     	; 0x1126 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	0e 94 77 10 	call	0x20ee	; 0x20ee <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1124:	0d 2d       	mov	r16, r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    112a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	0f 92       	push	r0
    1134:	f7 01       	movw	r30, r14
    1136:	85 8d       	ldd	r24, Z+29	; 0x1d
    1138:	8f 3f       	cpi	r24, 0xFF	; 255
    113a:	09 f4       	brne	.+2      	; 0x113e <xQueueGenericReceive+0xea>
    113c:	15 8e       	std	Z+29, r1	; 0x1d
    113e:	f7 01       	movw	r30, r14
    1140:	86 8d       	ldd	r24, Z+30	; 0x1e
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
    1144:	09 f4       	brne	.+2      	; 0x1148 <xQueueGenericReceive+0xf4>
    1146:	16 8e       	std	Z+30, r1	; 0x1e
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    114c:	ce 01       	movw	r24, r28
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	be 01       	movw	r22, r28
    1152:	6c 5f       	subi	r22, 0xFC	; 252
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	0e 94 82 10 	call	0x2104	; 0x2104 <xTaskCheckForTimeOut>
    115a:	88 23       	and	r24, r24
    115c:	51 f5       	brne	.+84     	; 0x11b2 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    115e:	c7 01       	movw	r24, r14
    1160:	0e 94 bc 05 	call	0xb78	; 0xb78 <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	f9 f0       	breq	.+62     	; 0x11a6 <xQueueGenericReceive+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1168:	f7 01       	movw	r30, r14
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	51 f4       	brne	.+20     	; 0x1186 <xQueueGenericReceive+0x132>
					{
						taskENTER_CRITICAL();
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1178:	f7 01       	movw	r30, r14
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	0e 94 c0 10 	call	0x2180	; 0x2180 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1186:	6c 81       	ldd	r22, Y+4	; 0x04
    1188:	7d 81       	ldd	r23, Y+5	; 0x05
    118a:	c5 01       	movw	r24, r10
    118c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1190:	c7 01       	movw	r24, r14
    1192:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1196:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
    119a:	88 23       	and	r24, r24
    119c:	09 f0       	breq	.+2      	; 0x11a0 <xQueueGenericReceive+0x14c>
    119e:	7a cf       	rjmp	.-268    	; 0x1094 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
    11a0:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    11a4:	77 cf       	rjmp	.-274    	; 0x1094 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11a6:	c7 01       	movw	r24, r14
    11a8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11ac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
    11b0:	71 cf       	rjmp	.-286    	; 0x1094 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11b2:	c7 01       	movw	r24, r14
    11b4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11b8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11bc:	c7 01       	movw	r24, r14
    11be:	0e 94 bc 05 	call	0xb78	; 0xb78 <prvIsQueueEmpty>
    11c2:	88 23       	and	r24, r24
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <xQueueGenericReceive+0x174>
    11c6:	66 cf       	rjmp	.-308    	; 0x1094 <xQueueGenericReceive+0x40>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    11c8:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	bf 90       	pop	r11
    11e6:	af 90       	pop	r10
    11e8:	9f 90       	pop	r9
    11ea:	8f 90       	pop	r8
    11ec:	08 95       	ret

000011ee <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	8c 01       	movw	r16, r24
    11fc:	7a 01       	movw	r14, r20
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    11fe:	fc 01       	movw	r30, r24
    1200:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1202:	cc 23       	and	r28, r28
    1204:	e9 f0       	breq	.+58     	; 0x1240 <xQueueReceiveFromISR+0x52>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1206:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1208:	0e 94 c7 05 	call	0xb8e	; 0xb8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    120c:	c1 50       	subi	r28, 0x01	; 1
    120e:	f8 01       	movw	r30, r16
    1210:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1212:	df 3f       	cpi	r29, 0xFF	; 255
    1214:	81 f4       	brne	.+32     	; 0x1236 <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1216:	80 85       	ldd	r24, Z+8	; 0x08
    1218:	88 23       	and	r24, r24
    121a:	a1 f0       	breq	.+40     	; 0x1244 <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    121c:	c8 01       	movw	r24, r16
    121e:	08 96       	adiw	r24, 0x08	; 8
    1220:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskRemoveFromEventList>
    1224:	88 23       	and	r24, r24
    1226:	81 f0       	breq	.+32     	; 0x1248 <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1228:	e1 14       	cp	r14, r1
    122a:	f1 04       	cpc	r15, r1
    122c:	79 f0       	breq	.+30     	; 0x124c <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	f7 01       	movw	r30, r14
    1232:	80 83       	st	Z, r24
    1234:	0c c0       	rjmp	.+24     	; 0x124e <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    1236:	df 5f       	subi	r29, 0xFF	; 255
    1238:	f8 01       	movw	r30, r16
    123a:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	07 c0       	rjmp	.+14     	; 0x124e <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	05 c0       	rjmp	.+10     	; 0x124e <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	03 c0       	rjmp	.+6      	; 0x124e <xQueueReceiveFromISR+0x60>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <xQueueReceiveFromISR+0x60>
    124c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	08 95       	ret

0000125c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1266:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1268:	88 23       	and	r24, r24
    126a:	49 f0       	breq	.+18     	; 0x127e <xQueuePeekFromISR+0x22>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    126c:	0e 81       	ldd	r16, Y+6	; 0x06
    126e:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 c7 05 	call	0xb8e	; 0xb8e <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1276:	1f 83       	std	Y+7, r17	; 0x07
    1278:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    127e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1290:	fc 01       	movw	r30, r24
    1292:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1298:	08 95       	ret

0000129a <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    129a:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12a2:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12a8:	83 8d       	ldd	r24, Z+27	; 0x1b
	}
	taskEXIT_CRITICAL();

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12aa:	89 1b       	sub	r24, r25
    12ac:	08 95       	ret

000012ae <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12ae:	fc 01       	movw	r30, r24
    12b0:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12b2:	08 95       	ret

000012b4 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    12b4:	fc 01       	movw	r30, r24
    12b6:	92 8d       	ldd	r25, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	91 11       	cpse	r25, r1
    12bc:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12be:	08 95       	ret

000012c0 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    12c0:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    12c2:	22 8d       	ldd	r18, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    12c8:	29 13       	cpse	r18, r25
    12ca:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12cc:	08 95       	ret

000012ce <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    12ce:	dc 01       	movw	r26, r24

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    12d0:	80 91 0c 04 	lds	r24, 0x040C
    12d4:	90 91 0d 04 	lds	r25, 0x040D
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	51 f0       	breq	.+20     	; 0x12f0 <vQueueAddToRegistry+0x22>
    12dc:	e0 e1       	ldi	r30, 0x10	; 16
    12de:	f4 e0       	ldi	r31, 0x04	; 4
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	79 f4       	brne	.+30     	; 0x130c <vQueueAddToRegistry+0x3e>
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vQueueAddToRegistry+0x26>
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	50 e0       	ldi	r21, 0x00	; 0
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    12f4:	fa 01       	movw	r30, r20
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e4 5f       	subi	r30, 0xF4	; 244
    1300:	fb 4f       	sbci	r31, 0xFB	; 251
    1302:	71 83       	std	Z+1, r23	; 0x01
    1304:	60 83       	st	Z, r22
				xQueueRegistry[ ux ].xHandle = xQueue;
    1306:	b3 83       	std	Z+3, r27	; 0x03
    1308:	a2 83       	std	Z+2, r26	; 0x02

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    130a:	08 95       	ret
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1312:	28 30       	cpi	r18, 0x08	; 8
    1314:	31 05       	cpc	r19, r1
    1316:	31 f7       	brne	.-52     	; 0x12e4 <vQueueAddToRegistry+0x16>
    1318:	08 95       	ret

0000131a <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    131a:	ac 01       	movw	r20, r24

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    131c:	80 91 0e 04 	lds	r24, 0x040E
    1320:	90 91 0f 04 	lds	r25, 0x040F
    1324:	84 17       	cp	r24, r20
    1326:	95 07       	cpc	r25, r21
    1328:	59 f0       	breq	.+22     	; 0x1340 <pcQueueGetName+0x26>
    132a:	e2 e1       	ldi	r30, 0x12	; 18
    132c:	f4 e0       	ldi	r31, 0x04	; 4
    132e:	21 e0       	ldi	r18, 0x01	; 1
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	b9 01       	movw	r22, r18
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	84 17       	cp	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	69 f4       	brne	.+26     	; 0x1358 <pcQueueGetName+0x3e>
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <pcQueueGetName+0x2a>
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    1344:	fb 01       	movw	r30, r22
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e4 5f       	subi	r30, 0xF4	; 244
    1350:	fb 4f       	sbci	r31, 0xFB	; 251
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
				break;
    1356:	08 95       	ret
    1358:	2f 5f       	subi	r18, 0xFF	; 255
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	34 96       	adiw	r30, 0x04	; 4
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    135e:	28 30       	cpi	r18, 0x08	; 8
    1360:	31 05       	cpc	r19, r1
    1362:	39 f7       	brne	.-50     	; 0x1332 <pcQueueGetName+0x18>
#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
    1368:	08 95       	ret

0000136a <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    136a:	ac 01       	movw	r20, r24

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    136c:	80 91 0e 04 	lds	r24, 0x040E
    1370:	90 91 0f 04 	lds	r25, 0x040F
    1374:	84 17       	cp	r24, r20
    1376:	95 07       	cpc	r25, r21
    1378:	59 f0       	breq	.+22     	; 0x1390 <vQueueUnregisterQueue+0x26>
    137a:	e2 e1       	ldi	r30, 0x12	; 18
    137c:	f4 e0       	ldi	r31, 0x04	; 4
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	b9 01       	movw	r22, r18
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	84 17       	cp	r24, r20
    138a:	95 07       	cpc	r25, r21
    138c:	79 f4       	brne	.+30     	; 0x13ac <vQueueUnregisterQueue+0x42>
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vQueueUnregisterQueue+0x2a>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    1394:	fb 01       	movw	r30, r22
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	e4 5f       	subi	r30, 0xF4	; 244
    13a0:	fb 4f       	sbci	r31, 0xFB	; 251
    13a2:	11 82       	std	Z+1, r1	; 0x01
    13a4:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    13a6:	13 82       	std	Z+3, r1	; 0x03
    13a8:	12 82       	std	Z+2, r1	; 0x02
				break;
    13aa:	08 95       	ret
    13ac:	2f 5f       	subi	r18, 0xFF	; 255
    13ae:	3f 4f       	sbci	r19, 0xFF	; 255
    13b0:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    13b2:	28 30       	cpi	r18, 0x08	; 8
    13b4:	31 05       	cpc	r19, r1
    13b6:	29 f7       	brne	.-54     	; 0x1382 <vQueueUnregisterQueue+0x18>
    13b8:	08 95       	ret

000013ba <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    13c0:	0e 94 b5 09 	call	0x136a	; 0x136a <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    13d0:	fc 01       	movw	r30, r24

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    13d2:	82 85       	ldd	r24, Z+10	; 0x0a
    13d4:	93 85       	ldd	r25, Z+11	; 0x0b
    13d6:	23 e0       	ldi	r18, 0x03	; 3
    13d8:	8f 3f       	cpi	r24, 0xFF	; 255
    13da:	92 07       	cpc	r25, r18
    13dc:	61 f4       	brne	.+24     	; 0x13f6 <prvTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    13de:	24 89       	ldd	r18, Z+20	; 0x14
    13e0:	35 89       	ldd	r19, Z+21	; 0x15
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	2d 3e       	cpi	r18, 0xED	; 237
    13e6:	38 07       	cpc	r19, r24
    13e8:	41 f0       	breq	.+16     	; 0x13fa <prvTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	21 15       	cp	r18, r1
    13ee:	31 05       	cpc	r19, r1
    13f0:	29 f0       	breq	.+10     	; 0x13fc <prvTaskIsTaskSuspended+0x2c>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	08 95       	ret
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
    13fa:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    13fc:	08 95       	ret

000013fe <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    13fe:	e0 91 ab 03 	lds	r30, 0x03AB
    1402:	f0 91 ac 03 	lds	r31, 0x03AC
    1406:	80 81       	ld	r24, Z
    1408:	88 23       	and	r24, r24
    140a:	39 f4       	brne	.+14     	; 0x141a <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	90 93 9f 03 	sts	0x039F, r25
    1414:	80 93 9e 03 	sts	0x039E, r24
    1418:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    141a:	e0 91 ab 03 	lds	r30, 0x03AB
    141e:	f0 91 ac 03 	lds	r31, 0x03AC
    1422:	05 80       	ldd	r0, Z+5	; 0x05
    1424:	f6 81       	ldd	r31, Z+6	; 0x06
    1426:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1428:	06 80       	ldd	r0, Z+6	; 0x06
    142a:	f7 81       	ldd	r31, Z+7	; 0x07
    142c:	e0 2d       	mov	r30, r0
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	90 93 9f 03 	sts	0x039F, r25
    1436:	80 93 9e 03 	sts	0x039E, r24
    143a:	08 95       	ret

0000143c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    1448:	16 2f       	mov	r17, r22
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    144a:	e0 90 a5 03 	lds	r14, 0x03A5
    144e:	f0 90 a6 03 	lds	r15, 0x03A6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1452:	80 91 9b 03 	lds	r24, 0x039B
    1456:	90 91 9c 03 	lds	r25, 0x039C
    145a:	02 96       	adiw	r24, 0x02	; 2
    145c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	cf 3f       	cpi	r28, 0xFF	; 255
    1464:	d8 07       	cpc	r29, r24
    1466:	69 f4       	brne	.+26     	; 0x1482 <prvAddCurrentTaskToDelayedList+0x46>
    1468:	11 23       	and	r17, r17
    146a:	59 f0       	breq	.+22     	; 0x1482 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    146c:	60 91 9b 03 	lds	r22, 0x039B
    1470:	70 91 9c 03 	lds	r23, 0x039C
    1474:	6e 5f       	subi	r22, 0xFE	; 254
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1480:	2f c0       	rjmp	.+94     	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xa4>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1482:	ce 0d       	add	r28, r14
    1484:	df 1d       	adc	r29, r15

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1486:	e0 91 9b 03 	lds	r30, 0x039B
    148a:	f0 91 9c 03 	lds	r31, 0x039C
    148e:	d3 83       	std	Z+3, r29	; 0x03
    1490:	c2 83       	std	Z+2, r28	; 0x02

			if( xTimeToWake < xConstTickCount )
    1492:	ce 15       	cp	r28, r14
    1494:	df 05       	cpc	r29, r15
    1496:	68 f4       	brcc	.+26     	; 0x14b2 <prvAddCurrentTaskToDelayedList+0x76>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1498:	80 91 a9 03 	lds	r24, 0x03A9
    149c:	90 91 aa 03 	lds	r25, 0x03AA
    14a0:	60 91 9b 03 	lds	r22, 0x039B
    14a4:	70 91 9c 03 	lds	r23, 0x039C
    14a8:	6e 5f       	subi	r22, 0xFE	; 254
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>
    14b0:	17 c0       	rjmp	.+46     	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xa4>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    14b2:	80 91 ab 03 	lds	r24, 0x03AB
    14b6:	90 91 ac 03 	lds	r25, 0x03AC
    14ba:	60 91 9b 03 	lds	r22, 0x039B
    14be:	70 91 9c 03 	lds	r23, 0x039C
    14c2:	6e 5f       	subi	r22, 0xFE	; 254
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    14ca:	80 91 9e 03 	lds	r24, 0x039E
    14ce:	90 91 9f 03 	lds	r25, 0x039F
    14d2:	c8 17       	cp	r28, r24
    14d4:	d9 07       	cpc	r29, r25
    14d6:	20 f4       	brcc	.+8      	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xa4>
				{
					xNextTaskUnblockTime = xTimeToWake;
    14d8:	d0 93 9f 03 	sts	0x039F, r29
    14dc:	c0 93 9e 03 	sts	0x039E, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	08 95       	ret

000014ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    14f2:	8f 89       	ldd	r24, Y+23	; 0x17
    14f4:	98 8d       	ldd	r25, Y+24	; 0x18
    14f6:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			vPortFree( pxTCB );
    14fa:	ce 01       	movw	r24, r28
    14fc:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	08 95       	ret

00001506 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1506:	2f 92       	push	r2
    1508:	3f 92       	push	r3
    150a:	4f 92       	push	r4
    150c:	5f 92       	push	r5
    150e:	6f 92       	push	r6
    1510:	7f 92       	push	r7
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	3c 01       	movw	r6, r24
    152a:	5b 01       	movw	r10, r22
    152c:	ea 01       	movw	r28, r20
    152e:	29 01       	movw	r4, r18
    1530:	d0 2e       	mov	r13, r16
    1532:	47 01       	movw	r8, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1534:	ca 01       	movw	r24, r20
    1536:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    153a:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	09 f4       	brne	.+2      	; 0x1542 <xTaskCreate+0x3c>
    1540:	ed c0       	rjmp	.+474    	; 0x171c <xTaskCreate+0x216>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1542:	8a e2       	ldi	r24, 0x2A	; 42
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    154a:	8c 01       	movw	r16, r24

				if( pxNewTCB != NULL )
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	81 f0       	breq	.+32     	; 0x1570 <xTaskCreate+0x6a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1550:	fc 01       	movw	r30, r24
    1552:	f0 8e       	std	Z+24, r15	; 0x18
    1554:	e7 8a       	std	Z+23, r14	; 0x17
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1556:	21 97       	sbiw	r28, 0x01	; 1
    1558:	17 01       	movw	r2, r14
    155a:	2c 0e       	add	r2, r28
    155c:	3d 1e       	adc	r3, r29
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    155e:	f5 01       	movw	r30, r10
    1560:	80 81       	ld	r24, Z
    1562:	f8 01       	movw	r30, r16
    1564:	81 8f       	std	Z+25, r24	; 0x19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1566:	f5 01       	movw	r30, r10
    1568:	80 81       	ld	r24, Z
    156a:	88 23       	and	r24, r24
    156c:	31 f4       	brne	.+12     	; 0x157a <xTaskCreate+0x74>
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <xTaskCreate+0x90>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1570:	c7 01       	movw	r24, r14
    1572:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1576:	8f ef       	ldi	r24, 0xFF	; 255
    1578:	d6 c0       	rjmp	.+428    	; 0x1726 <xTaskCreate+0x220>
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    157a:	e8 01       	movw	r28, r16
    157c:	6a 96       	adiw	r28, 0x1a	; 26
    157e:	d5 01       	movw	r26, r10
    1580:	11 96       	adiw	r26, 0x01	; 1
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1582:	81 e0       	ldi	r24, 0x01	; 1
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    1584:	fd 01       	movw	r30, r26
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1586:	9d 91       	ld	r25, X+
    1588:	99 93       	st	Y+, r25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    158a:	90 81       	ld	r25, Z
    158c:	99 23       	and	r25, r25
    158e:	19 f0       	breq	.+6      	; 0x1596 <xTaskCreate+0x90>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8a 30       	cpi	r24, 0x0A	; 10
    1594:	b9 f7       	brne	.-18     	; 0x1584 <xTaskCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1596:	f8 01       	movw	r30, r16
    1598:	12 a2       	lds	r17, 0x92
    159a:	cd 2d       	mov	r28, r13
    159c:	c5 30       	cpi	r28, 0x05	; 5
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <xTaskCreate+0x9c>
    15a0:	c4 e0       	ldi	r28, 0x04	; 4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    15a2:	f8 01       	movw	r30, r16
    15a4:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    15a6:	c3 a3       	lds	r28, 0x53
		pxNewTCB->uxMutexesHeld = 0;
    15a8:	14 a2       	lds	r17, 0x94
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    15aa:	ee 24       	eor	r14, r14
    15ac:	ff 24       	eor	r15, r15
    15ae:	68 94       	set
    15b0:	e1 f8       	bld	r14, 1
    15b2:	e0 0e       	add	r14, r16
    15b4:	f1 1e       	adc	r15, r17
    15b6:	c7 01       	movw	r24, r14
    15b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    15bc:	c8 01       	movw	r24, r16
    15be:	0c 96       	adiw	r24, 0x0c	; 12
    15c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    15c4:	f8 01       	movw	r30, r16
    15c6:	11 87       	std	Z+9, r17	; 0x09
    15c8:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	8c 1b       	sub	r24, r28
    15d0:	91 09       	sbc	r25, r1
    15d2:	95 87       	std	Z+13, r25	; 0x0d
    15d4:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    15d6:	13 8b       	std	Z+19, r17	; 0x13
    15d8:	02 8b       	std	Z+18, r16	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    15da:	15 a2       	lds	r17, 0x95
    15dc:	16 a2       	lds	r17, 0x96
    15de:	17 a2       	lds	r17, 0x97
    15e0:	10 a6       	lds	r17, 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    15e2:	11 a6       	lds	r17, 0xb1
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    15e4:	c1 01       	movw	r24, r2
    15e6:	b3 01       	movw	r22, r6
    15e8:	a2 01       	movw	r20, r4
    15ea:	0e 94 3d 04 	call	0x87a	; 0x87a <pxPortInitialiseStack>
    15ee:	f8 01       	movw	r30, r16
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    15f4:	81 14       	cp	r8, r1
    15f6:	91 04       	cpc	r9, r1
    15f8:	19 f0       	breq	.+6      	; 0x1600 <xTaskCreate+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    15fa:	f4 01       	movw	r30, r8
    15fc:	11 83       	std	Z+1, r17	; 0x01
    15fe:	00 83       	st	Z, r16

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    1606:	80 91 a7 03 	lds	r24, 0x03A7
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 a7 03 	sts	0x03A7, r24
		if( pxCurrentTCB == NULL )
    1610:	80 91 9b 03 	lds	r24, 0x039B
    1614:	90 91 9c 03 	lds	r25, 0x039C
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	09 f0       	breq	.+2      	; 0x161e <xTaskCreate+0x118>
    161c:	3f c0       	rjmp	.+126    	; 0x169c <xTaskCreate+0x196>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    161e:	10 93 9c 03 	sts	0x039C, r17
    1622:	00 93 9b 03 	sts	0x039B, r16

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1626:	80 91 a7 03 	lds	r24, 0x03A7
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	09 f0       	breq	.+2      	; 0x1630 <xTaskCreate+0x12a>
    162e:	47 c0       	rjmp	.+142    	; 0x16be <xTaskCreate+0x1b8>
    1630:	c0 e0       	ldi	r28, 0x00	; 0
    1632:	d0 e0       	ldi	r29, 0x00	; 0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1634:	ce 01       	movw	r24, r28
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	8c 0f       	add	r24, r28
    1644:	9d 1f       	adc	r25, r29
    1646:	82 55       	subi	r24, 0x52	; 82
    1648:	9c 4f       	sbci	r25, 0xFC	; 252
    164a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
    164e:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1650:	c5 30       	cpi	r28, 0x05	; 5
    1652:	d1 05       	cpc	r29, r1
    1654:	79 f7       	brne	.-34     	; 0x1634 <xTaskCreate+0x12e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1656:	cb ed       	ldi	r28, 0xDB	; 219
    1658:	d3 e0       	ldi	r29, 0x03	; 3
    165a:	ce 01       	movw	r24, r28
    165c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1660:	0f 2e       	mov	r0, r31
    1662:	f4 ee       	ldi	r31, 0xE4	; 228
    1664:	af 2e       	mov	r10, r31
    1666:	f3 e0       	ldi	r31, 0x03	; 3
    1668:	bf 2e       	mov	r11, r31
    166a:	f0 2d       	mov	r31, r0
    166c:	c5 01       	movw	r24, r10
    166e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1672:	8d ee       	ldi	r24, 0xED	; 237
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    167a:	86 ef       	ldi	r24, 0xF6	; 246
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    168a:	d0 93 ac 03 	sts	0x03AC, r29
    168e:	c0 93 ab 03 	sts	0x03AB, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1692:	b0 92 aa 03 	sts	0x03AA, r11
    1696:	a0 92 a9 03 	sts	0x03A9, r10
    169a:	11 c0       	rjmp	.+34     	; 0x16be <xTaskCreate+0x1b8>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    169c:	80 91 a3 03 	lds	r24, 0x03A3
    16a0:	88 23       	and	r24, r24
    16a2:	69 f4       	brne	.+26     	; 0x16be <xTaskCreate+0x1b8>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    16a4:	e0 91 9b 03 	lds	r30, 0x039B
    16a8:	f0 91 9c 03 	lds	r31, 0x039C
    16ac:	96 89       	ldd	r25, Z+22	; 0x16
    16ae:	f8 01       	movw	r30, r16
    16b0:	86 89       	ldd	r24, Z+22	; 0x16
    16b2:	89 17       	cp	r24, r25
    16b4:	20 f0       	brcs	.+8      	; 0x16be <xTaskCreate+0x1b8>
				{
					pxCurrentTCB = pxNewTCB;
    16b6:	10 93 9c 03 	sts	0x039C, r17
    16ba:	00 93 9b 03 	sts	0x039B, r16
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    16be:	80 91 ad 03 	lds	r24, 0x03AD
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	80 93 ad 03 	sts	0x03AD, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    16c8:	f8 01       	movw	r30, r16
    16ca:	86 89       	ldd	r24, Z+22	; 0x16
    16cc:	90 91 a4 03 	lds	r25, 0x03A4
    16d0:	98 17       	cp	r25, r24
    16d2:	10 f4       	brcc	.+4      	; 0x16d8 <xTaskCreate+0x1d2>
    16d4:	80 93 a4 03 	sts	0x03A4, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 01       	movw	r18, r24
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	82 0f       	add	r24, r18
    16ea:	93 1f       	adc	r25, r19
    16ec:	82 55       	subi	r24, 0x52	; 82
    16ee:	9c 4f       	sbci	r25, 0xFC	; 252
    16f0:	b7 01       	movw	r22, r14
    16f2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    16fa:	80 91 a3 03 	lds	r24, 0x03A3
    16fe:	88 23       	and	r24, r24
    1700:	79 f0       	breq	.+30     	; 0x1720 <xTaskCreate+0x21a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1702:	e0 91 9b 03 	lds	r30, 0x039B
    1706:	f0 91 9c 03 	lds	r31, 0x039C
    170a:	96 89       	ldd	r25, Z+22	; 0x16
    170c:	f8 01       	movw	r30, r16
    170e:	86 89       	ldd	r24, Z+22	; 0x16
    1710:	98 17       	cp	r25, r24
    1712:	40 f4       	brcc	.+16     	; 0x1724 <xTaskCreate+0x21e>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1714:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <xTaskCreate+0x220>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <xTaskCreate+0x220>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <xTaskCreate+0x220>
    1724:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	3f 90       	pop	r3
    1746:	2f 90       	pop	r2
    1748:	08 95       	ret

0000174a <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	29 f4       	brne	.+10     	; 0x1766 <vTaskDelete+0x1c>
    175c:	c0 91 9b 03 	lds	r28, 0x039B
    1760:	d0 91 9c 03 	lds	r29, 0x039C
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vTaskDelete+0x1e>
    1766:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1768:	8e 01       	movw	r16, r28
    176a:	0e 5f       	subi	r16, 0xFE	; 254
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	c8 01       	movw	r24, r16
    1770:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1774:	8c 89       	ldd	r24, Y+20	; 0x14
    1776:	9d 89       	ldd	r25, Y+21	; 0x15
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	21 f0       	breq	.+8      	; 0x1784 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    177c:	ce 01       	movw	r24, r28
    177e:	0c 96       	adiw	r24, 0x0c	; 12
    1780:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1784:	80 91 ad 03 	lds	r24, 0x03AD
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	80 93 ad 03 	sts	0x03AD, r24

			if( pxTCB == pxCurrentTCB )
    178e:	80 91 9b 03 	lds	r24, 0x039B
    1792:	90 91 9c 03 	lds	r25, 0x039C
    1796:	c8 17       	cp	r28, r24
    1798:	d9 07       	cpc	r29, r25
    179a:	59 f4       	brne	.+22     	; 0x17b2 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    179c:	86 ef       	ldi	r24, 0xF6	; 246
    179e:	93 e0       	ldi	r25, 0x03	; 3
    17a0:	b8 01       	movw	r22, r16
    17a2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    17a6:	80 91 a8 03 	lds	r24, 0x03A8
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 a8 03 	sts	0x03A8, r24
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    17b2:	80 91 a7 03 	lds	r24, 0x03A7
    17b6:	81 50       	subi	r24, 0x01	; 1
    17b8:	80 93 a7 03 	sts	0x03A7, r24
				prvDeleteTCB( pxTCB );
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 76 0a 	call	0x14ec	; 0x14ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    17c2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    17ca:	80 91 a3 03 	lds	r24, 0x03A3
    17ce:	88 23       	and	r24, r24
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <vTaskDelete+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
    17d2:	80 91 9b 03 	lds	r24, 0x039B
    17d6:	90 91 9c 03 	lds	r25, 0x039C
    17da:	c8 17       	cp	r28, r24
    17dc:	d9 07       	cpc	r29, r25
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vTaskDelete+0x9a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    17e0:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <uxTaskPriorityGet>:
	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	29 f4       	brne	.+10     	; 0x1802 <uxTaskPriorityGet+0x14>
    17f8:	e0 91 9b 03 	lds	r30, 0x039B
    17fc:	f0 91 9c 03 	lds	r31, 0x039C
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <uxTaskPriorityGet+0x16>
    1802:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		taskEXIT_CRITICAL();
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
	}
    1808:	86 89       	ldd	r24, Z+22	; 0x16
    180a:	08 95       	ret

0000180c <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	29 f4       	brne	.+10     	; 0x181a <uxTaskPriorityGetFromISR+0xe>
    1810:	e0 91 9b 03 	lds	r30, 0x039B
    1814:	f0 91 9c 03 	lds	r31, 0x039C
    1818:	01 c0       	rjmp	.+2      	; 0x181c <uxTaskPriorityGetFromISR+0x10>
    181a:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    181c:	86 89       	ldd	r24, Z+22	; 0x16
    181e:	08 95       	ret

00001820 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    182a:	65 30       	cpi	r22, 0x05	; 5
    182c:	08 f0       	brcs	.+2      	; 0x1830 <vTaskPrioritySet+0x10>
    182e:	64 e0       	ldi	r22, 0x04	; 4
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	29 f4       	brne	.+10     	; 0x1844 <vTaskPrioritySet+0x24>
    183a:	c0 91 9b 03 	lds	r28, 0x039B
    183e:	d0 91 9c 03 	lds	r29, 0x039C
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <vTaskPrioritySet+0x26>
    1844:	ec 01       	movw	r28, r24

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    1846:	2b a1       	lds	r18, 0x4b
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    1848:	26 17       	cp	r18, r22
    184a:	09 f4       	brne	.+2      	; 0x184e <vTaskPrioritySet+0x2e>
    184c:	61 c0       	rjmp	.+194    	; 0x1910 <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    184e:	26 17       	cp	r18, r22
    1850:	88 f4       	brcc	.+34     	; 0x1874 <vTaskPrioritySet+0x54>
				{
					if( pxTCB != pxCurrentTCB )
    1852:	80 91 9b 03 	lds	r24, 0x039B
    1856:	90 91 9c 03 	lds	r25, 0x039C
    185a:	c8 17       	cp	r28, r24
    185c:	d9 07       	cpc	r29, r25
    185e:	a1 f0       	breq	.+40     	; 0x1888 <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1860:	e0 91 9b 03 	lds	r30, 0x039B
    1864:	f0 91 9c 03 	lds	r31, 0x039C
						{
							xYieldRequired = pdTRUE;
    1868:	11 e0       	ldi	r17, 0x01	; 1
    186a:	86 89       	ldd	r24, Z+22	; 0x16
    186c:	68 17       	cp	r22, r24
    186e:	68 f4       	brcc	.+26     	; 0x188a <vTaskPrioritySet+0x6a>
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	0b c0       	rjmp	.+22     	; 0x188a <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    1874:	80 91 9b 03 	lds	r24, 0x039B
    1878:	90 91 9c 03 	lds	r25, 0x039C
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
    187c:	11 e0       	ldi	r17, 0x01	; 1
    187e:	c8 17       	cp	r28, r24
    1880:	d9 07       	cpc	r29, r25
    1882:	19 f0       	breq	.+6      	; 0x188a <vTaskPrioritySet+0x6a>
    1884:	10 e0       	ldi	r17, 0x00	; 0
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vTaskPrioritySet+0x6a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1888:	10 e0       	ldi	r17, 0x00	; 0
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    188a:	8e 89       	ldd	r24, Y+22	; 0x16

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    188c:	28 17       	cp	r18, r24
    188e:	09 f4       	brne	.+2      	; 0x1892 <vTaskPrioritySet+0x72>
					{
						pxTCB->uxPriority = uxNewPriority;
    1890:	6e 8b       	std	Y+22, r22	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1892:	6b a3       	lds	r22, 0x5b
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1894:	2c 85       	ldd	r18, Y+12	; 0x0c
    1896:	3d 85       	ldd	r19, Y+13	; 0x0d
    1898:	33 23       	and	r19, r19
    189a:	34 f0       	brlt	.+12     	; 0x18a8 <vTaskPrioritySet+0x88>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    189c:	25 e0       	ldi	r18, 0x05	; 5
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	26 1b       	sub	r18, r22
    18a2:	31 09       	sbc	r19, r1
    18a4:	3d 87       	std	Y+13, r19	; 0x0d
    18a6:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9c 01       	movw	r18, r24
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	82 0f       	add	r24, r18
    18ba:	93 1f       	adc	r25, r19
    18bc:	82 55       	subi	r24, 0x52	; 82
    18be:	9c 4f       	sbci	r25, 0xFC	; 252
    18c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18c4:	28 17       	cp	r18, r24
    18c6:	39 07       	cpc	r19, r25
    18c8:	f9 f4       	brne	.+62     	; 0x1908 <vTaskPrioritySet+0xe8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    18ca:	ee 24       	eor	r14, r14
    18cc:	ff 24       	eor	r15, r15
    18ce:	68 94       	set
    18d0:	e1 f8       	bld	r14, 1
    18d2:	ec 0e       	add	r14, r28
    18d4:	fd 1e       	adc	r15, r29
    18d6:	c7 01       	movw	r24, r14
    18d8:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    18dc:	8e 89       	ldd	r24, Y+22	; 0x16
    18de:	90 91 a4 03 	lds	r25, 0x03A4
    18e2:	98 17       	cp	r25, r24
    18e4:	10 f4       	brcc	.+4      	; 0x18ea <vTaskPrioritySet+0xca>
    18e6:	80 93 a4 03 	sts	0x03A4, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9c 01       	movw	r18, r24
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	82 55       	subi	r24, 0x52	; 82
    1900:	9c 4f       	sbci	r25, 0xFC	; 252
    1902:	b7 01       	movw	r22, r14
    1904:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    1908:	11 23       	and	r17, r17
    190a:	11 f0       	breq	.+4      	; 0x1910 <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    190c:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
	}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec 01       	movw	r28, r24
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	b9 f1       	breq	.+110    	; 0x199c <vTaskResume+0x7c>
    192e:	80 91 9b 03 	lds	r24, 0x039B
    1932:	90 91 9c 03 	lds	r25, 0x039C
    1936:	c8 17       	cp	r28, r24
    1938:	d9 07       	cpc	r29, r25
    193a:	81 f1       	breq	.+96     	; 0x199c <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <prvTaskIsTaskSuspended>
    1948:	88 23       	and	r24, r24
    194a:	31 f1       	breq	.+76     	; 0x1998 <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    194c:	8e 01       	movw	r16, r28
    194e:	0e 5f       	subi	r16, 0xFE	; 254
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1958:	8e 89       	ldd	r24, Y+22	; 0x16
    195a:	90 91 a4 03 	lds	r25, 0x03A4
    195e:	98 17       	cp	r25, r24
    1960:	10 f4       	brcc	.+4      	; 0x1966 <vTaskResume+0x46>
    1962:	80 93 a4 03 	sts	0x03A4, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 01       	movw	r18, r24
    196a:	22 0f       	add	r18, r18
    196c:	33 1f       	adc	r19, r19
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	82 0f       	add	r24, r18
    1978:	93 1f       	adc	r25, r19
    197a:	82 55       	subi	r24, 0x52	; 82
    197c:	9c 4f       	sbci	r25, 0xFC	; 252
    197e:	b8 01       	movw	r22, r16
    1980:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1984:	e0 91 9b 03 	lds	r30, 0x039B
    1988:	f0 91 9c 03 	lds	r31, 0x039C
    198c:	9e 89       	ldd	r25, Y+22	; 0x16
    198e:	86 89       	ldd	r24, Z+22	; 0x16
    1990:	98 17       	cp	r25, r24
    1992:	10 f0       	brcs	.+4      	; 0x1998 <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    1994:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1998:	0f 90       	pop	r0
    199a:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	ec 01       	movw	r28, r24
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    19b2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <prvTaskIsTaskSuspended>
    19b6:	88 23       	and	r24, r24
    19b8:	b9 f1       	breq	.+110    	; 0x1a28 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19ba:	80 91 9d 03 	lds	r24, 0x039D
    19be:	88 23       	and	r24, r24
    19c0:	51 f5       	brne	.+84     	; 0x1a16 <xTaskResumeFromISR+0x70>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    19c2:	e0 91 9b 03 	lds	r30, 0x039B
    19c6:	f0 91 9c 03 	lds	r31, 0x039C

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    19ca:	11 e0       	ldi	r17, 0x01	; 1
    19cc:	9e 89       	ldd	r25, Y+22	; 0x16
    19ce:	86 89       	ldd	r24, Z+22	; 0x16
    19d0:	98 17       	cp	r25, r24
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <xTaskResumeFromISR+0x30>
    19d4:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19d6:	ee 24       	eor	r14, r14
    19d8:	ff 24       	eor	r15, r15
    19da:	68 94       	set
    19dc:	e1 f8       	bld	r14, 1
    19de:	ec 0e       	add	r14, r28
    19e0:	fd 1e       	adc	r15, r29
    19e2:	c7 01       	movw	r24, r14
    19e4:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    19e8:	8e 89       	ldd	r24, Y+22	; 0x16
    19ea:	90 91 a4 03 	lds	r25, 0x03A4
    19ee:	98 17       	cp	r25, r24
    19f0:	10 f4       	brcc	.+4      	; 0x19f6 <xTaskResumeFromISR+0x50>
    19f2:	80 93 a4 03 	sts	0x03A4, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 01       	movw	r18, r24
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	82 55       	subi	r24, 0x52	; 82
    1a0c:	9c 4f       	sbci	r25, 0xFC	; 252
    1a0e:	b7 01       	movw	r22, r14
    1a10:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1a14:	0a c0       	rjmp	.+20     	; 0x1a2a <xTaskResumeFromISR+0x84>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1a16:	be 01       	movw	r22, r28
    1a18:	64 5f       	subi	r22, 0xF4	; 244
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8d ee       	ldi	r24, 0xED	; 237
    1a1e:	93 e0       	ldi	r25, 0x03	; 3
    1a20:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1a24:	10 e0       	ldi	r17, 0x00	; 0
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <xTaskResumeFromISR+0x84>
    1a28:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1a2a:	81 2f       	mov	r24, r17
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	08 95       	ret

00001a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1a3e:	81 e9       	ldi	r24, 0x91	; 145
    1a40:	9e e0       	ldi	r25, 0x0E	; 14
    1a42:	6c e6       	ldi	r22, 0x6C	; 108
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	48 ec       	ldi	r20, 0xC8	; 200
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	00 e0       	ldi	r16, 0x00	; 0
    1a50:	0f 2e       	mov	r0, r31
    1a52:	f8 e0       	ldi	r31, 0x08	; 8
    1a54:	ef 2e       	mov	r14, r31
    1a56:	f4 e0       	ldi	r31, 0x04	; 4
    1a58:	ff 2e       	mov	r15, r31
    1a5a:	f0 2d       	mov	r31, r0
    1a5c:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	81 f4       	brne	.+32     	; 0x1a84 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1a64:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	9f ef       	ldi	r25, 0xFF	; 255
    1a6a:	90 93 9f 03 	sts	0x039F, r25
    1a6e:	80 93 9e 03 	sts	0x039E, r24
		xSchedulerRunning = pdTRUE;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 a3 03 	sts	0x03A3, r24
		xTickCount = ( TickType_t ) 0U;
    1a78:	10 92 a6 03 	sts	0x03A6, r1
    1a7c:	10 92 a5 03 	sts	0x03A5, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1a80:	0e 94 cd 04 	call	0x99a	; 0x99a <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	08 95       	ret

00001a8c <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1a8c:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1a8e:	10 92 a3 03 	sts	0x03A3, r1
	vPortEndScheduler();
    1a92:	0e 94 02 05 	call	0xa04	; 0xa04 <vPortEndScheduler>
}
    1a96:	08 95       	ret

00001a98 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1a98:	80 91 9d 03 	lds	r24, 0x039D
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	80 93 9d 03 	sts	0x039D, r24
}
    1aa2:	08 95       	ret

00001aa4 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1aaa:	80 91 a5 03 	lds	r24, 0x03A5
    1aae:	90 91 a6 03 	lds	r25, 0x03A6
	}
	portTICK_TYPE_EXIT_CRITICAL();
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1ab6:	08 95       	ret

00001ab8 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    1ab8:	80 91 a5 03 	lds	r24, 0x03A5
    1abc:	90 91 a6 03 	lds	r25, 0x03A6
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1ac0:	08 95       	ret

00001ac2 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1ac2:	80 91 a7 03 	lds	r24, 0x03A7
}
    1ac6:	08 95       	ret

00001ac8 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <pcTaskGetName+0xc>
    1acc:	80 91 9b 03 	lds	r24, 0x039B
    1ad0:	90 91 9c 03 	lds	r25, 0x039C
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    1ad4:	49 96       	adiw	r24, 0x19	; 25
}
    1ad6:	08 95       	ret

00001ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ae8:	80 91 9d 03 	lds	r24, 0x039D
    1aec:	88 23       	and	r24, r24
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <xTaskIncrementTick+0x1a>
    1af0:	82 c0       	rjmp	.+260    	; 0x1bf6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1af2:	c0 90 a5 03 	lds	r12, 0x03A5
    1af6:	d0 90 a6 03 	lds	r13, 0x03A6
    1afa:	08 94       	sec
    1afc:	c1 1c       	adc	r12, r1
    1afe:	d1 1c       	adc	r13, r1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1b00:	d0 92 a6 03 	sts	0x03A6, r13
    1b04:	c0 92 a5 03 	sts	0x03A5, r12

		if( xConstTickCount == ( TickType_t ) 0U )
    1b08:	c1 14       	cp	r12, r1
    1b0a:	d1 04       	cpc	r13, r1
    1b0c:	b9 f4       	brne	.+46     	; 0x1b3c <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
    1b0e:	80 91 ab 03 	lds	r24, 0x03AB
    1b12:	90 91 ac 03 	lds	r25, 0x03AC
    1b16:	20 91 a9 03 	lds	r18, 0x03A9
    1b1a:	30 91 aa 03 	lds	r19, 0x03AA
    1b1e:	30 93 ac 03 	sts	0x03AC, r19
    1b22:	20 93 ab 03 	sts	0x03AB, r18
    1b26:	90 93 aa 03 	sts	0x03AA, r25
    1b2a:	80 93 a9 03 	sts	0x03A9, r24
    1b2e:	80 91 a0 03 	lds	r24, 0x03A0
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	80 93 a0 03 	sts	0x03A0, r24
    1b38:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b3c:	80 91 9e 03 	lds	r24, 0x039E
    1b40:	90 91 9f 03 	lds	r25, 0x039F
    1b44:	c8 16       	cp	r12, r24
    1b46:	d9 06       	cpc	r13, r25
    1b48:	20 f4       	brcc	.+8      	; 0x1b52 <xTaskIncrementTick+0x7a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1b4a:	ff 24       	eor	r15, r15
    1b4c:	5a c0       	rjmp	.+180    	; 0x1c02 <xTaskIncrementTick+0x12a>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b4e:	fe 2c       	mov	r15, r14
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <xTaskIncrementTick+0x80>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b52:	ff 24       	eor	r15, r15
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b54:	ee 24       	eor	r14, r14
    1b56:	e3 94       	inc	r14
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b58:	e0 91 ab 03 	lds	r30, 0x03AB
    1b5c:	f0 91 ac 03 	lds	r31, 0x03AC
    1b60:	80 81       	ld	r24, Z
    1b62:	88 23       	and	r24, r24
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <xTaskIncrementTick+0x9c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	9f ef       	ldi	r25, 0xFF	; 255
    1b6a:	90 93 9f 03 	sts	0x039F, r25
    1b6e:	80 93 9e 03 	sts	0x039E, r24
					break;
    1b72:	47 c0       	rjmp	.+142    	; 0x1c02 <xTaskIncrementTick+0x12a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1b74:	e0 91 ab 03 	lds	r30, 0x03AB
    1b78:	f0 91 ac 03 	lds	r31, 0x03AC
    1b7c:	05 80       	ldd	r0, Z+5	; 0x05
    1b7e:	f6 81       	ldd	r31, Z+6	; 0x06
    1b80:	e0 2d       	mov	r30, r0
    1b82:	c6 81       	ldd	r28, Z+6	; 0x06
    1b84:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    1b8a:	c8 16       	cp	r12, r24
    1b8c:	d9 06       	cpc	r13, r25
    1b8e:	28 f4       	brcc	.+10     	; 0x1b9a <xTaskIncrementTick+0xc2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1b90:	90 93 9f 03 	sts	0x039F, r25
    1b94:	80 93 9e 03 	sts	0x039E, r24
						break;
    1b98:	34 c0       	rjmp	.+104    	; 0x1c02 <xTaskIncrementTick+0x12a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	0e 5f       	subi	r16, 0xFE	; 254
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1ba6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ba8:	9d 89       	ldd	r25, Y+21	; 0x15
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	21 f0       	breq	.+8      	; 0x1bb6 <xTaskIncrementTick+0xde>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1bae:	ce 01       	movw	r24, r28
    1bb0:	0c 96       	adiw	r24, 0x0c	; 12
    1bb2:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1bb8:	90 91 a4 03 	lds	r25, 0x03A4
    1bbc:	98 17       	cp	r25, r24
    1bbe:	10 f4       	brcc	.+4      	; 0x1bc4 <xTaskIncrementTick+0xec>
    1bc0:	80 93 a4 03 	sts	0x03A4, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	22 0f       	add	r18, r18
    1bca:	33 1f       	adc	r19, r19
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	22 0f       	add	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	82 0f       	add	r24, r18
    1bd6:	93 1f       	adc	r25, r19
    1bd8:	82 55       	subi	r24, 0x52	; 82
    1bda:	9c 4f       	sbci	r25, 0xFC	; 252
    1bdc:	b8 01       	movw	r22, r16
    1bde:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1be2:	e0 91 9b 03 	lds	r30, 0x039B
    1be6:	f0 91 9c 03 	lds	r31, 0x039C
    1bea:	9e 89       	ldd	r25, Y+22	; 0x16
    1bec:	86 89       	ldd	r24, Z+22	; 0x16
    1bee:	98 17       	cp	r25, r24
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <xTaskIncrementTick+0x11c>
    1bf2:	ad cf       	rjmp	.-166    	; 0x1b4e <xTaskIncrementTick+0x76>
    1bf4:	b1 cf       	rjmp	.-158    	; 0x1b58 <xTaskIncrementTick+0x80>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1bf6:	80 91 a2 03 	lds	r24, 0x03A2
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 a2 03 	sts	0x03A2, r24

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1c00:	ff 24       	eor	r15, r15
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1c02:	80 91 a1 03 	lds	r24, 0x03A1
    1c06:	88 23       	and	r24, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
    1c0a:	ff 24       	eor	r15, r15
    1c0c:	f3 94       	inc	r15
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1c0e:	8f 2d       	mov	r24, r15
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	ef 90       	pop	r14
    1c1c:	df 90       	pop	r13
    1c1e:	cf 90       	pop	r12
    1c20:	08 95       	ret

00001c22 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1c36:	80 91 9d 03 	lds	r24, 0x039D
    1c3a:	81 50       	subi	r24, 0x01	; 1
    1c3c:	80 93 9d 03 	sts	0x039D, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c40:	80 91 9d 03 	lds	r24, 0x039D
    1c44:	88 23       	and	r24, r24
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <xTaskResumeAll+0x28>
    1c48:	5f c0       	rjmp	.+190    	; 0x1d08 <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1c4a:	80 91 a7 03 	lds	r24, 0x03A7
    1c4e:	88 23       	and	r24, r24
    1c50:	91 f5       	brne	.+100    	; 0x1cb6 <xTaskResumeAll+0x94>
    1c52:	5d c0       	rjmp	.+186    	; 0x1d0e <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1c54:	e0 91 f2 03 	lds	r30, 0x03F2
    1c58:	f0 91 f3 03 	lds	r31, 0x03F3
    1c5c:	c6 81       	ldd	r28, Z+6	; 0x06
    1c5e:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c60:	ce 01       	movw	r24, r28
    1c62:	0c 96       	adiw	r24, 0x0c	; 12
    1c64:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c68:	8e 01       	movw	r16, r28
    1c6a:	0e 5f       	subi	r16, 0xFE	; 254
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	c8 01       	movw	r24, r16
    1c70:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c74:	8e 89       	ldd	r24, Y+22	; 0x16
    1c76:	90 91 a4 03 	lds	r25, 0x03A4
    1c7a:	98 17       	cp	r25, r24
    1c7c:	10 f4       	brcc	.+4      	; 0x1c82 <xTaskResumeAll+0x60>
    1c7e:	80 93 a4 03 	sts	0x03A4, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 01       	movw	r18, r24
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	82 55       	subi	r24, 0x52	; 82
    1c98:	9c 4f       	sbci	r25, 0xFC	; 252
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1ca0:	e0 91 9b 03 	lds	r30, 0x039B
    1ca4:	f0 91 9c 03 	lds	r31, 0x039C
    1ca8:	9e 89       	ldd	r25, Y+22	; 0x16
    1caa:	86 89       	ldd	r24, Z+22	; 0x16
    1cac:	98 17       	cp	r25, r24
    1cae:	68 f0       	brcs	.+26     	; 0x1cca <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
    1cb0:	d0 92 a1 03 	sts	0x03A1, r13
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <xTaskResumeAll+0xa8>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1cb6:	c0 e0       	ldi	r28, 0x00	; 0
    1cb8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cba:	0f 2e       	mov	r0, r31
    1cbc:	fd ee       	ldi	r31, 0xED	; 237
    1cbe:	ef 2e       	mov	r14, r31
    1cc0:	f3 e0       	ldi	r31, 0x03	; 3
    1cc2:	ff 2e       	mov	r15, r31
    1cc4:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    1cc6:	dd 24       	eor	r13, r13
    1cc8:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cca:	f7 01       	movw	r30, r14
    1ccc:	80 81       	ld	r24, Z
    1cce:	88 23       	and	r24, r24
    1cd0:	09 f6       	brne	.-126    	; 0x1c54 <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1cd2:	20 97       	sbiw	r28, 0x00	; 0
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1cd6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1cda:	c0 91 a2 03 	lds	r28, 0x03A2

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1cde:	cc 23       	and	r28, r28
    1ce0:	59 f0       	breq	.+22     	; 0x1cf8 <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
    1ce2:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1ce4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskIncrementTick>
    1ce8:	88 23       	and	r24, r24
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
    1cec:	00 93 a1 03 	sts	0x03A1, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1cf0:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1cf2:	c1 f7       	brne	.-16     	; 0x1ce4 <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
    1cf4:	10 92 a2 03 	sts	0x03A2, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1cf8:	80 91 a1 03 	lds	r24, 0x03A1
    1cfc:	88 23       	and	r24, r24
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <xTaskResumeAll+0xea>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1d00:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <xTaskResumeAll+0xec>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <xTaskResumeAll+0xec>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	08 95       	ret

00001d22 <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d22:	06 ef       	ldi	r16, 0xF6	; 246
    1d24:	13 e0       	ldi	r17, 0x03	; 3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d26:	0f 2e       	mov	r0, r31
    1d28:	fe ea       	ldi	r31, 0xAE	; 174
    1d2a:	ef 2e       	mov	r14, r31
    1d2c:	f3 e0       	ldi	r31, 0x03	; 3
    1d2e:	ff 2e       	mov	r15, r31
    1d30:	f0 2d       	mov	r31, r0
    1d32:	24 c0       	rjmp	.+72     	; 0x1d7c <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1d34:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d38:	f8 01       	movw	r30, r16
    1d3a:	c0 81       	ld	r28, Z
			}
			( void ) xTaskResumeAll();
    1d3c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1d40:	cc 23       	and	r28, r28
    1d42:	e1 f0       	breq	.+56     	; 0x1d7c <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1d4a:	e0 91 fb 03 	lds	r30, 0x03FB
    1d4e:	f0 91 fc 03 	lds	r31, 0x03FC
    1d52:	c6 81       	ldd	r28, Z+6	; 0x06
    1d54:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1d56:	ce 01       	movw	r24, r28
    1d58:	02 96       	adiw	r24, 0x02	; 2
    1d5a:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					--uxCurrentNumberOfTasks;
    1d5e:	80 91 a7 03 	lds	r24, 0x03A7
    1d62:	81 50       	subi	r24, 0x01	; 1
    1d64:	80 93 a7 03 	sts	0x03A7, r24
					--uxDeletedTasksWaitingCleanUp;
    1d68:	80 91 a8 03 	lds	r24, 0x03A8
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	80 93 a8 03 	sts	0x03A8, r24
				}
				taskEXIT_CRITICAL();
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    1d76:	ce 01       	movw	r24, r28
    1d78:	0e 94 76 0a 	call	0x14ec	; 0x14ec <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1d7c:	80 91 a8 03 	lds	r24, 0x03A8
    1d80:	88 23       	and	r24, r24
    1d82:	c1 f6       	brne	.-80     	; 0x1d34 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d84:	f7 01       	movw	r30, r14
    1d86:	80 81       	ld	r24, Z
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	c0 f3       	brcs	.-16     	; 0x1d7c <prvIdleTask+0x5a>
			{
				taskYIELD();
    1d8c:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    1d90:	f5 cf       	rjmp	.-22     	; 0x1d7c <prvIdleTask+0x5a>

00001d92 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	51 f0       	breq	.+20     	; 0x1db0 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1d9c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1da0:	ce 01       	movw	r24, r28
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1da8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1dac:	88 23       	and	r24, r24
    1dae:	11 f4       	brne	.+4      	; 0x1db4 <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
    1db0:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	8c 01       	movw	r16, r24
    1dc4:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    1dc6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1dca:	80 91 a5 03 	lds	r24, 0x03A5
    1dce:	90 91 a6 03 	lds	r25, 0x03A6

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	20 81       	ld	r18, Z
    1dd6:	31 81       	ldd	r19, Z+1	; 0x01
    1dd8:	c2 0f       	add	r28, r18
    1dda:	d3 1f       	adc	r29, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1ddc:	82 17       	cp	r24, r18
    1dde:	93 07       	cpc	r25, r19
    1de0:	48 f4       	brcc	.+18     	; 0x1df4 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1de2:	c2 17       	cp	r28, r18
    1de4:	d3 07       	cpc	r29, r19
    1de6:	f8 f4       	brcc	.+62     	; 0x1e26 <vTaskDelayUntil+0x6c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1de8:	d1 83       	std	Z+1, r29	; 0x01
    1dea:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    1dec:	8c 17       	cp	r24, r28
    1dee:	9d 07       	cpc	r25, r29
    1df0:	78 f4       	brcc	.+30     	; 0x1e10 <vTaskDelayUntil+0x56>
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1df4:	c2 17       	cp	r28, r18
    1df6:	d3 07       	cpc	r29, r19
    1df8:	90 f0       	brcs	.+36     	; 0x1e1e <vTaskDelayUntil+0x64>
    1dfa:	8c 17       	cp	r24, r28
    1dfc:	9d 07       	cpc	r25, r29
    1dfe:	78 f0       	brcs	.+30     	; 0x1e1e <vTaskDelayUntil+0x64>
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1e02:	9e 01       	movw	r18, r28
    1e04:	28 1b       	sub	r18, r24
    1e06:	39 0b       	sbc	r19, r25
    1e08:	c9 01       	movw	r24, r18
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1e10:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e14:	88 23       	and	r24, r24
    1e16:	59 f4       	brne	.+22     	; 0x1e2e <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    1e18:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1e1e:	f8 01       	movw	r30, r16
    1e20:	d1 83       	std	Z+1, r29	; 0x01
    1e22:	c0 83       	st	Z, r28
    1e24:	ee cf       	rjmp	.-36     	; 0x1e02 <vTaskDelayUntil+0x48>
    1e26:	f8 01       	movw	r30, r16
    1e28:	d1 83       	std	Z+1, r29	; 0x01
    1e2a:	c0 83       	st	Z, r28
    1e2c:	f1 cf       	rjmp	.-30     	; 0x1e10 <vTaskDelayUntil+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	08 95       	ret

00001e38 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1e38:	80 91 9d 03 	lds	r24, 0x039D
    1e3c:	88 23       	and	r24, r24
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 93 a1 03 	sts	0x03A1, r24
    1e46:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1e48:	10 92 a1 03 	sts	0x03A1, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1e4c:	20 91 a4 03 	lds	r18, 0x03A4
    1e50:	82 2f       	mov	r24, r18
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	fc 01       	movw	r30, r24
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	e8 0f       	add	r30, r24
    1e64:	f9 1f       	adc	r31, r25
    1e66:	e2 55       	subi	r30, 0x52	; 82
    1e68:	fc 4f       	sbci	r31, 0xFC	; 252
    1e6a:	30 81       	ld	r19, Z
    1e6c:	33 23       	and	r19, r19
    1e6e:	89 f4       	brne	.+34     	; 0x1e92 <vTaskSwitchContext+0x5a>
    1e70:	21 50       	subi	r18, 0x01	; 1
    1e72:	82 2f       	mov	r24, r18
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e8 0f       	add	r30, r24
    1e86:	f9 1f       	adc	r31, r25
    1e88:	e2 55       	subi	r30, 0x52	; 82
    1e8a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e8c:	30 81       	ld	r19, Z
    1e8e:	33 23       	and	r19, r19
    1e90:	79 f3       	breq	.-34     	; 0x1e70 <vTaskSwitchContext+0x38>
    1e92:	dc 01       	movw	r26, r24
    1e94:	aa 0f       	add	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	aa 0f       	add	r26, r26
    1e9a:	bb 1f       	adc	r27, r27
    1e9c:	aa 0f       	add	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	8a 0f       	add	r24, r26
    1ea2:	9b 1f       	adc	r25, r27
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	a2 55       	subi	r26, 0x52	; 82
    1ea8:	bc 4f       	sbci	r27, 0xFC	; 252
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	12 97       	sbiw	r26, 0x02	; 2
    1eb2:	02 80       	ldd	r0, Z+2	; 0x02
    1eb4:	f3 81       	ldd	r31, Z+3	; 0x03
    1eb6:	e0 2d       	mov	r30, r0
    1eb8:	12 96       	adiw	r26, 0x02	; 2
    1eba:	fc 93       	st	X, r31
    1ebc:	ee 93       	st	-X, r30
    1ebe:	11 97       	sbiw	r26, 0x01	; 1
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	03 96       	adiw	r24, 0x03	; 3
    1ec4:	e8 17       	cp	r30, r24
    1ec6:	f9 07       	cpc	r31, r25
    1ec8:	31 f4       	brne	.+12     	; 0x1ed6 <vTaskSwitchContext+0x9e>
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	12 96       	adiw	r26, 0x02	; 2
    1ed0:	9c 93       	st	X, r25
    1ed2:	8e 93       	st	-X, r24
    1ed4:	11 97       	sbiw	r26, 0x01	; 1
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	ed 91       	ld	r30, X+
    1eda:	fc 91       	ld	r31, X
    1edc:	12 97       	sbiw	r26, 0x02	; 2
    1ede:	86 81       	ldd	r24, Z+6	; 0x06
    1ee0:	97 81       	ldd	r25, Z+7	; 0x07
    1ee2:	90 93 9c 03 	sts	0x039C, r25
    1ee6:	80 93 9b 03 	sts	0x039B, r24
    1eea:	20 93 a4 03 	sts	0x03A4, r18
    1eee:	08 95       	ret

00001ef0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <vTaskSuspend+0x1c>
    1f02:	00 91 9b 03 	lds	r16, 0x039B
    1f06:	10 91 9c 03 	lds	r17, 0x039C
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <vTaskSuspend+0x1e>
    1f0c:	8c 01       	movw	r16, r24

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f0e:	e8 01       	movw	r28, r16
    1f10:	22 96       	adiw	r28, 0x02	; 2
    1f12:	ce 01       	movw	r24, r28
    1f14:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1f18:	f8 01       	movw	r30, r16
    1f1a:	84 89       	ldd	r24, Z+20	; 0x14
    1f1c:	95 89       	ldd	r25, Z+21	; 0x15
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	21 f0       	breq	.+8      	; 0x1f2a <vTaskSuspend+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f22:	c8 01       	movw	r24, r16
    1f24:	0c 96       	adiw	r24, 0x0c	; 12
    1f26:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	93 e0       	ldi	r25, 0x03	; 3
    1f2e:	be 01       	movw	r22, r28
    1f30:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    1f38:	80 91 a3 03 	lds	r24, 0x03A3
    1f3c:	88 23       	and	r24, r24
    1f3e:	39 f0       	breq	.+14     	; 0x1f4e <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    1f46:	0e 94 ff 09 	call	0x13fe	; 0x13fe <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    1f4e:	80 91 9b 03 	lds	r24, 0x039B
    1f52:	90 91 9c 03 	lds	r25, 0x039C
    1f56:	08 17       	cp	r16, r24
    1f58:	19 07       	cpc	r17, r25
    1f5a:	a1 f4       	brne	.+40     	; 0x1f84 <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    1f5c:	80 91 a3 03 	lds	r24, 0x03A3
    1f60:	88 23       	and	r24, r24
    1f62:	19 f0       	breq	.+6      	; 0x1f6a <vTaskSuspend+0x7a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1f64:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    1f68:	0d c0       	rjmp	.+26     	; 0x1f84 <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1f6a:	80 91 a7 03 	lds	r24, 0x03A7
    1f6e:	90 91 ff 03 	lds	r25, 0x03FF
    1f72:	98 17       	cp	r25, r24
    1f74:	29 f4       	brne	.+10     	; 0x1f80 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1f76:	10 92 9c 03 	sts	0x039C, r1
    1f7a:	10 92 9b 03 	sts	0x039B, r1
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    1f80:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1f94:	60 91 9b 03 	lds	r22, 0x039B
    1f98:	70 91 9c 03 	lds	r23, 0x039C
    1f9c:	64 5f       	subi	r22, 0xF4	; 244
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>
}
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1fb8:	e0 91 9b 03 	lds	r30, 0x039B
    1fbc:	f0 91 9c 03 	lds	r31, 0x039C
    1fc0:	70 68       	ori	r23, 0x80	; 128
    1fc2:	75 87       	std	Z+13, r23	; 0x0d
    1fc4:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fc6:	60 91 9b 03 	lds	r22, 0x039B
    1fca:	70 91 9c 03 	lds	r23, 0x039C
    1fce:	64 5f       	subi	r22, 0xF4	; 244
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>
}
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1fe4:	0f 93       	push	r16
    1fe6:	1f 93       	push	r17
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1fec:	dc 01       	movw	r26, r24
    1fee:	15 96       	adiw	r26, 0x05	; 5
    1ff0:	ed 91       	ld	r30, X+
    1ff2:	fc 91       	ld	r31, X
    1ff4:	16 97       	sbiw	r26, 0x06	; 6
    1ff6:	06 81       	ldd	r16, Z+6	; 0x06
    1ff8:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1ffa:	e8 01       	movw	r28, r16
    1ffc:	2c 96       	adiw	r28, 0x0c	; 12
    1ffe:	ce 01       	movw	r24, r28
    2000:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2004:	80 91 9d 03 	lds	r24, 0x039D
    2008:	88 23       	and	r24, r24
    200a:	e9 f4       	brne	.+58     	; 0x2046 <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    200c:	e8 01       	movw	r28, r16
    200e:	22 96       	adiw	r28, 0x02	; 2
    2010:	ce 01       	movw	r24, r28
    2012:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    2016:	f8 01       	movw	r30, r16
    2018:	86 89       	ldd	r24, Z+22	; 0x16
    201a:	90 91 a4 03 	lds	r25, 0x03A4
    201e:	98 17       	cp	r25, r24
    2020:	10 f4       	brcc	.+4      	; 0x2026 <xTaskRemoveFromEventList+0x42>
    2022:	80 93 a4 03 	sts	0x03A4, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9c 01       	movw	r18, r24
    202a:	22 0f       	add	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	82 0f       	add	r24, r18
    2038:	93 1f       	adc	r25, r19
    203a:	82 55       	subi	r24, 0x52	; 82
    203c:	9c 4f       	sbci	r25, 0xFC	; 252
    203e:	be 01       	movw	r22, r28
    2040:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2046:	8d ee       	ldi	r24, 0xED	; 237
    2048:	93 e0       	ldi	r25, 0x03	; 3
    204a:	be 01       	movw	r22, r28
    204c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2050:	e0 91 9b 03 	lds	r30, 0x039B
    2054:	f0 91 9c 03 	lds	r31, 0x039C
    2058:	d8 01       	movw	r26, r16
    205a:	56 96       	adiw	r26, 0x16	; 22
    205c:	9c 91       	ld	r25, X
    205e:	56 97       	sbiw	r26, 0x16	; 22
    2060:	86 89       	ldd	r24, Z+22	; 0x16
    2062:	89 17       	cp	r24, r25
    2064:	20 f4       	brcc	.+8      	; 0x206e <xTaskRemoveFromEventList+0x8a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	80 93 a1 03 	sts	0x03A1, r24
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		xReturn = pdFALSE;
    206e:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret

0000207a <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2082:	70 68       	ori	r23, 0x80	; 128
    2084:	fc 01       	movw	r30, r24
    2086:	71 83       	std	Z+1, r23	; 0x01
    2088:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    208a:	c6 81       	ldd	r28, Z+6	; 0x06
    208c:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    208e:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2092:	8e 01       	movw	r16, r28
    2094:	0e 5f       	subi	r16, 0xFE	; 254
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	c8 01       	movw	r24, r16
    209a:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    209e:	8e 89       	ldd	r24, Y+22	; 0x16
    20a0:	90 91 a4 03 	lds	r25, 0x03A4
    20a4:	98 17       	cp	r25, r24
    20a6:	10 f4       	brcc	.+4      	; 0x20ac <xTaskRemoveFromUnorderedEventList+0x32>
    20a8:	80 93 a4 03 	sts	0x03A4, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	22 0f       	add	r18, r18
    20b6:	33 1f       	adc	r19, r19
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	82 0f       	add	r24, r18
    20be:	93 1f       	adc	r25, r19
    20c0:	82 55       	subi	r24, 0x52	; 82
    20c2:	9c 4f       	sbci	r25, 0xFC	; 252
    20c4:	b8 01       	movw	r22, r16
    20c6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    20ca:	e0 91 9b 03 	lds	r30, 0x039B
    20ce:	f0 91 9c 03 	lds	r31, 0x039C
    20d2:	9e 89       	ldd	r25, Y+22	; 0x16
    20d4:	86 89       	ldd	r24, Z+22	; 0x16
    20d6:	89 17       	cp	r24, r25
    20d8:	20 f4       	brcc	.+8      	; 0x20e2 <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 a1 03 	sts	0x03A1, r24
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    20e2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    20ee:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    20f0:	80 91 a0 03 	lds	r24, 0x03A0
    20f4:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    20f6:	80 91 a5 03 	lds	r24, 0x03A5
    20fa:	90 91 a6 03 	lds	r25, 0x03A6
    20fe:	92 83       	std	Z+2, r25	; 0x02
    2100:	81 83       	std	Z+1, r24	; 0x01
}
    2102:	08 95       	ret

00002104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2104:	fc 01       	movw	r30, r24
    2106:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    210e:	60 91 a5 03 	lds	r22, 0x03A5
    2112:	70 91 a6 03 	lds	r23, 0x03A6
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    2116:	4d 91       	ld	r20, X+
    2118:	5c 91       	ld	r21, X
    211a:	11 97       	sbiw	r26, 0x01	; 1
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	4f 3f       	cpi	r20, 0xFF	; 255
    2120:	58 07       	cpc	r21, r24
    2122:	e9 f0       	breq	.+58     	; 0x215e <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2124:	80 91 a0 03 	lds	r24, 0x03A0
    2128:	90 81       	ld	r25, Z
    212a:	98 17       	cp	r25, r24
    212c:	29 f0       	breq	.+10     	; 0x2138 <xTaskCheckForTimeOut+0x34>
    212e:	81 81       	ldd	r24, Z+1	; 0x01
    2130:	92 81       	ldd	r25, Z+2	; 0x02
    2132:	68 17       	cp	r22, r24
    2134:	79 07       	cpc	r23, r25
    2136:	a8 f4       	brcc	.+42     	; 0x2162 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2138:	81 81       	ldd	r24, Z+1	; 0x01
    213a:	92 81       	ldd	r25, Z+2	; 0x02
    213c:	9b 01       	movw	r18, r22
    213e:	28 1b       	sub	r18, r24
    2140:	39 0b       	sbc	r19, r25
    2142:	24 17       	cp	r18, r20
    2144:	35 07       	cpc	r19, r21
    2146:	78 f4       	brcc	.+30     	; 0x2166 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    2148:	86 1b       	sub	r24, r22
    214a:	97 0b       	sbc	r25, r23
    214c:	84 0f       	add	r24, r20
    214e:	95 1f       	adc	r25, r21
    2150:	8d 93       	st	X+, r24
    2152:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    2154:	cf 01       	movw	r24, r30
    2156:	0e 94 77 10 	call	0x20ee	; 0x20ee <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <xTaskCheckForTimeOut+0x64>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	03 c0       	rjmp	.+6      	; 0x2168 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2166:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    216c:	08 95       	ret

0000216e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 93 a1 03 	sts	0x03A1, r24
}
    2174:	08 95       	ret

00002176 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2176:	80 91 9b 03 	lds	r24, 0x039B
    217a:	90 91 9c 03 	lds	r25, 0x039C

		return xReturn;
	}
    217e:	08 95       	ret

00002180 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	09 f4       	brne	.+2      	; 0x2190 <vTaskPriorityInherit+0x10>
    218e:	51 c0       	rjmp	.+162    	; 0x2232 <vTaskPriorityInherit+0xb2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2190:	8e 89       	ldd	r24, Y+22	; 0x16
    2192:	e0 91 9b 03 	lds	r30, 0x039B
    2196:	f0 91 9c 03 	lds	r31, 0x039C
    219a:	96 89       	ldd	r25, Z+22	; 0x16
    219c:	89 17       	cp	r24, r25
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <vTaskPriorityInherit+0x22>
    21a0:	48 c0       	rjmp	.+144    	; 0x2232 <vTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    21a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    21a4:	3d 85       	ldd	r19, Y+13	; 0x0d
    21a6:	33 23       	and	r19, r19
    21a8:	5c f0       	brlt	.+22     	; 0x21c0 <vTaskPriorityInherit+0x40>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21aa:	e0 91 9b 03 	lds	r30, 0x039B
    21ae:	f0 91 9c 03 	lds	r31, 0x039C
    21b2:	96 89       	ldd	r25, Z+22	; 0x16
    21b4:	25 e0       	ldi	r18, 0x05	; 5
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	29 1b       	sub	r18, r25
    21ba:	31 09       	sbc	r19, r1
    21bc:	3d 87       	std	Y+13, r19	; 0x0d
    21be:	2c 87       	std	Y+12, r18	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 01       	movw	r18, r24
    21c4:	22 0f       	add	r18, r18
    21c6:	33 1f       	adc	r19, r19
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	82 0f       	add	r24, r18
    21d2:	93 1f       	adc	r25, r19
    21d4:	82 55       	subi	r24, 0x52	; 82
    21d6:	9c 4f       	sbci	r25, 0xFC	; 252
    21d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    21da:	3b 85       	ldd	r19, Y+11	; 0x0b
    21dc:	28 17       	cp	r18, r24
    21de:	39 07       	cpc	r19, r25
    21e0:	11 f5       	brne	.+68     	; 0x2226 <vTaskPriorityInherit+0xa6>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    21e2:	8e 01       	movw	r16, r28
    21e4:	0e 5f       	subi	r16, 0xFE	; 254
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	c8 01       	movw	r24, r16
    21ea:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21ee:	e0 91 9b 03 	lds	r30, 0x039B
    21f2:	f0 91 9c 03 	lds	r31, 0x039C
    21f6:	86 89       	ldd	r24, Z+22	; 0x16
    21f8:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    21fa:	90 91 a4 03 	lds	r25, 0x03A4
    21fe:	98 17       	cp	r25, r24
    2200:	10 f4       	brcc	.+4      	; 0x2206 <vTaskPriorityInherit+0x86>
    2202:	80 93 a4 03 	sts	0x03A4, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9c 01       	movw	r18, r24
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	22 0f       	add	r18, r18
    2210:	33 1f       	adc	r19, r19
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	82 0f       	add	r24, r18
    2218:	93 1f       	adc	r25, r19
    221a:	82 55       	subi	r24, 0x52	; 82
    221c:	9c 4f       	sbci	r25, 0xFC	; 252
    221e:	b8 01       	movw	r22, r16
    2220:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2224:	06 c0       	rjmp	.+12     	; 0x2232 <vTaskPriorityInherit+0xb2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2226:	e0 91 9b 03 	lds	r30, 0x039B
    222a:	f0 91 9c 03 	lds	r31, 0x039C
    222e:	86 89       	ldd	r24, Z+22	; 0x16
    2230:	8e 8b       	std	Y+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    223c:	0f 93       	push	r16
    223e:	1f 93       	push	r17
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	81 f1       	breq	.+96     	; 0x22aa <xTaskPriorityDisinherit+0x6e>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    224a:	8c a1       	lds	r24, 0x4c
    224c:	81 50       	subi	r24, 0x01	; 1
    224e:	8c a3       	lds	r24, 0x5c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2250:	2e 89       	ldd	r18, Y+22	; 0x16
    2252:	9b a1       	lds	r25, 0x4b
    2254:	29 17       	cp	r18, r25
    2256:	59 f1       	breq	.+86     	; 0x22ae <xTaskPriorityDisinherit+0x72>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2258:	88 23       	and	r24, r24
    225a:	59 f5       	brne	.+86     	; 0x22b2 <xTaskPriorityDisinherit+0x76>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    225c:	8e 01       	movw	r16, r28
    225e:	0e 5f       	subi	r16, 0xFE	; 254
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	c8 01       	movw	r24, r16
    2264:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2268:	4b a1       	lds	r20, 0x4b
    226a:	4e 8b       	std	Y+22, r20	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    226c:	24 2f       	mov	r18, r20
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	85 e0       	ldi	r24, 0x05	; 5
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	82 1b       	sub	r24, r18
    2276:	93 0b       	sbc	r25, r19
    2278:	9d 87       	std	Y+13, r25	; 0x0d
    227a:	8c 87       	std	Y+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    227c:	80 91 a4 03 	lds	r24, 0x03A4
    2280:	84 17       	cp	r24, r20
    2282:	10 f4       	brcc	.+4      	; 0x2288 <xTaskPriorityDisinherit+0x4c>
    2284:	40 93 a4 03 	sts	0x03A4, r20
    2288:	c9 01       	movw	r24, r18
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	28 0f       	add	r18, r24
    2298:	39 1f       	adc	r19, r25
    229a:	c9 01       	movw	r24, r18
    229c:	82 55       	subi	r24, 0x52	; 82
    229e:	9c 4f       	sbci	r25, 0xFC	; 252
    22a0:	b8 01       	movw	r22, r16
    22a2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <xTaskPriorityDisinherit+0x78>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <xTaskPriorityDisinherit+0x78>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <xTaskPriorityDisinherit+0x78>
    22b2:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    22be:	e0 91 9b 03 	lds	r30, 0x039B
    22c2:	f0 91 9c 03 	lds	r31, 0x039C
    22c6:	84 85       	ldd	r24, Z+12	; 0x0c
    22c8:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22ca:	e0 91 9b 03 	lds	r30, 0x039B
    22ce:	f0 91 9c 03 	lds	r31, 0x039C
    22d2:	a0 91 9b 03 	lds	r26, 0x039B
    22d6:	b0 91 9c 03 	lds	r27, 0x039C
    22da:	56 96       	adiw	r26, 0x16	; 22
    22dc:	4c 91       	ld	r20, X
    22de:	56 97       	sbiw	r26, 0x16	; 22
    22e0:	25 e0       	ldi	r18, 0x05	; 5
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	24 1b       	sub	r18, r20
    22e6:	31 09       	sbc	r19, r1
    22e8:	35 87       	std	Z+13, r19	; 0x0d
    22ea:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    22ec:	08 95       	ret

000022ee <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    22ee:	80 91 9b 03 	lds	r24, 0x039B
    22f2:	90 91 9c 03 	lds	r25, 0x039C
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	39 f0       	breq	.+14     	; 0x2308 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    22fa:	e0 91 9b 03 	lds	r30, 0x039B
    22fe:	f0 91 9c 03 	lds	r31, 0x039C
    2302:	84 a1       	lds	r24, 0x44
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	84 a3       	lds	r24, 0x54
		}

		return pxCurrentTCB;
    2308:	80 91 9b 03 	lds	r24, 0x039B
    230c:	90 91 9c 03 	lds	r25, 0x039C
	}
    2310:	08 95       	ret

00002312 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	c8 2f       	mov	r28, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    2320:	e0 91 9b 03 	lds	r30, 0x039B
    2324:	f0 91 9c 03 	lds	r31, 0x039C
    2328:	85 a1       	lds	r24, 0x45
    232a:	96 a1       	lds	r25, 0x46
    232c:	a7 a1       	lds	r26, 0x47
    232e:	b0 a5       	lds	r27, 0x60
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	a1 05       	cpc	r26, r1
    2334:	b1 05       	cpc	r27, r1
    2336:	79 f4       	brne	.+30     	; 0x2356 <ulTaskNotifyTake+0x44>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2338:	e0 91 9b 03 	lds	r30, 0x039B
    233c:	f0 91 9c 03 	lds	r31, 0x039C
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    2344:	61 15       	cp	r22, r1
    2346:	71 05       	cpc	r23, r1
    2348:	31 f0       	breq	.+12     	; 0x2356 <ulTaskNotifyTake+0x44>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    234a:	cb 01       	movw	r24, r22
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2352:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    2360:	e0 91 9b 03 	lds	r30, 0x039B
    2364:	f0 91 9c 03 	lds	r31, 0x039C
    2368:	05 a1       	lds	r16, 0x45
    236a:	16 a1       	lds	r17, 0x46
    236c:	27 a1       	lds	r18, 0x47
    236e:	30 a5       	lds	r19, 0x60

			if( ulReturn != 0UL )
    2370:	01 15       	cp	r16, r1
    2372:	11 05       	cpc	r17, r1
    2374:	21 05       	cpc	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	c1 f0       	breq	.+48     	; 0x23aa <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    237a:	cc 23       	and	r28, r28
    237c:	49 f0       	breq	.+18     	; 0x2390 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    237e:	e0 91 9b 03 	lds	r30, 0x039B
    2382:	f0 91 9c 03 	lds	r31, 0x039C
    2386:	15 a2       	lds	r17, 0x95
    2388:	16 a2       	lds	r17, 0x96
    238a:	17 a2       	lds	r17, 0x97
    238c:	10 a6       	lds	r17, 0xb0
    238e:	0d c0       	rjmp	.+26     	; 0x23aa <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    2390:	e0 91 9b 03 	lds	r30, 0x039B
    2394:	f0 91 9c 03 	lds	r31, 0x039C
    2398:	d9 01       	movw	r26, r18
    239a:	c8 01       	movw	r24, r16
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	a1 09       	sbc	r26, r1
    23a0:	b1 09       	sbc	r27, r1
    23a2:	85 a3       	lds	r24, 0x55
    23a4:	96 a3       	lds	r25, 0x56
    23a6:	a7 a3       	lds	r26, 0x57
    23a8:	b0 a7       	lds	r27, 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    23aa:	e0 91 9b 03 	lds	r30, 0x039B
    23ae:	f0 91 9c 03 	lds	r31, 0x039C
    23b2:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    23b4:	0f 90       	pop	r0
    23b6:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    23b8:	60 2f       	mov	r22, r16
    23ba:	71 2f       	mov	r23, r17
    23bc:	82 2f       	mov	r24, r18
    23be:	93 2f       	mov	r25, r19
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	49 01       	movw	r8, r18
    23de:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    23e6:	e0 91 9b 03 	lds	r30, 0x039B
    23ea:	f0 91 9c 03 	lds	r31, 0x039C
    23ee:	21 a5       	lds	r18, 0x61
    23f0:	22 30       	cpi	r18, 0x02	; 2
    23f2:	19 f1       	breq	.+70     	; 0x243a <xTaskNotifyWait+0x72>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    23f4:	e0 91 9b 03 	lds	r30, 0x039B
    23f8:	f0 91 9c 03 	lds	r31, 0x039C
    23fc:	45 a1       	lds	r20, 0x45
    23fe:	56 a1       	lds	r21, 0x46
    2400:	67 a1       	lds	r22, 0x47
    2402:	70 a5       	lds	r23, 0x60
    2404:	80 95       	com	r24
    2406:	90 95       	com	r25
    2408:	a0 95       	com	r26
    240a:	b0 95       	com	r27
    240c:	84 23       	and	r24, r20
    240e:	95 23       	and	r25, r21
    2410:	a6 23       	and	r26, r22
    2412:	b7 23       	and	r27, r23
    2414:	85 a3       	lds	r24, 0x55
    2416:	96 a3       	lds	r25, 0x56
    2418:	a7 a3       	lds	r26, 0x57
    241a:	b0 a7       	lds	r27, 0x70

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    241c:	e0 91 9b 03 	lds	r30, 0x039B
    2420:	f0 91 9c 03 	lds	r31, 0x039C
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    2428:	e1 14       	cp	r14, r1
    242a:	f1 04       	cpc	r15, r1
    242c:	31 f0       	breq	.+12     	; 0x243a <xTaskNotifyWait+0x72>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    242e:	c7 01       	movw	r24, r14
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	0e 94 1e 0a 	call	0x143c	; 0x143c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2436:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    2444:	01 15       	cp	r16, r1
    2446:	11 05       	cpc	r17, r1
    2448:	69 f0       	breq	.+26     	; 0x2464 <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    244a:	e0 91 9b 03 	lds	r30, 0x039B
    244e:	f0 91 9c 03 	lds	r31, 0x039C
    2452:	85 a1       	lds	r24, 0x45
    2454:	96 a1       	lds	r25, 0x46
    2456:	a7 a1       	lds	r26, 0x47
    2458:	b0 a5       	lds	r27, 0x60
    245a:	f8 01       	movw	r30, r16
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    2464:	e0 91 9b 03 	lds	r30, 0x039B
    2468:	f0 91 9c 03 	lds	r31, 0x039C
    246c:	81 a5       	lds	r24, 0x61
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	b1 f0       	breq	.+44     	; 0x249e <xTaskNotifyWait+0xd6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2472:	e0 91 9b 03 	lds	r30, 0x039B
    2476:	f0 91 9c 03 	lds	r31, 0x039C
    247a:	85 a1       	lds	r24, 0x45
    247c:	96 a1       	lds	r25, 0x46
    247e:	a7 a1       	lds	r26, 0x47
    2480:	b0 a5       	lds	r27, 0x60
    2482:	80 94       	com	r8
    2484:	90 94       	com	r9
    2486:	a0 94       	com	r10
    2488:	b0 94       	com	r11
    248a:	88 22       	and	r8, r24
    248c:	99 22       	and	r9, r25
    248e:	aa 22       	and	r10, r26
    2490:	bb 22       	and	r11, r27
    2492:	85 a2       	lds	r24, 0x95
    2494:	96 a2       	lds	r25, 0x96
    2496:	a7 a2       	lds	r26, 0x97
    2498:	b0 a6       	lds	r27, 0xb0
				xReturn = pdTRUE;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <xTaskNotifyWait+0xd8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    249e:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    24a0:	e0 91 9b 03 	lds	r30, 0x039B
    24a4:	f0 91 9c 03 	lds	r31, 0x039C
    24a8:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    24aa:	0f 90       	pop	r0
    24ac:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	ff 90       	pop	r15
    24b4:	ef 90       	pop	r14
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	9f 90       	pop	r9
    24bc:	8f 90       	pop	r8
    24be:	08 95       	ret

000024c0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ec 01       	movw	r28, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    24d0:	01 15       	cp	r16, r1
    24d2:	11 05       	cpc	r17, r1
    24d4:	49 f0       	breq	.+18     	; 0x24e8 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    24d6:	8d a1       	lds	r24, 0x4d
    24d8:	9e a1       	lds	r25, 0x4e
    24da:	af a1       	lds	r26, 0x4f
    24dc:	b8 a5       	lds	r27, 0x68
    24de:	f8 01       	movw	r30, r16
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    24e8:	39 a5       	lds	r19, 0x69

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	89 a7       	lds	r24, 0x79

			switch( eAction )
    24ee:	22 30       	cpi	r18, 0x02	; 2
    24f0:	b9 f0       	breq	.+46     	; 0x2520 <xTaskGenericNotify+0x60>
    24f2:	23 30       	cpi	r18, 0x03	; 3
    24f4:	18 f4       	brcc	.+6      	; 0x24fc <xTaskGenericNotify+0x3c>
    24f6:	21 30       	cpi	r18, 0x01	; 1
    24f8:	51 f5       	brne	.+84     	; 0x254e <xTaskGenericNotify+0x8e>
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <xTaskGenericNotify+0x46>
    24fc:	23 30       	cpi	r18, 0x03	; 3
    24fe:	e1 f0       	breq	.+56     	; 0x2538 <xTaskGenericNotify+0x78>
    2500:	24 30       	cpi	r18, 0x04	; 4
    2502:	29 f5       	brne	.+74     	; 0x254e <xTaskGenericNotify+0x8e>
    2504:	1e c0       	rjmp	.+60     	; 0x2542 <xTaskGenericNotify+0x82>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2506:	8d a1       	lds	r24, 0x4d
    2508:	9e a1       	lds	r25, 0x4e
    250a:	af a1       	lds	r26, 0x4f
    250c:	b8 a5       	lds	r27, 0x68
    250e:	48 2b       	or	r20, r24
    2510:	59 2b       	or	r21, r25
    2512:	6a 2b       	or	r22, r26
    2514:	7b 2b       	or	r23, r27
    2516:	4d a3       	lds	r20, 0x5d
    2518:	5e a3       	lds	r21, 0x5e
    251a:	6f a3       	lds	r22, 0x5f
    251c:	78 a7       	lds	r23, 0x78
					break;
    251e:	17 c0       	rjmp	.+46     	; 0x254e <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2520:	8d a1       	lds	r24, 0x4d
    2522:	9e a1       	lds	r25, 0x4e
    2524:	af a1       	lds	r26, 0x4f
    2526:	b8 a5       	lds	r27, 0x68
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	a1 1d       	adc	r26, r1
    252c:	b1 1d       	adc	r27, r1
    252e:	8d a3       	lds	r24, 0x5d
    2530:	9e a3       	lds	r25, 0x5e
    2532:	af a3       	lds	r26, 0x5f
    2534:	b8 a7       	lds	r27, 0x78
					break;
    2536:	0b c0       	rjmp	.+22     	; 0x254e <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2538:	4d a3       	lds	r20, 0x5d
    253a:	5e a3       	lds	r21, 0x5e
    253c:	6f a3       	lds	r22, 0x5f
    253e:	78 a7       	lds	r23, 0x78
					break;
    2540:	06 c0       	rjmp	.+12     	; 0x254e <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2542:	32 30       	cpi	r19, 0x02	; 2
    2544:	71 f1       	breq	.+92     	; 0x25a2 <xTaskGenericNotify+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2546:	4d a3       	lds	r20, 0x5d
    2548:	5e a3       	lds	r21, 0x5e
    254a:	6f a3       	lds	r22, 0x5f
    254c:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    254e:	31 30       	cpi	r19, 0x01	; 1
    2550:	51 f5       	brne	.+84     	; 0x25a6 <xTaskGenericNotify+0xe6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2552:	8e 01       	movw	r16, r28
    2554:	0e 5f       	subi	r16, 0xFE	; 254
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	c8 01       	movw	r24, r16
    255a:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    255e:	8e 89       	ldd	r24, Y+22	; 0x16
    2560:	90 91 a4 03 	lds	r25, 0x03A4
    2564:	98 17       	cp	r25, r24
    2566:	10 f4       	brcc	.+4      	; 0x256c <xTaskGenericNotify+0xac>
    2568:	80 93 a4 03 	sts	0x03A4, r24
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9c 01       	movw	r18, r24
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	22 0f       	add	r18, r18
    2576:	33 1f       	adc	r19, r19
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	82 0f       	add	r24, r18
    257e:	93 1f       	adc	r25, r19
    2580:	82 55       	subi	r24, 0x52	; 82
    2582:	9c 4f       	sbci	r25, 0xFC	; 252
    2584:	b8 01       	movw	r22, r16
    2586:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    258a:	e0 91 9b 03 	lds	r30, 0x039B
    258e:	f0 91 9c 03 	lds	r31, 0x039C
    2592:	9e 89       	ldd	r25, Y+22	; 0x16
    2594:	86 89       	ldd	r24, Z+22	; 0x16
    2596:	89 17       	cp	r24, r25
    2598:	40 f4       	brcc	.+16     	; 0x25aa <xTaskGenericNotify+0xea>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    259a:	0e 94 03 05 	call	0xa06	; 0xa06 <vPortYield>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	05 c0       	rjmp	.+10     	; 0x25ac <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	03 c0       	rjmp	.+6      	; 0x25ac <xTaskGenericNotify+0xec>

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <xTaskGenericNotify+0xec>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    25aa:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	08 95       	ret

000025ba <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	ec 01       	movw	r28, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    25c8:	01 15       	cp	r16, r1
    25ca:	11 05       	cpc	r17, r1
    25cc:	49 f0       	breq	.+18     	; 0x25e0 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    25ce:	8d a1       	lds	r24, 0x4d
    25d0:	9e a1       	lds	r25, 0x4e
    25d2:	af a1       	lds	r26, 0x4f
    25d4:	b8 a5       	lds	r27, 0x68
    25d6:	f8 01       	movw	r30, r16
    25d8:	80 83       	st	Z, r24
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	a2 83       	std	Z+2, r26	; 0x02
    25de:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    25e0:	39 a5       	lds	r19, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	89 a7       	lds	r24, 0x79

			switch( eAction )
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	b9 f0       	breq	.+46     	; 0x2618 <xTaskGenericNotifyFromISR+0x5e>
    25ea:	23 30       	cpi	r18, 0x03	; 3
    25ec:	18 f4       	brcc	.+6      	; 0x25f4 <xTaskGenericNotifyFromISR+0x3a>
    25ee:	21 30       	cpi	r18, 0x01	; 1
    25f0:	59 f5       	brne	.+86     	; 0x2648 <xTaskGenericNotifyFromISR+0x8e>
    25f2:	05 c0       	rjmp	.+10     	; 0x25fe <xTaskGenericNotifyFromISR+0x44>
    25f4:	23 30       	cpi	r18, 0x03	; 3
    25f6:	e1 f0       	breq	.+56     	; 0x2630 <xTaskGenericNotifyFromISR+0x76>
    25f8:	24 30       	cpi	r18, 0x04	; 4
    25fa:	31 f5       	brne	.+76     	; 0x2648 <xTaskGenericNotifyFromISR+0x8e>
    25fc:	1e c0       	rjmp	.+60     	; 0x263a <xTaskGenericNotifyFromISR+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    25fe:	8d a1       	lds	r24, 0x4d
    2600:	9e a1       	lds	r25, 0x4e
    2602:	af a1       	lds	r26, 0x4f
    2604:	b8 a5       	lds	r27, 0x68
    2606:	84 2b       	or	r24, r20
    2608:	95 2b       	or	r25, r21
    260a:	a6 2b       	or	r26, r22
    260c:	b7 2b       	or	r27, r23
    260e:	8d a3       	lds	r24, 0x5d
    2610:	9e a3       	lds	r25, 0x5e
    2612:	af a3       	lds	r26, 0x5f
    2614:	b8 a7       	lds	r27, 0x78
					break;
    2616:	18 c0       	rjmp	.+48     	; 0x2648 <xTaskGenericNotifyFromISR+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2618:	8d a1       	lds	r24, 0x4d
    261a:	9e a1       	lds	r25, 0x4e
    261c:	af a1       	lds	r26, 0x4f
    261e:	b8 a5       	lds	r27, 0x68
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	a1 1d       	adc	r26, r1
    2624:	b1 1d       	adc	r27, r1
    2626:	8d a3       	lds	r24, 0x5d
    2628:	9e a3       	lds	r25, 0x5e
    262a:	af a3       	lds	r26, 0x5f
    262c:	b8 a7       	lds	r27, 0x78
					break;
    262e:	0c c0       	rjmp	.+24     	; 0x2648 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2630:	4d a3       	lds	r20, 0x5d
    2632:	5e a3       	lds	r21, 0x5e
    2634:	6f a3       	lds	r22, 0x5f
    2636:	78 a7       	lds	r23, 0x78
					break;
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    263a:	32 30       	cpi	r19, 0x02	; 2
    263c:	09 f4       	brne	.+2      	; 0x2640 <xTaskGenericNotifyFromISR+0x86>
    263e:	41 c0       	rjmp	.+130    	; 0x26c2 <xTaskGenericNotifyFromISR+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2640:	4d a3       	lds	r20, 0x5d
    2642:	5e a3       	lds	r21, 0x5e
    2644:	6f a3       	lds	r22, 0x5f
    2646:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2648:	31 30       	cpi	r19, 0x01	; 1
    264a:	e9 f5       	brne	.+122    	; 0x26c6 <xTaskGenericNotifyFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    264c:	80 91 9d 03 	lds	r24, 0x039D
    2650:	88 23       	and	r24, r24
    2652:	e9 f4       	brne	.+58     	; 0x268e <xTaskGenericNotifyFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2654:	8e 01       	movw	r16, r28
    2656:	0e 5f       	subi	r16, 0xFE	; 254
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	c8 01       	movw	r24, r16
    265c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2660:	8e 89       	ldd	r24, Y+22	; 0x16
    2662:	90 91 a4 03 	lds	r25, 0x03A4
    2666:	98 17       	cp	r25, r24
    2668:	10 f4       	brcc	.+4      	; 0x266e <xTaskGenericNotifyFromISR+0xb4>
    266a:	80 93 a4 03 	sts	0x03A4, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9c 01       	movw	r18, r24
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	82 0f       	add	r24, r18
    2680:	93 1f       	adc	r25, r19
    2682:	82 55       	subi	r24, 0x52	; 82
    2684:	9c 4f       	sbci	r25, 0xFC	; 252
    2686:	b8 01       	movw	r22, r16
    2688:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    268c:	07 c0       	rjmp	.+14     	; 0x269c <xTaskGenericNotifyFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    268e:	be 01       	movw	r22, r28
    2690:	64 5f       	subi	r22, 0xF4	; 244
    2692:	7f 4f       	sbci	r23, 0xFF	; 255
    2694:	8d ee       	ldi	r24, 0xED	; 237
    2696:	93 e0       	ldi	r25, 0x03	; 3
    2698:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    269c:	e0 91 9b 03 	lds	r30, 0x039B
    26a0:	f0 91 9c 03 	lds	r31, 0x039C
    26a4:	9e 89       	ldd	r25, Y+22	; 0x16
    26a6:	86 89       	ldd	r24, Z+22	; 0x16
    26a8:	89 17       	cp	r24, r25
    26aa:	78 f4       	brcc	.+30     	; 0x26ca <xTaskGenericNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    26ac:	e1 14       	cp	r14, r1
    26ae:	f1 04       	cpc	r15, r1
    26b0:	21 f0       	breq	.+8      	; 0x26ba <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	f7 01       	movw	r30, r14
    26b6:	80 83       	st	Z, r24
    26b8:	09 c0       	rjmp	.+18     	; 0x26cc <xTaskGenericNotifyFromISR+0x112>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 a1 03 	sts	0x03A1, r24
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <xTaskGenericNotifyFromISR+0x112>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <xTaskGenericNotifyFromISR+0x112>

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <xTaskGenericNotifyFromISR+0x112>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26ca:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	08 95       	ret

000026da <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    26da:	ef 92       	push	r14
    26dc:	ff 92       	push	r15
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	ec 01       	movw	r28, r24
    26e8:	8b 01       	movw	r16, r22

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    26ea:	29 a5       	lds	r18, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	89 a7       	lds	r24, 0x79

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    26f0:	8d a1       	lds	r24, 0x4d
    26f2:	9e a1       	lds	r25, 0x4e
    26f4:	af a1       	lds	r26, 0x4f
    26f6:	b8 a5       	lds	r27, 0x68
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	a1 1d       	adc	r26, r1
    26fc:	b1 1d       	adc	r27, r1
    26fe:	8d a3       	lds	r24, 0x5d
    2700:	9e a3       	lds	r25, 0x5e
    2702:	af a3       	lds	r26, 0x5f
    2704:	b8 a7       	lds	r27, 0x78

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2706:	21 30       	cpi	r18, 0x01	; 1
    2708:	e9 f5       	brne	.+122    	; 0x2784 <vTaskNotifyGiveFromISR+0xaa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    270a:	80 91 9d 03 	lds	r24, 0x039D
    270e:	88 23       	and	r24, r24
    2710:	01 f5       	brne	.+64     	; 0x2752 <vTaskNotifyGiveFromISR+0x78>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2712:	ee 24       	eor	r14, r14
    2714:	ff 24       	eor	r15, r15
    2716:	68 94       	set
    2718:	e1 f8       	bld	r14, 1
    271a:	ec 0e       	add	r14, r28
    271c:	fd 1e       	adc	r15, r29
    271e:	c7 01       	movw	r24, r14
    2720:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2724:	8e 89       	ldd	r24, Y+22	; 0x16
    2726:	90 91 a4 03 	lds	r25, 0x03A4
    272a:	98 17       	cp	r25, r24
    272c:	10 f4       	brcc	.+4      	; 0x2732 <vTaskNotifyGiveFromISR+0x58>
    272e:	80 93 a4 03 	sts	0x03A4, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 01       	movw	r18, r24
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	22 0f       	add	r18, r18
    2740:	33 1f       	adc	r19, r19
    2742:	82 0f       	add	r24, r18
    2744:	93 1f       	adc	r25, r19
    2746:	82 55       	subi	r24, 0x52	; 82
    2748:	9c 4f       	sbci	r25, 0xFC	; 252
    274a:	b7 01       	movw	r22, r14
    274c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <vTaskNotifyGiveFromISR+0x86>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2752:	be 01       	movw	r22, r28
    2754:	64 5f       	subi	r22, 0xF4	; 244
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	8d ee       	ldi	r24, 0xED	; 237
    275a:	93 e0       	ldi	r25, 0x03	; 3
    275c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2760:	e0 91 9b 03 	lds	r30, 0x039B
    2764:	f0 91 9c 03 	lds	r31, 0x039C
    2768:	9e 89       	ldd	r25, Y+22	; 0x16
    276a:	86 89       	ldd	r24, Z+22	; 0x16
    276c:	89 17       	cp	r24, r25
    276e:	50 f4       	brcc	.+20     	; 0x2784 <vTaskNotifyGiveFromISR+0xaa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2770:	01 15       	cp	r16, r1
    2772:	11 05       	cpc	r17, r1
    2774:	21 f0       	breq	.+8      	; 0x277e <vTaskNotifyGiveFromISR+0xa4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	f8 01       	movw	r30, r16
    277a:	80 83       	st	Z, r24
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <vTaskNotifyGiveFromISR+0xaa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 a1 03 	sts	0x03A1, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	08 95       	ret

00002792 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	29 f4       	brne	.+10     	; 0x27a0 <xTaskNotifyStateClear+0xe>
    2796:	e0 91 9b 03 	lds	r30, 0x039B
    279a:	f0 91 9c 03 	lds	r31, 0x039C
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <xTaskNotifyStateClear+0x10>
    27a0:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27a8:	81 a5       	lds	r24, 0x61
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	19 f4       	brne	.+6      	; 0x27b4 <xTaskNotifyStateClear+0x22>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27ae:	11 a6       	lds	r17, 0xb1
				xReturn = pdPASS;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <xTaskNotifyStateClear+0x24>
			}
			else
			{
				xReturn = pdFAIL;
    27b4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    27ba:	08 95       	ret

000027bc <memcpy>:
    27bc:	fb 01       	movw	r30, r22
    27be:	dc 01       	movw	r26, r24
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <memcpy+0xa>
    27c2:	01 90       	ld	r0, Z+
    27c4:	0d 92       	st	X+, r0
    27c6:	41 50       	subi	r20, 0x01	; 1
    27c8:	50 40       	sbci	r21, 0x00	; 0
    27ca:	d8 f7       	brcc	.-10     	; 0x27c2 <memcpy+0x6>
    27cc:	08 95       	ret

000027ce <_exit>:
    27ce:	f8 94       	cli

000027d0 <__stop_program>:
    27d0:	ff cf       	rjmp	.-2      	; 0x27d0 <__stop_program>
