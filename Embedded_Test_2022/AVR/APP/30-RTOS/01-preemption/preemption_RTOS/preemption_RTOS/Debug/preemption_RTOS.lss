
preemption_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000027da  0000286e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b9  00800072  00800072  00002880  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003679  00000000  00000000  00003218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5d  00000000  00000000  00006891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000138f  00000000  00000000  000074ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  00008880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001607  00000000  00000000  0000944c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004030  00000000  00000000  0000aa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000ea83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 05 	call	0xb4a	; 0xb4a <main>
      8a:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
      92:	44 23       	and	r20, r20
      94:	41 f4       	brne	.+16     	; 0xa6 <prvTestWaitCondition+0x14>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
      96:	68 23       	and	r22, r24
      98:	79 23       	and	r23, r25
		{
			xWaitConditionMet = pdTRUE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	61 15       	cp	r22, r1
      9e:	71 05       	cpc	r23, r1
      a0:	51 f4       	brne	.+20     	; 0xb6 <prvTestWaitCondition+0x24>
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
      a6:	9b 01       	movw	r18, r22
      a8:	28 23       	and	r18, r24
      aa:	39 23       	and	r19, r25
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	62 17       	cp	r22, r18
      b0:	73 07       	cpc	r23, r19
      b2:	09 f0       	breq	.+2      	; 0xb6 <prvTestWaitCondition+0x24>
      b4:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
      b6:	08 95       	ret

000000b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
      bc:	8b e0       	ldi	r24, 0x0B	; 11
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
      c4:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	31 f0       	breq	.+12     	; 0xd6 <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
      ca:	fc 01       	movw	r30, r24
      cc:	11 92       	st	Z+, r1
      ce:	11 92       	st	Z+, r1
      d0:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
      d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
      d6:	8c 2f       	mov	r24, r28
      d8:	9d 2f       	mov	r25, r29
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	5c 01       	movw	r10, r24
      f6:	6b 01       	movw	r12, r22
      f8:	e4 2e       	mov	r14, r20
      fa:	f2 2e       	mov	r15, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
      fc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     100:	f5 01       	movw	r30, r10
     102:	c0 81       	ld	r28, Z
     104:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     106:	ce 01       	movw	r24, r28
     108:	b6 01       	movw	r22, r12
     10a:	4f 2d       	mov	r20, r15
     10c:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     110:	88 23       	and	r24, r24
     112:	51 f0       	breq	.+20     	; 0x128 <xEventGroupWaitBits+0x48>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     114:	ee 20       	and	r14, r14
     116:	01 f1       	breq	.+64     	; 0x158 <xEventGroupWaitBits+0x78>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     118:	c0 94       	com	r12
     11a:	d0 94       	com	r13
     11c:	cc 22       	and	r12, r28
     11e:	dd 22       	and	r13, r29
     120:	f5 01       	movw	r30, r10
     122:	d1 82       	std	Z+1, r13	; 0x01
     124:	c0 82       	st	Z, r12
     126:	18 c0       	rjmp	.+48     	; 0x158 <xEventGroupWaitBits+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     128:	01 15       	cp	r16, r1
     12a:	11 05       	cpc	r17, r1
     12c:	a9 f0       	breq	.+42     	; 0x158 <xEventGroupWaitBits+0x78>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     12e:	ee 20       	and	r14, r14
     130:	19 f4       	brne	.+6      	; 0x138 <xEventGroupWaitBits+0x58>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <xEventGroupWaitBits+0x5c>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     13c:	f1 10       	cpse	r15, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     13e:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     140:	6c 29       	or	r22, r12
     142:	7d 29       	or	r23, r13
     144:	c5 01       	movw	r24, r10
     146:	02 96       	adiw	r24, 0x02	; 2
     148:	a8 01       	movw	r20, r16
     14a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     14e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     152:	88 23       	and	r24, r24
     154:	39 f4       	brne	.+14     	; 0x164 <xEventGroupWaitBits+0x84>
     156:	04 c0       	rjmp	.+8      	; 0x160 <xEventGroupWaitBits+0x80>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     158:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     15c:	ce 01       	movw	r24, r28
     15e:	21 c0       	rjmp	.+66     	; 0x1a2 <xEventGroupWaitBits+0xc2>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     160:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     164:	0e 94 63 11 	call	0x22c6	; 0x22c6 <uxTaskResetEventItemValue>
     168:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     16a:	91 fd       	sbrc	r25, 1
     16c:	18 c0       	rjmp	.+48     	; 0x19e <xEventGroupWaitBits+0xbe>
		{
			taskENTER_CRITICAL();
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     174:	f5 01       	movw	r30, r10
     176:	c0 81       	ld	r28, Z
     178:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     17a:	ce 01       	movw	r24, r28
     17c:	b6 01       	movw	r22, r12
     17e:	4f 2d       	mov	r20, r15
     180:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>
     184:	88 23       	and	r24, r24
     186:	49 f0       	breq	.+18     	; 0x19a <xEventGroupWaitBits+0xba>
				{
					if( xClearOnExit != pdFALSE )
     188:	ee 20       	and	r14, r14
     18a:	39 f0       	breq	.+14     	; 0x19a <xEventGroupWaitBits+0xba>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     18c:	c0 94       	com	r12
     18e:	d0 94       	com	r13
     190:	cc 22       	and	r12, r28
     192:	dd 22       	and	r13, r29
     194:	f5 01       	movw	r30, r10
     196:	d1 82       	std	Z+1, r13	; 0x01
     198:	c0 82       	st	Z, r12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     19e:	ce 01       	movw	r24, r28
     1a0:	90 70       	andi	r25, 0x00	; 0
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	ef 90       	pop	r14
     1ae:	df 90       	pop	r13
     1b0:	cf 90       	pop	r12
     1b2:	bf 90       	pop	r11
     1b4:	af 90       	pop	r10
     1b6:	08 95       	ret

000001b8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     1b8:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     1c4:	60 95       	com	r22
     1c6:	70 95       	com	r23
     1c8:	68 23       	and	r22, r24
     1ca:	79 23       	and	r23, r25
     1cc:	71 83       	std	Z+1, r23	; 0x01
     1ce:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     1d4:	08 95       	ret

000001d6 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     1d6:	fc 01       	movw	r30, r24
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	08 95       	ret

000001de <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
     1f4:	eb 01       	movw	r28, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	cf 2e       	mov	r12, r31
     1fc:	dd 24       	eor	r13, r13
     1fe:	f0 2d       	mov	r31, r0
     200:	c8 0e       	add	r12, r24
     202:	d9 1e       	adc	r13, r25
	vTaskSuspendAll();
     204:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     208:	d8 01       	movw	r26, r16
     20a:	17 96       	adiw	r26, 0x07	; 7
     20c:	ed 91       	ld	r30, X+
     20e:	fc 91       	ld	r31, X
     210:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     212:	8d 91       	ld	r24, X+
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	8c 2b       	or	r24, r28
     21a:	9d 2b       	or	r25, r29
     21c:	11 96       	adiw	r26, 0x01	; 1
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     222:	ce 16       	cp	r12, r30
     224:	df 06       	cpc	r13, r31
     226:	c1 f1       	breq	.+112    	; 0x298 <xEventGroupSetBits+0xba>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     228:	aa 24       	eor	r10, r10
     22a:	bb 24       	eor	r11, r11
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     22c:	ff 24       	eor	r15, r15
     22e:	f3 94       	inc	r15
     230:	ee 24       	eor	r14, r14
     232:	01 c0       	rjmp	.+2      	; 0x236 <xEventGroupSetBits+0x58>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     234:	fe 01       	movw	r30, r28
		{
			pxNext = listGET_NEXT( pxListItem );
     236:	c2 81       	ldd	r28, Z+2	; 0x02
     238:	d3 81       	ldd	r29, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     23e:	bc 01       	movw	r22, r24
     240:	60 70       	andi	r22, 0x00	; 0
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     242:	9c 01       	movw	r18, r24
     244:	30 70       	andi	r19, 0x00	; 0

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     246:	92 fd       	sbrc	r25, 2
     248:	0b c0       	rjmp	.+22     	; 0x260 <xEventGroupSetBits+0x82>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     24a:	d8 01       	movw	r26, r16
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 23       	and	r24, r18
     254:	93 23       	and	r25, r19
				{
					xMatchFound = pdTRUE;
     256:	4f 2d       	mov	r20, r15
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	69 f4       	brne	.+26     	; 0x276 <xEventGroupSetBits+0x98>
     25c:	4e 2d       	mov	r20, r14
     25e:	0b c0       	rjmp	.+22     	; 0x276 <xEventGroupSetBits+0x98>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     260:	d8 01       	movw	r26, r16
     262:	8d 91       	ld	r24, X+
     264:	9c 91       	ld	r25, X
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	82 23       	and	r24, r18
     26a:	93 23       	and	r25, r19
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     26c:	4f 2d       	mov	r20, r15
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <xEventGroupSetBits+0x98>
     274:	4e 2d       	mov	r20, r14
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     276:	44 23       	and	r20, r20
     278:	59 f0       	breq	.+22     	; 0x290 <xEventGroupSetBits+0xb2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     27a:	70 ff       	sbrs	r23, 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <xEventGroupSetBits+0xa4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     27e:	a2 2a       	or	r10, r18
     280:	b3 2a       	or	r11, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     282:	d8 01       	movw	r26, r16
     284:	6d 91       	ld	r22, X+
     286:	7c 91       	ld	r23, X
     288:	72 60       	ori	r23, 0x02	; 2
     28a:	cf 01       	movw	r24, r30
     28c:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskRemoveFromUnorderedEventList>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     290:	cc 16       	cp	r12, r28
     292:	dd 06       	cpc	r13, r29
     294:	79 f6       	brne	.-98     	; 0x234 <xEventGroupSetBits+0x56>
     296:	02 c0       	rjmp	.+4      	; 0x29c <xEventGroupSetBits+0xbe>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     298:	aa 24       	eor	r10, r10
     29a:	bb 24       	eor	r11, r11
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     29c:	c5 01       	movw	r24, r10
     29e:	80 95       	com	r24
     2a0:	90 95       	com	r25
     2a2:	f8 01       	movw	r30, r16
     2a4:	a0 80       	ld	r10, Z
     2a6:	b1 80       	ldd	r11, Z+1	; 0x01
     2a8:	a8 22       	and	r10, r24
     2aa:	b9 22       	and	r11, r25
     2ac:	b1 82       	std	Z+1, r11	; 0x01
     2ae:	a0 82       	st	Z, r10
	}
	( void ) xTaskResumeAll();
     2b0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     2b4:	d8 01       	movw	r26, r16
     2b6:	8c 91       	ld	r24, X
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	11 97       	sbiw	r26, 0x01	; 1
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	08 95       	ret

000002d4 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	6c 01       	movw	r12, r24
     2ea:	eb 01       	movw	r28, r22
     2ec:	7a 01       	movw	r14, r20
     2ee:	59 01       	movw	r10, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     2f0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     2f4:	f6 01       	movw	r30, r12
     2f6:	00 81       	ld	r16, Z
     2f8:	11 81       	ldd	r17, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     2fa:	c6 01       	movw	r24, r12
     2fc:	be 01       	movw	r22, r28
     2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     302:	c0 2b       	or	r28, r16
     304:	d1 2b       	or	r29, r17
     306:	c7 01       	movw	r24, r14
     308:	8c 23       	and	r24, r28
     30a:	9d 23       	and	r25, r29
     30c:	8e 15       	cp	r24, r14
     30e:	9f 05       	cpc	r25, r15
     310:	51 f4       	brne	.+20     	; 0x326 <xEventGroupSync+0x52>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     312:	80 95       	com	r24
     314:	90 95       	com	r25
     316:	f6 01       	movw	r30, r12
     318:	20 81       	ld	r18, Z
     31a:	31 81       	ldd	r19, Z+1	; 0x01
     31c:	82 23       	and	r24, r18
     31e:	93 23       	and	r25, r19
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	12 c0       	rjmp	.+36     	; 0x34a <xEventGroupSync+0x76>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     326:	a1 14       	cp	r10, r1
     328:	b1 04       	cpc	r11, r1
     32a:	61 f0       	breq	.+24     	; 0x344 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     32c:	b7 01       	movw	r22, r14
     32e:	75 60       	ori	r23, 0x05	; 5
     330:	c6 01       	movw	r24, r12
     332:	02 96       	adiw	r24, 0x02	; 2
     334:	a5 01       	movw	r20, r10
     336:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     33a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     33e:	88 23       	and	r24, r24
     340:	49 f4       	brne	.+18     	; 0x354 <xEventGroupSync+0x80>
     342:	06 c0       	rjmp	.+12     	; 0x350 <xEventGroupSync+0x7c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     344:	f6 01       	movw	r30, r12
     346:	c0 81       	ld	r28, Z
     348:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     34a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     34e:	1c c0       	rjmp	.+56     	; 0x388 <xEventGroupSync+0xb4>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     350:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     354:	0e 94 63 11 	call	0x22c6	; 0x22c6 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     358:	91 fd       	sbrc	r25, 1
     35a:	14 c0       	rjmp	.+40     	; 0x384 <xEventGroupSync+0xb0>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     362:	f6 01       	movw	r30, r12
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     368:	97 01       	movw	r18, r14
     36a:	28 23       	and	r18, r24
     36c:	39 23       	and	r19, r25
     36e:	2e 15       	cp	r18, r14
     370:	3f 05       	cpc	r19, r15
     372:	31 f4       	brne	.+12     	; 0x380 <xEventGroupSync+0xac>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     374:	20 95       	com	r18
     376:	30 95       	com	r19
     378:	28 23       	and	r18, r24
     37a:	39 23       	and	r19, r25
     37c:	31 83       	std	Z+1, r19	; 0x01
     37e:	20 83       	st	Z, r18
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     384:	ec 01       	movw	r28, r24
     386:	d0 70       	andi	r29, 0x00	; 0
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     388:	8c 2f       	mov	r24, r28
     38a:	9d 2f       	mov	r25, r29
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	08 95       	ret

000003a2 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     3a8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	88 23       	and	r24, r24
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <vEventGroupDelete+0x22>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	72 e0       	ldi	r23, 0x02	; 2
     3ba:	0e 94 41 10 	call	0x2082	; 0x2082 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	88 23       	and	r24, r24
     3c2:	b9 f7       	brne	.-18     	; 0x3b2 <vEventGroupDelete+0x10>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     3ca:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     3d4:	ba 01       	movw	r22, r20
     3d6:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>
}
     3da:	08 95       	ret

000003dc <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     3dc:	ba 01       	movw	r22, r20
     3de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <xEventGroupClearBits>
}
     3e2:	08 95       	ret

000003e4 <DIO_Set_Port_Direction>:
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <DIO_Set_Port_Direction+0xe>
     3e8:	e8 2f       	mov	r30, r24
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	81 83       	std	Z+1, r24	; 0x01
     3f0:	08 95       	ret
     3f2:	66 23       	and	r22, r22
     3f4:	19 f4       	brne	.+6      	; 0x3fc <DIO_Set_Port_Direction+0x18>
     3f6:	e8 2f       	mov	r30, r24
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	08 95       	ret

000003fe <DIO_Set_Pin_Direction>:
     3fe:	41 30       	cpi	r20, 0x01	; 1
     400:	79 f4       	brne	.+30     	; 0x420 <DIO_Set_Pin_Direction+0x22>
     402:	e8 2f       	mov	r30, r24
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	21 81       	ldd	r18, Z+1	; 0x01
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	ac 01       	movw	r20, r24
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_Set_Pin_Direction+0x16>
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	6a 95       	dec	r22
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_Set_Pin_Direction+0x12>
     418:	ba 01       	movw	r22, r20
     41a:	62 2b       	or	r22, r18
     41c:	61 83       	std	Z+1, r22	; 0x01
     41e:	08 95       	ret
     420:	44 23       	and	r20, r20
     422:	79 f4       	brne	.+30     	; 0x442 <DIO_Set_Pin_Direction+0x44>
     424:	e8 2f       	mov	r30, r24
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	21 81       	ldd	r18, Z+1	; 0x01
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	ac 01       	movw	r20, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_Set_Pin_Direction+0x38>
     432:	44 0f       	add	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_Set_Pin_Direction+0x34>
     43a:	ba 01       	movw	r22, r20
     43c:	60 95       	com	r22
     43e:	62 23       	and	r22, r18
     440:	61 83       	std	Z+1, r22	; 0x01
     442:	08 95       	ret

00000444 <DIO_Set_Port_Value>:
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	62 83       	std	Z+2, r22	; 0x02
     44a:	08 95       	ret

0000044c <DIO_Set_Pin_Value>:
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	79 f4       	brne	.+30     	; 0x46e <DIO_Set_Pin_Value+0x22>
     450:	e8 2f       	mov	r30, r24
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	22 81       	ldd	r18, Z+2	; 0x02
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_Set_Pin_Value+0x16>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_Set_Pin_Value+0x12>
     466:	ba 01       	movw	r22, r20
     468:	62 2b       	or	r22, r18
     46a:	62 83       	std	Z+2, r22	; 0x02
     46c:	08 95       	ret
     46e:	44 23       	and	r20, r20
     470:	79 f4       	brne	.+30     	; 0x490 <DIO_Set_Pin_Value+0x44>
     472:	e8 2f       	mov	r30, r24
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	ac 01       	movw	r20, r24
     47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_Set_Pin_Value+0x38>
     480:	44 0f       	add	r20, r20
     482:	55 1f       	adc	r21, r21
     484:	6a 95       	dec	r22
     486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_Set_Pin_Value+0x34>
     488:	ba 01       	movw	r22, r20
     48a:	60 95       	com	r22
     48c:	62 23       	and	r22, r18
     48e:	62 83       	std	Z+2, r22	; 0x02
     490:	08 95       	ret

00000492 <DIO_Get_Port_value>:
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	e8 2f       	mov	r30, r24
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_Get_Pin_value>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9c 01       	movw	r18, r24
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_Get_Pin_value+0x1a>
     4c4:	35 95       	asr	r19
     4c6:	27 95       	ror	r18
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_Get_Pin_value+0x16>
     4cc:	b9 01       	movw	r22, r18
     4ce:	61 70       	andi	r22, 0x01	; 1
     4d0:	69 83       	std	Y+1, r22	; 0x01
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <DIO_Toggle_Pin>:
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	22 81       	ldd	r18, Z+2	; 0x02
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_Toggle_Pin+0x12>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_Toggle_Pin+0xe>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 27       	eor	r22, r18
     4f6:	62 83       	std	Z+2, r22	; 0x02
     4f8:	08 95       	ret

000004fa <DIO_SET_HIGH_Nipple_Value>:
     4fa:	e8 2f       	mov	r30, r24
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	82 83       	std	Z+2, r24	; 0x02
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	62 95       	swap	r22
     508:	60 7f       	andi	r22, 0xF0	; 240
     50a:	68 27       	eor	r22, r24
     50c:	62 83       	std	Z+2, r22	; 0x02
     50e:	08 95       	ret

00000510 <DIO_SET_LOW_Nipple_Value>:
     510:	e8 2f       	mov	r30, r24
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	82 83       	std	Z+2, r24	; 0x02
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	6f 70       	andi	r22, 0x0F	; 15
     51e:	68 27       	eor	r22, r24
     520:	62 83       	std	Z+2, r22	; 0x02
     522:	08 95       	ret

00000524 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     52e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     532:	80 91 72 00 	lds	r24, 0x0072
     536:	88 23       	and	r24, r24
     538:	f9 f4       	brne	.+62     	; 0x578 <pvPortMalloc+0x54>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     53a:	8c e7       	ldi	r24, 0x7C	; 124
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 74 00 	sts	0x0074, r25
     542:	80 93 73 00 	sts	0x0073, r24
	xStart.xBlockSize = ( size_t ) 0;
     546:	10 92 76 00 	sts	0x0076, r1
     54a:	10 92 75 00 	sts	0x0075, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     54e:	8f e1       	ldi	r24, 0x1F	; 31
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	90 93 7a 00 	sts	0x007A, r25
     556:	80 93 79 00 	sts	0x0079, r24
	xEnd.pxNextFreeBlock = NULL;
     55a:	e9 e7       	ldi	r30, 0x79	; 121
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	12 92       	st	-Z, r1
     560:	12 92       	st	-Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     562:	90 93 7f 00 	sts	0x007F, r25
     566:	80 93 7e 00 	sts	0x007E, r24
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     56a:	f0 93 7d 00 	sts	0x007D, r31
     56e:	e0 93 7c 00 	sts	0x007C, r30
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 72 00 	sts	0x0072, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     578:	20 97       	sbiw	r28, 0x00	; 0
     57a:	09 f4       	brne	.+2      	; 0x57e <pvPortMalloc+0x5a>
     57c:	62 c0       	rjmp	.+196    	; 0x642 <pvPortMalloc+0x11e>
		{
			xWantedSize += heapSTRUCT_SIZE;
     57e:	9e 01       	movw	r18, r28
     580:	2c 5f       	subi	r18, 0xFC	; 252
     582:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     584:	23 96       	adiw	r28, 0x03	; 3
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	ce 31       	cpi	r28, 0x1E	; 30
     58a:	d8 07       	cpc	r29, r24
     58c:	08 f0       	brcs	.+2      	; 0x590 <pvPortMalloc+0x6c>
     58e:	5c c0       	rjmp	.+184    	; 0x648 <pvPortMalloc+0x124>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     590:	e0 91 73 00 	lds	r30, 0x0073
     594:	f0 91 74 00 	lds	r31, 0x0074

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     598:	a3 e7       	ldi	r26, 0x73	; 115
     59a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <pvPortMalloc+0x7e>
     59e:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     5a0:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	82 17       	cp	r24, r18
     5a8:	93 07       	cpc	r25, r19
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <pvPortMalloc+0x90>
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	a9 f7       	brne	.-22     	; 0x59e <pvPortMalloc+0x7a>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5b4:	c0 e0       	ldi	r28, 0x00	; 0
     5b6:	e7 37       	cpi	r30, 0x77	; 119
     5b8:	fc 07       	cpc	r31, r28
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x9a>
     5bc:	48 c0       	rjmp	.+144    	; 0x64e <pvPortMalloc+0x12a>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	11 97       	sbiw	r26, 0x01	; 1
     5c4:	8c 01       	movw	r16, r24
     5c6:	0c 5f       	subi	r16, 0xFC	; 252
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	89 30       	cpi	r24, 0x09	; 9
     5de:	91 05       	cpc	r25, r1
     5e0:	18 f1       	brcs	.+70     	; 0x628 <pvPortMalloc+0x104>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5e2:	af 01       	movw	r20, r30
     5e4:	42 0f       	add	r20, r18
     5e6:	53 1f       	adc	r21, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5e8:	da 01       	movw	r26, r20
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	9c 93       	st	X, r25
     5ee:	8e 93       	st	-X, r24
     5f0:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     5f2:	33 83       	std	Z+3, r19	; 0x03
     5f4:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	2d 91       	ld	r18, X+
     5fa:	3c 91       	ld	r19, X
     5fc:	13 97       	sbiw	r26, 0x03	; 3
     5fe:	63 e7       	ldi	r22, 0x73	; 115
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	01 c0       	rjmp	.+2      	; 0x606 <pvPortMalloc+0xe2>
     604:	bd 01       	movw	r22, r26
     606:	eb 01       	movw	r28, r22
     608:	a8 81       	ld	r26, Y
     60a:	b9 81       	ldd	r27, Y+1	; 0x01
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	8d 91       	ld	r24, X+
     610:	9c 91       	ld	r25, X
     612:	13 97       	sbiw	r26, 0x03	; 3
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	a8 f3       	brcs	.-22     	; 0x604 <pvPortMalloc+0xe0>
     61a:	ea 01       	movw	r28, r20
     61c:	b9 83       	std	Y+1, r27	; 0x01
     61e:	a8 83       	st	Y, r26
     620:	db 01       	movw	r26, r22
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	5c 93       	st	X, r21
     626:	4e 93       	st	-X, r20
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     628:	80 91 60 00 	lds	r24, 0x0060
     62c:	90 91 61 00 	lds	r25, 0x0061
     630:	22 81       	ldd	r18, Z+2	; 0x02
     632:	33 81       	ldd	r19, Z+3	; 0x03
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	90 93 61 00 	sts	0x0061, r25
     63c:	80 93 60 00 	sts	0x0060, r24
     640:	08 c0       	rjmp	.+16     	; 0x652 <pvPortMalloc+0x12e>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	05 c0       	rjmp	.+10     	; 0x652 <pvPortMalloc+0x12e>
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <pvPortMalloc+0x12e>
     64e:	00 e0       	ldi	r16, 0x00	; 0
     650:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     652:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     656:	80 2f       	mov	r24, r16
     658:	91 2f       	mov	r25, r17
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	39 f1       	breq	.+78     	; 0x6c0 <vPortFree+0x5c>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     672:	8c 01       	movw	r16, r24
     674:	04 50       	subi	r16, 0x04	; 4
     676:	10 40       	sbci	r17, 0x00	; 0

		vTaskSuspendAll();
     678:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     67c:	f8 01       	movw	r30, r16
     67e:	22 81       	ldd	r18, Z+2	; 0x02
     680:	33 81       	ldd	r19, Z+3	; 0x03
     682:	a3 e7       	ldi	r26, 0x73	; 115
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	01 c0       	rjmp	.+2      	; 0x68a <vPortFree+0x26>
     688:	df 01       	movw	r26, r30
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	11 97       	sbiw	r26, 0x01	; 1
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	82 17       	cp	r24, r18
     696:	93 07       	cpc	r25, r19
     698:	b8 f3       	brcs	.-18     	; 0x688 <vPortFree+0x24>
     69a:	24 97       	sbiw	r28, 0x04	; 4
     69c:	f9 83       	std	Y+1, r31	; 0x01
     69e:	e8 83       	st	Y, r30
     6a0:	0d 93       	st	X+, r16
     6a2:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     6a4:	80 91 60 00 	lds	r24, 0x0060
     6a8:	90 91 61 00 	lds	r25, 0x0061
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	3b 81       	ldd	r19, Y+3	; 0x03
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	90 93 61 00 	sts	0x0061, r25
     6b8:	80 93 60 00 	sts	0x0060, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6bc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
	}
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     6ca:	80 91 60 00 	lds	r24, 0x0060
     6ce:	90 91 61 00 	lds	r25, 0x0061
     6d2:	08 95       	ret

000006d4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     6d4:	08 95       	ret

000006d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d8:	03 96       	adiw	r24, 0x03	; 3
     6da:	92 83       	std	Z+2, r25	; 0x02
     6dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	3f ef       	ldi	r19, 0xFF	; 255
     6e2:	34 83       	std	Z+4, r19	; 0x04
     6e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e6:	96 83       	std	Z+6, r25	; 0x06
     6e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6ea:	90 87       	std	Z+8, r25	; 0x08
     6ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6ee:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     6f0:	08 95       	ret

000006f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6f2:	fc 01       	movw	r30, r24
     6f4:	11 86       	std	Z+9, r1	; 0x09
     6f6:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     6f8:	08 95       	ret

000006fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     700:	dc 01       	movw	r26, r24
     702:	11 96       	adiw	r26, 0x01	; 1
     704:	cd 91       	ld	r28, X+
     706:	dc 91       	ld	r29, X
     708:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     70a:	d3 83       	std	Z+3, r29	; 0x03
     70c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	3d 81       	ldd	r19, Y+5	; 0x05
     712:	35 83       	std	Z+5, r19	; 0x05
     714:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     716:	ac 81       	ldd	r26, Y+4	; 0x04
     718:	bd 81       	ldd	r27, Y+5	; 0x05
     71a:	13 96       	adiw	r26, 0x03	; 3
     71c:	7c 93       	st	X, r23
     71e:	6e 93       	st	-X, r22
     720:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     722:	7d 83       	std	Y+5, r23	; 0x05
     724:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	20 83       	st	Z, r18
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ac 01       	movw	r20, r24
     73e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     740:	28 81       	ld	r18, Y
     742:	39 81       	ldd	r19, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	2f 3f       	cpi	r18, 0xFF	; 255
     748:	38 07       	cpc	r19, r24
     74a:	21 f4       	brne	.+8      	; 0x754 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     74c:	fa 01       	movw	r30, r20
     74e:	a7 81       	ldd	r26, Z+7	; 0x07
     750:	b0 85       	ldd	r27, Z+8	; 0x08
     752:	0d c0       	rjmp	.+26     	; 0x76e <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     754:	da 01       	movw	r26, r20
     756:	13 96       	adiw	r26, 0x03	; 3
     758:	01 c0       	rjmp	.+2      	; 0x75c <vListInsert+0x24>
     75a:	df 01       	movw	r26, r30
     75c:	12 96       	adiw	r26, 0x02	; 2
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	13 97       	sbiw	r26, 0x03	; 3
     764:	80 81       	ld	r24, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	b0 f7       	brcc	.-20     	; 0x75a <vListInsert+0x22>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	13 97       	sbiw	r26, 0x03	; 3
     776:	fb 83       	std	Y+3, r31	; 0x03
     778:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     77a:	d5 83       	std	Z+5, r29	; 0x05
     77c:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     77e:	bd 83       	std	Y+5, r27	; 0x05
     780:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     782:	13 96       	adiw	r26, 0x03	; 3
     784:	dc 93       	st	X, r29
     786:	ce 93       	st	-X, r28
     788:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     78a:	59 87       	std	Y+9, r21	; 0x09
     78c:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     78e:	fa 01       	movw	r30, r20
     790:	80 81       	ld	r24, Z
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 83       	st	Z, r24
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7a2:	c0 85       	ldd	r28, Z+8	; 0x08
     7a4:	d1 85       	ldd	r29, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7a6:	a2 81       	ldd	r26, Z+2	; 0x02
     7a8:	b3 81       	ldd	r27, Z+3	; 0x03
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	95 81       	ldd	r25, Z+5	; 0x05
     7ae:	15 96       	adiw	r26, 0x05	; 5
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7b6:	a4 81       	ldd	r26, Z+4	; 0x04
     7b8:	b5 81       	ldd	r27, Z+5	; 0x05
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	13 96       	adiw	r26, 0x03	; 3
     7c0:	9c 93       	st	X, r25
     7c2:	8e 93       	st	-X, r24
     7c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7c6:	a9 81       	ldd	r26, Y+1	; 0x01
     7c8:	ba 81       	ldd	r27, Y+2	; 0x02
     7ca:	ae 17       	cp	r26, r30
     7cc:	bf 07       	cpc	r27, r31
     7ce:	31 f4       	brne	.+12     	; 0x7dc <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7d0:	14 96       	adiw	r26, 0x04	; 4
     7d2:	8d 91       	ld	r24, X+
     7d4:	9c 91       	ld	r25, X
     7d6:	15 97       	sbiw	r26, 0x05	; 5
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7dc:	11 86       	std	Z+9, r1	; 0x09
     7de:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     7e0:	88 81       	ld	r24, Y
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     7ec:	21 e1       	ldi	r18, 0x11	; 17
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	32 e2       	ldi	r19, 0x22	; 34
     7f6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     7f8:	fc 01       	movw	r30, r24
     7fa:	32 97       	sbiw	r30, 0x02	; 2
     7fc:	a3 e3       	ldi	r26, 0x33	; 51
     7fe:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     800:	fc 01       	movw	r30, r24
     802:	33 97       	sbiw	r30, 0x03	; 3
     804:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     806:	fc 01       	movw	r30, r24
     808:	34 97       	sbiw	r30, 0x04	; 4
     80a:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     80c:	fc 01       	movw	r30, r24
     80e:	35 97       	sbiw	r30, 0x05	; 5
     810:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     812:	fc 01       	movw	r30, r24
     814:	36 97       	sbiw	r30, 0x06	; 6
     816:	60 e8       	ldi	r22, 0x80	; 128
     818:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     81a:	fc 01       	movw	r30, r24
     81c:	37 97       	sbiw	r30, 0x07	; 7
     81e:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     820:	fc 01       	movw	r30, r24
     822:	38 97       	sbiw	r30, 0x08	; 8
     824:	62 e0       	ldi	r22, 0x02	; 2
     826:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     828:	fc 01       	movw	r30, r24
     82a:	39 97       	sbiw	r30, 0x09	; 9
     82c:	63 e0       	ldi	r22, 0x03	; 3
     82e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     830:	fc 01       	movw	r30, r24
     832:	3a 97       	sbiw	r30, 0x0a	; 10
     834:	64 e0       	ldi	r22, 0x04	; 4
     836:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     838:	fc 01       	movw	r30, r24
     83a:	3b 97       	sbiw	r30, 0x0b	; 11
     83c:	65 e0       	ldi	r22, 0x05	; 5
     83e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     840:	fc 01       	movw	r30, r24
     842:	3c 97       	sbiw	r30, 0x0c	; 12
     844:	66 e0       	ldi	r22, 0x06	; 6
     846:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     848:	fc 01       	movw	r30, r24
     84a:	3d 97       	sbiw	r30, 0x0d	; 13
     84c:	67 e0       	ldi	r22, 0x07	; 7
     84e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     850:	fc 01       	movw	r30, r24
     852:	3e 97       	sbiw	r30, 0x0e	; 14
     854:	68 e0       	ldi	r22, 0x08	; 8
     856:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     858:	fc 01       	movw	r30, r24
     85a:	3f 97       	sbiw	r30, 0x0f	; 15
     85c:	69 e0       	ldi	r22, 0x09	; 9
     85e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     860:	fc 01       	movw	r30, r24
     862:	70 97       	sbiw	r30, 0x10	; 16
     864:	60 e1       	ldi	r22, 0x10	; 16
     866:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     868:	fc 01       	movw	r30, r24
     86a:	71 97       	sbiw	r30, 0x11	; 17
     86c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     86e:	fc 01       	movw	r30, r24
     870:	72 97       	sbiw	r30, 0x12	; 18
     872:	22 e1       	ldi	r18, 0x12	; 18
     874:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     876:	fc 01       	movw	r30, r24
     878:	73 97       	sbiw	r30, 0x13	; 19
     87a:	23 e1       	ldi	r18, 0x13	; 19
     87c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     87e:	fc 01       	movw	r30, r24
     880:	74 97       	sbiw	r30, 0x14	; 20
     882:	24 e1       	ldi	r18, 0x14	; 20
     884:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     886:	fc 01       	movw	r30, r24
     888:	75 97       	sbiw	r30, 0x15	; 21
     88a:	25 e1       	ldi	r18, 0x15	; 21
     88c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     88e:	fc 01       	movw	r30, r24
     890:	76 97       	sbiw	r30, 0x16	; 22
     892:	26 e1       	ldi	r18, 0x16	; 22
     894:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     896:	fc 01       	movw	r30, r24
     898:	77 97       	sbiw	r30, 0x17	; 23
     89a:	27 e1       	ldi	r18, 0x17	; 23
     89c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     89e:	fc 01       	movw	r30, r24
     8a0:	78 97       	sbiw	r30, 0x18	; 24
     8a2:	28 e1       	ldi	r18, 0x18	; 24
     8a4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     8a6:	fc 01       	movw	r30, r24
     8a8:	79 97       	sbiw	r30, 0x19	; 25
     8aa:	29 e1       	ldi	r18, 0x19	; 25
     8ac:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     8ae:	fc 01       	movw	r30, r24
     8b0:	7a 97       	sbiw	r30, 0x1a	; 26
     8b2:	20 e2       	ldi	r18, 0x20	; 32
     8b4:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     8b6:	fc 01       	movw	r30, r24
     8b8:	7b 97       	sbiw	r30, 0x1b	; 27
     8ba:	21 e2       	ldi	r18, 0x21	; 33
     8bc:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     8be:	fc 01       	movw	r30, r24
     8c0:	7c 97       	sbiw	r30, 0x1c	; 28
     8c2:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     8c4:	fc 01       	movw	r30, r24
     8c6:	7d 97       	sbiw	r30, 0x1d	; 29
     8c8:	23 e2       	ldi	r18, 0x23	; 35
     8ca:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     8cc:	fc 01       	movw	r30, r24
     8ce:	7e 97       	sbiw	r30, 0x1e	; 30
     8d0:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     8d2:	fc 01       	movw	r30, r24
     8d4:	7f 97       	sbiw	r30, 0x1f	; 31
     8d6:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     8d8:	fc 01       	movw	r30, r24
     8da:	b0 97       	sbiw	r30, 0x20	; 32
     8dc:	26 e2       	ldi	r18, 0x26	; 38
     8de:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     8e0:	fc 01       	movw	r30, r24
     8e2:	b1 97       	sbiw	r30, 0x21	; 33
     8e4:	27 e2       	ldi	r18, 0x27	; 39
     8e6:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     8e8:	fc 01       	movw	r30, r24
     8ea:	b2 97       	sbiw	r30, 0x22	; 34
     8ec:	28 e2       	ldi	r18, 0x28	; 40
     8ee:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     8f0:	fc 01       	movw	r30, r24
     8f2:	b3 97       	sbiw	r30, 0x23	; 35
     8f4:	29 e2       	ldi	r18, 0x29	; 41
     8f6:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     8f8:	fc 01       	movw	r30, r24
     8fa:	b4 97       	sbiw	r30, 0x24	; 36
     8fc:	20 e3       	ldi	r18, 0x30	; 48
     8fe:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     900:	fc 01       	movw	r30, r24
     902:	b5 97       	sbiw	r30, 0x25	; 37
     904:	21 e3       	ldi	r18, 0x31	; 49
     906:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     908:	86 97       	sbiw	r24, 0x26	; 38
}
     90a:	08 95       	ret

0000090c <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     90c:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
     90e:	8c e7       	ldi	r24, 0x7C	; 124
     910:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     912:	8b e0       	ldi	r24, 0x0B	; 11
     914:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     916:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     918:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     91a:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     91c:	a0 91 9c 03 	lds	r26, 0x039C
     920:	b0 91 9d 03 	lds	r27, 0x039D
     924:	cd 91       	ld	r28, X+
     926:	cd bf       	out	0x3d, r28	; 61
     928:	dd 91       	ld	r29, X+
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	bf 90       	pop	r11
     956:	af 90       	pop	r10
     958:	9f 90       	pop	r9
     95a:	8f 90       	pop	r8
     95c:	7f 90       	pop	r7
     95e:	6f 90       	pop	r6
     960:	5f 90       	pop	r5
     962:	4f 90       	pop	r4
     964:	3f 90       	pop	r3
     966:	2f 90       	pop	r2
     968:	1f 90       	pop	r1
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     970:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	08 95       	ret

00000976 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     976:	08 95       	ret

00000978 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	0f 92       	push	r0
     980:	1f 92       	push	r1
     982:	11 24       	eor	r1, r1
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	2f 93       	push	r18
     9a6:	3f 93       	push	r19
     9a8:	4f 93       	push	r20
     9aa:	5f 93       	push	r21
     9ac:	6f 93       	push	r22
     9ae:	7f 93       	push	r23
     9b0:	8f 93       	push	r24
     9b2:	9f 93       	push	r25
     9b4:	af 93       	push	r26
     9b6:	bf 93       	push	r27
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
     9c0:	a0 91 9c 03 	lds	r26, 0x039C
     9c4:	b0 91 9d 03 	lds	r27, 0x039D
     9c8:	0d b6       	in	r0, 0x3d	; 61
     9ca:	0d 92       	st	X+, r0
     9cc:	0e b6       	in	r0, 0x3e	; 62
     9ce:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     9d0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     9d4:	a0 91 9c 03 	lds	r26, 0x039C
     9d8:	b0 91 9d 03 	lds	r27, 0x039D
     9dc:	cd 91       	ld	r28, X+
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	dd 91       	ld	r29, X+
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	7f 91       	pop	r23
     9f6:	6f 91       	pop	r22
     9f8:	5f 91       	pop	r21
     9fa:	4f 91       	pop	r20
     9fc:	3f 91       	pop	r19
     9fe:	2f 91       	pop	r18
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	1f 90       	pop	r1
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a28:	08 95       	ret

00000a2a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	0f 92       	push	r0
     a32:	1f 92       	push	r1
     a34:	11 24       	eor	r1, r1
     a36:	2f 92       	push	r2
     a38:	3f 92       	push	r3
     a3a:	4f 92       	push	r4
     a3c:	5f 92       	push	r5
     a3e:	6f 92       	push	r6
     a40:	7f 92       	push	r7
     a42:	8f 92       	push	r8
     a44:	9f 92       	push	r9
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	a0 91 9c 03 	lds	r26, 0x039C
     a76:	b0 91 9d 03 	lds	r27, 0x039D
     a7a:	0d b6       	in	r0, 0x3d	; 61
     a7c:	0d 92       	st	X+, r0
     a7e:	0e b6       	in	r0, 0x3e	; 62
     a80:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     a82:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskIncrementTick>
     a86:	88 23       	and	r24, r24
     a88:	11 f0       	breq	.+4      	; 0xa8e <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     a8a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     a8e:	a0 91 9c 03 	lds	r26, 0x039C
     a92:	b0 91 9d 03 	lds	r27, 0x039D
     a96:	cd 91       	ld	r28, X+
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	dd 91       	ld	r29, X+
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	7f 90       	pop	r7
     ad0:	6f 90       	pop	r6
     ad2:	5f 90       	pop	r5
     ad4:	4f 90       	pop	r4
     ad6:	3f 90       	pop	r3
     ad8:	2f 90       	pop	r2
     ada:	1f 90       	pop	r1
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ae2:	08 95       	ret

00000ae4 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     ae4:	0e 94 15 05 	call	0xa2a	; 0xa2a <vPortYieldFromTick>
		asm volatile ( "reti" );
     ae8:	18 95       	reti

00000aea <Task1>:
       
	}	   
}

void Task1(void* pv)
{
     aea:	ec 01       	movw	r28, r24
	
	/* Initialization*/
	DIO_Set_Pin_Direction(D,*((char*)pv),OUTPUT);
     aec:	80 e3       	ldi	r24, 0x30	; 48
     aee:	68 81       	ld	r22, Y
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_Set_Pin_Direction>
	u8 x=0;	
	while(1)
	{
		x++;
		DIO_Toggle_Pin(D,*((char*)pv));
     af6:	80 e3       	ldi	r24, 0x30	; 48
     af8:	68 81       	ld	r22, Y
     afa:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_Toggle_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	99 e6       	ldi	r25, 0x69	; 105
     b02:	a8 e1       	ldi	r26, 0x18	; 24
     b04:	81 50       	subi	r24, 0x01	; 1
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	a0 40       	sbci	r26, 0x00	; 0
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <Task1+0x1a>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <Task1+0x24>
     b0e:	00 00       	nop
     b10:	f2 cf       	rjmp	.-28     	; 0xaf6 <Task1+0xc>

00000b12 <Task2>:
	}
	
}

void Task2(void* pv)
{
     b12:	ec 01       	movw	r28, r24
	//vTaskDelay(4000);
	/* Initialization*/
	DIO_Set_Pin_Direction(D,*((char*)pv),OUTPUT);
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	68 81       	ld	r22, Y
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_Set_Pin_Direction>
	}
	
}

void Task2(void* pv)
{
     b1e:	05 e0       	ldi	r16, 0x05	; 5
     b20:	10 2f       	mov	r17, r16
	DIO_Set_Pin_Direction(D,*((char*)pv),OUTPUT);
	u8 x=0;
	while(1)
	{
		x++;
		DIO_Toggle_Pin(D,*((char*)pv));
     b22:	80 e3       	ldi	r24, 0x30	; 48
     b24:	68 81       	ld	r22, Y
     b26:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_Toggle_Pin>
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	99 e6       	ldi	r25, 0x69	; 105
     b2e:	a8 e1       	ldi	r26, 0x18	; 24
     b30:	81 50       	subi	r24, 0x01	; 1
     b32:	90 40       	sbci	r25, 0x00	; 0
     b34:	a0 40       	sbci	r26, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <Task2+0x1e>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <Task2+0x28>
     b3a:	00 00       	nop
     b3c:	11 50       	subi	r17, 0x01	; 1
		_delay_ms(1000);
		if (x == 5)
     b3e:	89 f7       	brne	.-30     	; 0xb22 <Task2+0x10>
		{
			vTaskDelay(4000);
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	9f e0       	ldi	r25, 0x0F	; 15
     b44:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <vTaskDelay>
     b48:	eb cf       	rjmp	.-42     	; 0xb20 <Task2+0xe>

00000b4a <main>:
u8 D0 = 0;
u8 D1 = 1;
int main(void)
{
	
	xTaskCreate(Task1,"Ali",  100,&D0,1,NULL);
     b4a:	85 e7       	ldi	r24, 0x75	; 117
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	62 e6       	ldi	r22, 0x62	; 98
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	44 e6       	ldi	r20, 0x64	; 100
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2b e9       	ldi	r18, 0x9B	; 155
     b58:	33 e0       	ldi	r19, 0x03	; 3
     b5a:	01 e0       	ldi	r16, 0x01	; 1
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	0e 94 87 0a 	call	0x150e	; 0x150e <xTaskCreate>
	xTaskCreate(Task2,"Morsy",100,&D1,2,NULL);
     b64:	89 e8       	ldi	r24, 0x89	; 137
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	66 e6       	ldi	r22, 0x66	; 102
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	44 e6       	ldi	r20, 0x64	; 100
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2c e6       	ldi	r18, 0x6C	; 108
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	02 e0       	ldi	r16, 0x02	; 2
     b76:	0e 94 87 0a 	call	0x150e	; 0x150e <xTaskCreate>
	
	vTaskStartScheduler();
     b7a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <vTaskStartScheduler>
     b7e:	ff cf       	rjmp	.-2      	; 0xb7e <main+0x34>

00000b80 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     b86:	fc 01       	movw	r30, r24
     b88:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	91 11       	cpse	r25, r1
     b92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();

	return xReturn;
}
     b94:	08 95       	ret

00000b96 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b96:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     b98:	44 8d       	ldd	r20, Z+28	; 0x1c
     b9a:	44 23       	and	r20, r20
     b9c:	c1 f0       	breq	.+48     	; 0xbce <prvCopyDataFromQueue+0x38>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b9e:	26 81       	ldd	r18, Z+6	; 0x06
     ba0:	37 81       	ldd	r19, Z+7	; 0x07
     ba2:	24 0f       	add	r18, r20
     ba4:	31 1d       	adc	r19, r1
     ba6:	37 83       	std	Z+7, r19	; 0x07
     ba8:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     baa:	a2 81       	ldd	r26, Z+2	; 0x02
     bac:	b3 81       	ldd	r27, Z+3	; 0x03
     bae:	2a 17       	cp	r18, r26
     bb0:	3b 07       	cpc	r19, r27
     bb2:	20 f0       	brcs	.+8      	; 0xbbc <prvCopyDataFromQueue+0x26>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	37 83       	std	Z+7, r19	; 0x07
     bba:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     bbc:	36 81       	ldd	r19, Z+6	; 0x06
     bbe:	27 81       	ldd	r18, Z+7	; 0x07
     bc0:	86 2f       	mov	r24, r22
     bc2:	97 2f       	mov	r25, r23
     bc4:	63 2f       	mov	r22, r19
     bc6:	72 2f       	mov	r23, r18
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
     bce:	08 95       	ret

00000bd0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	8c 01       	movw	r16, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     be2:	fc 01       	movw	r30, r24
     be4:	c6 8d       	ldd	r28, Z+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     be6:	1c 16       	cp	r1, r28
     be8:	cc f4       	brge	.+50     	; 0xc1c <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     bea:	81 89       	ldd	r24, Z+17	; 0x11
     bec:	88 23       	and	r24, r24
     bee:	31 f4       	brne	.+12     	; 0xbfc <prvUnlockQueue+0x2c>
     bf0:	15 c0       	rjmp	.+42     	; 0xc1c <prvUnlockQueue+0x4c>
     bf2:	f8 01       	movw	r30, r16
     bf4:	81 89       	ldd	r24, Z+17	; 0x11
     bf6:	88 23       	and	r24, r24
     bf8:	41 f4       	brne	.+16     	; 0xc0a <prvUnlockQueue+0x3a>
     bfa:	10 c0       	rjmp	.+32     	; 0xc1c <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     bfc:	0f 2e       	mov	r0, r31
     bfe:	f1 e1       	ldi	r31, 0x11	; 17
     c00:	ef 2e       	mov	r14, r31
     c02:	ff 24       	eor	r15, r15
     c04:	f0 2d       	mov	r31, r0
     c06:	e0 0e       	add	r14, r16
     c08:	f1 1e       	adc	r15, r17
     c0a:	c7 01       	movw	r24, r14
     c0c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
     c10:	88 23       	and	r24, r24
     c12:	11 f0       	breq	.+4      	; 0xc18 <prvUnlockQueue+0x48>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     c14:	0e 94 bb 10 	call	0x2176	; 0x2176 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     c18:	c1 50       	subi	r28, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     c1a:	59 f7       	brne	.-42     	; 0xbf2 <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	f8 01       	movw	r30, r16
     c20:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     c2c:	f8 01       	movw	r30, r16
     c2e:	c5 8d       	ldd	r28, Z+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c30:	1c 16       	cp	r1, r28
     c32:	c4 f4       	brge	.+48     	; 0xc64 <prvUnlockQueue+0x94>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c34:	80 85       	ldd	r24, Z+8	; 0x08
     c36:	88 23       	and	r24, r24
     c38:	31 f4       	brne	.+12     	; 0xc46 <prvUnlockQueue+0x76>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <prvUnlockQueue+0x94>
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 85       	ldd	r24, Z+8	; 0x08
     c40:	88 23       	and	r24, r24
     c42:	39 f4       	brne	.+14     	; 0xc52 <prvUnlockQueue+0x82>
     c44:	0f c0       	rjmp	.+30     	; 0xc64 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c46:	ee 24       	eor	r14, r14
     c48:	ff 24       	eor	r15, r15
     c4a:	68 94       	set
     c4c:	e3 f8       	bld	r14, 3
     c4e:	e0 0e       	add	r14, r16
     c50:	f1 1e       	adc	r15, r17
     c52:	c7 01       	movw	r24, r14
     c54:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
     c58:	88 23       	and	r24, r24
     c5a:	11 f0       	breq	.+4      	; 0xc60 <prvUnlockQueue+0x90>
				{
					vTaskMissedYield();
     c5c:	0e 94 bb 10 	call	0x2176	; 0x2176 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     c60:	c1 50       	subi	r28, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c62:	61 f7       	brne	.-40     	; 0xc3c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	f8 01       	movw	r30, r16
     c68:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
}
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	08 95       	ret

00000c7a <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c86:	0a 8d       	ldd	r16, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     c88:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c8a:	44 23       	and	r20, r20
     c8c:	61 f4       	brne	.+24     	; 0xca6 <prvCopyDataToQueue+0x2c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c8e:	88 81       	ld	r24, Y
     c90:	99 81       	ldd	r25, Y+1	; 0x01
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	09 f0       	breq	.+2      	; 0xc98 <prvCopyDataToQueue+0x1e>
     c96:	42 c0       	rjmp	.+132    	; 0xd1c <prvCopyDataToQueue+0xa2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	0e 94 22 11 	call	0x2244	; 0x2244 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     ca0:	1b 82       	std	Y+3, r1	; 0x03
     ca2:	1a 82       	std	Y+2, r1	; 0x02
     ca4:	42 c0       	rjmp	.+132    	; 0xd2a <prvCopyDataToQueue+0xb0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     ca6:	11 23       	and	r17, r17
     ca8:	b9 f4       	brne	.+46     	; 0xcd8 <prvCopyDataToQueue+0x5e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     caa:	8c 81       	ldd	r24, Y+4	; 0x04
     cac:	9d 81       	ldd	r25, Y+5	; 0x05
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     cb4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	82 0f       	add	r24, r18
     cbc:	91 1d       	adc	r25, r1
     cbe:	9d 83       	std	Y+5, r25	; 0x05
     cc0:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     cc2:	2a 81       	ldd	r18, Y+2	; 0x02
     cc4:	3b 81       	ldd	r19, Y+3	; 0x03
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	50 f1       	brcs	.+84     	; 0xd20 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     ccc:	88 81       	ld	r24, Y
     cce:	99 81       	ldd	r25, Y+1	; 0x01
     cd0:	9d 83       	std	Y+5, r25	; 0x05
     cd2:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	29 c0       	rjmp	.+82     	; 0xd2a <prvCopyDataToQueue+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     cd8:	8e 81       	ldd	r24, Y+6	; 0x06
     cda:	9f 81       	ldd	r25, Y+7	; 0x07
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     ce2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	50 95       	com	r21
     ce8:	41 95       	neg	r20
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	8e 81       	ldd	r24, Y+6	; 0x06
     cee:	9f 81       	ldd	r25, Y+7	; 0x07
     cf0:	84 0f       	add	r24, r20
     cf2:	95 1f       	adc	r25, r21
     cf4:	9f 83       	std	Y+7, r25	; 0x07
     cf6:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     cf8:	28 81       	ld	r18, Y
     cfa:	39 81       	ldd	r19, Y+1	; 0x01
     cfc:	82 17       	cp	r24, r18
     cfe:	93 07       	cpc	r25, r19
     d00:	30 f4       	brcc	.+12     	; 0xd0e <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	84 0f       	add	r24, r20
     d08:	95 1f       	adc	r25, r21
     d0a:	9f 83       	std	Y+7, r25	; 0x07
     d0c:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     d0e:	12 30       	cpi	r17, 0x02	; 2
     d10:	49 f4       	brne	.+18     	; 0xd24 <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     d12:	00 23       	and	r16, r16
     d14:	49 f0       	breq	.+18     	; 0xd28 <prvCopyDataToQueue+0xae>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     d16:	01 50       	subi	r16, 0x01	; 1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <prvCopyDataToQueue+0xb0>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <prvCopyDataToQueue+0xb0>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <prvCopyDataToQueue+0xb0>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <prvCopyDataToQueue+0xb0>
     d28:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	0a 8f       	std	Y+26, r16	; 0x1a

	return xReturn;
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d44:	48 81       	ld	r20, Y
     d46:	59 81       	ldd	r21, Y+1	; 0x01
     d48:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	2e 9f       	mul	r18, r30
     d52:	c0 01       	movw	r24, r0
     d54:	2f 9f       	mul	r18, r31
     d56:	90 0d       	add	r25, r0
     d58:	3e 9f       	mul	r19, r30
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	84 0f       	add	r24, r20
     d60:	95 1f       	adc	r25, r21
     d62:	9b 83       	std	Y+3, r25	; 0x03
     d64:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d66:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d68:	5d 83       	std	Y+5, r21	; 0x05
     d6a:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d6c:	c9 01       	movw	r24, r18
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	e8 9f       	mul	r30, r24
     d72:	90 01       	movw	r18, r0
     d74:	e9 9f       	mul	r30, r25
     d76:	30 0d       	add	r19, r0
     d78:	f8 9f       	mul	r31, r24
     d7a:	30 0d       	add	r19, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	24 0f       	add	r18, r20
     d80:	35 1f       	adc	r19, r21
     d82:	3f 83       	std	Y+7, r19	; 0x07
     d84:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
     d8a:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     d8c:	66 23       	and	r22, r22
     d8e:	61 f4       	brne	.+24     	; 0xda8 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	88 23       	and	r24, r24
     d94:	89 f0       	breq	.+34     	; 0xdb8 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     d96:	ce 01       	movw	r24, r28
     d98:	08 96       	adiw	r24, 0x08	; 8
     d9a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
     d9e:	88 23       	and	r24, r24
     da0:	59 f0       	breq	.+22     	; 0xdb8 <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
     da2:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
     da6:	08 c0       	rjmp	.+16     	; 0xdb8 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     da8:	ce 01       	movw	r24, r28
     daa:	08 96       	adiw	r24, 0x08	; 8
     dac:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     db0:	ce 01       	movw	r24, r28
     db2:	41 96       	adiw	r24, 0x11	; 17
     db4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	08 2f       	mov	r16, r24
     dce:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
     dd0:	66 23       	and	r22, r22
     dd2:	21 f0       	breq	.+8      	; 0xddc <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     dd4:	68 9f       	mul	r22, r24
     dd6:	c0 01       	movw	r24, r0
     dd8:	11 24       	eor	r1, r1
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <xQueueGenericCreate+0x1c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     de0:	4f 96       	adiw	r24, 0x1f	; 31
     de2:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
     de6:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	71 f0       	breq	.+28     	; 0xe08 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     dec:	11 23       	and	r17, r17
     dee:	19 f4       	brne	.+6      	; 0xdf6 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     df0:	99 83       	std	Y+1, r25	; 0x01
     df2:	88 83       	st	Y, r24
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <xQueueGenericCreate+0x38>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     df6:	4f 96       	adiw	r24, 0x1f	; 31
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     df8:	99 83       	std	Y+1, r25	; 0x01
     dfa:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     dfc:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
     dfe:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e00:	ce 01       	movw	r24, r28
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	0e 94 9c 06 	call	0xd38	; 0xd38 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
     e08:	8c 2f       	mov	r24, r28
     e0a:	9d 2f       	mov	r25, r29
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <xQueueGenericSend+0x18>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <xQueueGenericSend+0x1a>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8c 01       	movw	r16, r24
     e38:	4b 01       	movw	r8, r22
     e3a:	5d 83       	std	Y+5, r21	; 0x05
     e3c:	4c 83       	std	Y+4, r20	; 0x04
     e3e:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     e40:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
     e42:	bb 24       	eor	r11, r11
     e44:	b3 94       	inc	r11
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e46:	cc 24       	eor	r12, r12
     e48:	dd 24       	eor	r13, r13
     e4a:	68 94       	set
     e4c:	c3 f8       	bld	r12, 3
     e4e:	c8 0e       	add	r12, r24
     e50:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     e58:	f8 01       	movw	r30, r16
     e5a:	92 8d       	ldd	r25, Z+26	; 0x1a
     e5c:	83 8d       	ldd	r24, Z+27	; 0x1b
     e5e:	98 17       	cp	r25, r24
     e60:	18 f0       	brcs	.+6      	; 0xe68 <xQueueGenericSend+0x52>
     e62:	f2 e0       	ldi	r31, 0x02	; 2
     e64:	ef 16       	cp	r14, r31
     e66:	d1 f4       	brne	.+52     	; 0xe9c <xQueueGenericSend+0x86>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     e68:	c8 01       	movw	r24, r16
     e6a:	b4 01       	movw	r22, r8
     e6c:	4e 2d       	mov	r20, r14
     e6e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e72:	f8 01       	movw	r30, r16
     e74:	91 89       	ldd	r25, Z+17	; 0x11
     e76:	99 23       	and	r25, r25
     e78:	49 f0       	breq	.+18     	; 0xe8c <xQueueGenericSend+0x76>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e7a:	c8 01       	movw	r24, r16
     e7c:	41 96       	adiw	r24, 0x11	; 17
     e7e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
     e82:	88 23       	and	r24, r24
     e84:	39 f0       	breq	.+14     	; 0xe94 <xQueueGenericSend+0x7e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     e86:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <xQueueGenericSend+0x7e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     e8c:	88 23       	and	r24, r24
     e8e:	11 f0       	breq	.+4      	; 0xe94 <xQueueGenericSend+0x7e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     e90:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	52 c0       	rjmp	.+164    	; 0xf40 <xQueueGenericSend+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	21 f4       	brne	.+8      	; 0xeac <xQueueGenericSend+0x96>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	4a c0       	rjmp	.+148    	; 0xf40 <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
     eac:	ff 20       	and	r15, r15
     eae:	29 f4       	brne	.+10     	; 0xeba <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     eb8:	fb 2c       	mov	r15, r11
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     ebe:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	f8 01       	movw	r30, r16
     eca:	85 8d       	ldd	r24, Z+29	; 0x1d
     ecc:	8f 3f       	cpi	r24, 0xFF	; 255
     ece:	09 f4       	brne	.+2      	; 0xed2 <xQueueGenericSend+0xbc>
     ed0:	15 8e       	std	Z+29, r1	; 0x1d
     ed2:	f8 01       	movw	r30, r16
     ed4:	86 8d       	ldd	r24, Z+30	; 0x1e
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	09 f4       	brne	.+2      	; 0xedc <xQueueGenericSend+0xc6>
     eda:	16 8e       	std	Z+30, r1	; 0x1e
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     ee0:	ce 01       	movw	r24, r28
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	be 01       	movw	r22, r28
     ee6:	6c 5f       	subi	r22, 0xFC	; 252
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	0e 94 86 10 	call	0x210c	; 0x210c <xTaskCheckForTimeOut>
     eee:	88 23       	and	r24, r24
     ef0:	09 f5       	brne	.+66     	; 0xf34 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     ef8:	f8 01       	movw	r30, r16
     efa:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     f00:	f8 01       	movw	r30, r16
     f02:	83 8d       	ldd	r24, Z+27	; 0x1b
     f04:	98 17       	cp	r25, r24
     f06:	81 f4       	brne	.+32     	; 0xf28 <xQueueGenericSend+0x112>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     f08:	6c 81       	ldd	r22, Y+4	; 0x04
     f0a:	7d 81       	ldd	r23, Y+5	; 0x05
     f0c:	c6 01       	movw	r24, r12
     f0e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     f18:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     f1c:	88 23       	and	r24, r24
     f1e:	09 f0       	breq	.+2      	; 0xf22 <xQueueGenericSend+0x10c>
     f20:	98 cf       	rjmp	.-208    	; 0xe52 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
     f22:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
     f26:	95 cf       	rjmp	.-214    	; 0xe52 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f28:	c8 01       	movw	r24, r16
     f2a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     f2e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     f32:	8f cf       	rjmp	.-226    	; 0xe52 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     f3a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	08 95       	ret

00000f62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	48 2f       	mov	r20, r24
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <xQueueGenericCreate>
     f70:	ec 01       	movw	r28, r24

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 f0       	breq	.+24     	; 0xf8e <xQueueCreateMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     f76:	1b 82       	std	Y+3, r1	; 0x03
     f78:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	18 82       	st	Y, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
     f7e:	1e 82       	std	Y+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	0e 94 0b 07 	call	0xe16	; 0xe16 <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
     f8e:	8c 2f       	mov	r24, r28
     f90:	9d 2f       	mov	r25, r29
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	8c 01       	movw	r16, r24
     fa4:	7a 01       	movw	r14, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     fa6:	fc 01       	movw	r30, r24
     fa8:	92 8d       	ldd	r25, Z+26	; 0x1a
     faa:	83 8d       	ldd	r24, Z+27	; 0x1b
     fac:	98 17       	cp	r25, r24
     fae:	10 f0       	brcs	.+4      	; 0xfb4 <xQueueGenericSendFromISR+0x1c>
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	f1 f4       	brne	.+60     	; 0xff0 <xQueueGenericSendFromISR+0x58>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
     fb4:	f8 01       	movw	r30, r16
     fb6:	c6 8d       	ldd	r28, Z+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     fb8:	c8 01       	movw	r24, r16
     fba:	42 2f       	mov	r20, r18
     fbc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
     fc0:	cf 3f       	cpi	r28, 0xFF	; 255
     fc2:	89 f4       	brne	.+34     	; 0xfe6 <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     fc4:	f8 01       	movw	r30, r16
     fc6:	81 89       	ldd	r24, Z+17	; 0x11
     fc8:	88 23       	and	r24, r24
     fca:	a1 f0       	breq	.+40     	; 0xff4 <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     fcc:	c8 01       	movw	r24, r16
     fce:	41 96       	adiw	r24, 0x11	; 17
     fd0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
     fd4:	88 23       	and	r24, r24
     fd6:	81 f0       	breq	.+32     	; 0xff8 <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     fd8:	e1 14       	cp	r14, r1
     fda:	f1 04       	cpc	r15, r1
     fdc:	79 f0       	breq	.+30     	; 0xffc <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	f7 01       	movw	r30, r14
     fe2:	80 83       	st	Z, r24
     fe4:	0c c0       	rjmp	.+24     	; 0xffe <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     fe6:	cf 5f       	subi	r28, 0xFF	; 255
     fe8:	f8 01       	movw	r30, r16
     fea:	c6 8f       	std	Z+30, r28	; 0x1e
			}

			xReturn = pdPASS;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	07 c0       	rjmp	.+14     	; 0xffe <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <xQueueGenericSendFromISR+0x66>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <xQueueGenericSendFromISR+0x66>
     ffc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	fc 01       	movw	r30, r24
    1010:	eb 01       	movw	r28, r22
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1012:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    1014:	93 8d       	ldd	r25, Z+27	; 0x1b
    1016:	89 17       	cp	r24, r25
    1018:	b8 f4       	brcc	.+46     	; 0x1048 <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    101a:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1020:	9f 3f       	cpi	r25, 0xFF	; 255
    1022:	71 f4       	brne	.+28     	; 0x1040 <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1024:	81 89       	ldd	r24, Z+17	; 0x11
    1026:	88 23       	and	r24, r24
    1028:	89 f0       	breq	.+34     	; 0x104c <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    102a:	cf 01       	movw	r24, r30
    102c:	41 96       	adiw	r24, 0x11	; 17
    102e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
    1032:	88 23       	and	r24, r24
    1034:	69 f0       	breq	.+26     	; 0x1050 <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1036:	20 97       	sbiw	r28, 0x00	; 0
    1038:	69 f0       	breq	.+26     	; 0x1054 <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	88 83       	st	Y, r24
    103e:	0b c0       	rjmp	.+22     	; 0x1056 <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <xQueueGiveFromISR+0x4c>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <xQueueGiveFromISR+0x4c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    105c:	8f 92       	push	r8
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <xQueueGenericReceive+0x1a>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <xQueueGenericReceive+0x1c>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	7c 01       	movw	r14, r24
    1080:	4b 01       	movw	r8, r22
    1082:	5d 83       	std	Y+5, r21	; 0x05
    1084:	4c 83       	std	Y+4, r20	; 0x04
    1086:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1088:	00 e0       	ldi	r16, 0x00	; 0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    108a:	dd 24       	eor	r13, r13
    108c:	d3 94       	inc	r13
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    108e:	0f 2e       	mov	r0, r31
    1090:	f1 e1       	ldi	r31, 0x11	; 17
    1092:	af 2e       	mov	r10, r31
    1094:	bb 24       	eor	r11, r11
    1096:	f0 2d       	mov	r31, r0
    1098:	a8 0e       	add	r10, r24
    109a:	b9 1e       	adc	r11, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    10a2:	f7 01       	movw	r30, r14
    10a4:	12 8d       	ldd	r17, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    10a6:	11 23       	and	r17, r17
    10a8:	99 f1       	breq	.+102    	; 0x1110 <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    10aa:	a6 80       	ldd	r10, Z+6	; 0x06
    10ac:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    10ae:	c7 01       	movw	r24, r14
    10b0:	b4 01       	movw	r22, r8
    10b2:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    10b6:	cc 20       	and	r12, r12
    10b8:	c9 f4       	brne	.+50     	; 0x10ec <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    10ba:	11 50       	subi	r17, 0x01	; 1
    10bc:	f7 01       	movw	r30, r14
    10be:	12 8f       	std	Z+26, r17	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	29 f4       	brne	.+10     	; 0x10d2 <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    10c8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <pvTaskIncrementMutexHeldCount>
    10cc:	f7 01       	movw	r30, r14
    10ce:	93 83       	std	Z+3, r25	; 0x03
    10d0:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    10d2:	f7 01       	movw	r30, r14
    10d4:	80 85       	ldd	r24, Z+8	; 0x08
    10d6:	88 23       	and	r24, r24
    10d8:	b9 f0       	breq	.+46     	; 0x1108 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    10da:	c7 01       	movw	r24, r14
    10dc:	08 96       	adiw	r24, 0x08	; 8
    10de:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
    10e2:	88 23       	and	r24, r24
    10e4:	89 f0       	breq	.+34     	; 0x1108 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
    10e6:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    10ec:	f7 01       	movw	r30, r14
    10ee:	b7 82       	std	Z+7, r11	; 0x07
    10f0:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10f2:	81 89       	ldd	r24, Z+17	; 0x11
    10f4:	88 23       	and	r24, r24
    10f6:	41 f0       	breq	.+16     	; 0x1108 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10f8:	c7 01       	movw	r24, r14
    10fa:	41 96       	adiw	r24, 0x11	; 17
    10fc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
    1100:	88 23       	and	r24, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1104:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	61 c0       	rjmp	.+194    	; 0x11d2 <xQueueGenericReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	21 f4       	brne	.+8      	; 0x1120 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	59 c0       	rjmp	.+178    	; 0x11d2 <xQueueGenericReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
    1120:	00 23       	and	r16, r16
    1122:	29 f4       	brne	.+10     	; 0x112e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    112c:	0d 2d       	mov	r16, r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1132:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	0f 92       	push	r0
    113c:	f7 01       	movw	r30, r14
    113e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1140:	8f 3f       	cpi	r24, 0xFF	; 255
    1142:	09 f4       	brne	.+2      	; 0x1146 <xQueueGenericReceive+0xea>
    1144:	15 8e       	std	Z+29, r1	; 0x1d
    1146:	f7 01       	movw	r30, r14
    1148:	86 8d       	ldd	r24, Z+30	; 0x1e
    114a:	8f 3f       	cpi	r24, 0xFF	; 255
    114c:	09 f4       	brne	.+2      	; 0x1150 <xQueueGenericReceive+0xf4>
    114e:	16 8e       	std	Z+30, r1	; 0x1e
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	be 01       	movw	r22, r28
    115a:	6c 5f       	subi	r22, 0xFC	; 252
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	0e 94 86 10 	call	0x210c	; 0x210c <xTaskCheckForTimeOut>
    1162:	88 23       	and	r24, r24
    1164:	51 f5       	brne	.+84     	; 0x11ba <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 c0 05 	call	0xb80	; 0xb80 <prvIsQueueEmpty>
    116c:	88 23       	and	r24, r24
    116e:	f9 f0       	breq	.+62     	; 0x11ae <xQueueGenericReceive+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1170:	f7 01       	movw	r30, r14
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	51 f4       	brne	.+20     	; 0x118e <xQueueGenericReceive+0x132>
					{
						taskENTER_CRITICAL();
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1180:	f7 01       	movw	r30, r14
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	0e 94 c4 10 	call	0x2188	; 0x2188 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    118e:	6c 81       	ldd	r22, Y+4	; 0x04
    1190:	7d 81       	ldd	r23, Y+5	; 0x05
    1192:	c5 01       	movw	r24, r10
    1194:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1198:	c7 01       	movw	r24, r14
    119a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    119e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
    11a2:	88 23       	and	r24, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <xQueueGenericReceive+0x14c>
    11a6:	7a cf       	rjmp	.-268    	; 0x109c <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
    11a8:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    11ac:	77 cf       	rjmp	.-274    	; 0x109c <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11ae:	c7 01       	movw	r24, r14
    11b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11b4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
    11b8:	71 cf       	rjmp	.-286    	; 0x109c <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11ba:	c7 01       	movw	r24, r14
    11bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11c0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11c4:	c7 01       	movw	r24, r14
    11c6:	0e 94 c0 05 	call	0xb80	; 0xb80 <prvIsQueueEmpty>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <xQueueGenericReceive+0x174>
    11ce:	66 cf       	rjmp	.-308    	; 0x109c <xQueueGenericReceive+0x40>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	08 95       	ret

000011f6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	8c 01       	movw	r16, r24
    1204:	7a 01       	movw	r14, r20
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1206:	fc 01       	movw	r30, r24
    1208:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    120a:	cc 23       	and	r28, r28
    120c:	e9 f0       	breq	.+58     	; 0x1248 <xQueueReceiveFromISR+0x52>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    120e:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1210:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1214:	c1 50       	subi	r28, 0x01	; 1
    1216:	f8 01       	movw	r30, r16
    1218:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    121a:	df 3f       	cpi	r29, 0xFF	; 255
    121c:	81 f4       	brne	.+32     	; 0x123e <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    121e:	80 85       	ldd	r24, Z+8	; 0x08
    1220:	88 23       	and	r24, r24
    1222:	a1 f0       	breq	.+40     	; 0x124c <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1224:	c8 01       	movw	r24, r16
    1226:	08 96       	adiw	r24, 0x08	; 8
    1228:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <xTaskRemoveFromEventList>
    122c:	88 23       	and	r24, r24
    122e:	81 f0       	breq	.+32     	; 0x1250 <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1230:	e1 14       	cp	r14, r1
    1232:	f1 04       	cpc	r15, r1
    1234:	79 f0       	breq	.+30     	; 0x1254 <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	f7 01       	movw	r30, r14
    123a:	80 83       	st	Z, r24
    123c:	0c c0       	rjmp	.+24     	; 0x1256 <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    123e:	df 5f       	subi	r29, 0xFF	; 255
    1240:	f8 01       	movw	r30, r16
    1242:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <xQueueReceiveFromISR+0x60>
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <xQueueReceiveFromISR+0x60>
    1254:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    126e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1270:	88 23       	and	r24, r24
    1272:	49 f0       	breq	.+18     	; 0x1286 <xQueuePeekFromISR+0x22>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1274:	0e 81       	ldd	r16, Y+6	; 0x06
    1276:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1278:	ce 01       	movw	r24, r28
    127a:	0e 94 cb 05 	call	0xb96	; 0xb96 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    127e:	1f 83       	std	Y+7, r17	; 0x07
    1280:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    1286:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1298:	fc 01       	movw	r30, r24
    129a:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12a0:	08 95       	ret

000012a2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    12a2:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12aa:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12b0:	83 8d       	ldd	r24, Z+27	; 0x1b
	}
	taskEXIT_CRITICAL();

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12b2:	89 1b       	sub	r24, r25
    12b4:	08 95       	ret

000012b6 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12b6:	fc 01       	movw	r30, r24
    12b8:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12ba:	08 95       	ret

000012bc <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    12bc:	fc 01       	movw	r30, r24
    12be:	92 8d       	ldd	r25, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	91 11       	cpse	r25, r1
    12c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12c6:	08 95       	ret

000012c8 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    12c8:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    12ca:	22 8d       	ldd	r18, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	93 8d       	ldd	r25, Z+27	; 0x1b
    12d0:	29 13       	cpse	r18, r25
    12d2:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12d4:	08 95       	ret

000012d6 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    12d6:	dc 01       	movw	r26, r24

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    12d8:	80 91 0b 04 	lds	r24, 0x040B
    12dc:	90 91 0c 04 	lds	r25, 0x040C
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	51 f0       	breq	.+20     	; 0x12f8 <vQueueAddToRegistry+0x22>
    12e4:	ef e0       	ldi	r30, 0x0F	; 15
    12e6:	f4 e0       	ldi	r31, 0x04	; 4
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	79 f4       	brne	.+30     	; 0x1314 <vQueueAddToRegistry+0x3e>
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <vQueueAddToRegistry+0x26>
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    12fc:	fa 01       	movw	r30, r20
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	e5 5f       	subi	r30, 0xF5	; 245
    1308:	fb 4f       	sbci	r31, 0xFB	; 251
    130a:	71 83       	std	Z+1, r23	; 0x01
    130c:	60 83       	st	Z, r22
				xQueueRegistry[ ux ].xHandle = xQueue;
    130e:	b3 83       	std	Z+3, r27	; 0x03
    1310:	a2 83       	std	Z+2, r26	; 0x02

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    1312:	08 95       	ret
    1314:	2f 5f       	subi	r18, 0xFF	; 255
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    131a:	28 30       	cpi	r18, 0x08	; 8
    131c:	31 05       	cpc	r19, r1
    131e:	31 f7       	brne	.-52     	; 0x12ec <vQueueAddToRegistry+0x16>
    1320:	08 95       	ret

00001322 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1322:	ac 01       	movw	r20, r24

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1324:	80 91 0d 04 	lds	r24, 0x040D
    1328:	90 91 0e 04 	lds	r25, 0x040E
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	59 f0       	breq	.+22     	; 0x1348 <pcQueueGetName+0x26>
    1332:	e1 e1       	ldi	r30, 0x11	; 17
    1334:	f4 e0       	ldi	r31, 0x04	; 4
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	b9 01       	movw	r22, r18
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	84 17       	cp	r24, r20
    1342:	95 07       	cpc	r25, r21
    1344:	69 f4       	brne	.+26     	; 0x1360 <pcQueueGetName+0x3e>
    1346:	02 c0       	rjmp	.+4      	; 0x134c <pcQueueGetName+0x2a>
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    134c:	fb 01       	movw	r30, r22
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	e5 5f       	subi	r30, 0xF5	; 245
    1358:	fb 4f       	sbci	r31, 0xFB	; 251
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
				break;
    135e:	08 95       	ret
    1360:	2f 5f       	subi	r18, 0xFF	; 255
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	34 96       	adiw	r30, 0x04	; 4
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1366:	28 30       	cpi	r18, 0x08	; 8
    1368:	31 05       	cpc	r19, r1
    136a:	39 f7       	brne	.-50     	; 0x133a <pcQueueGetName+0x18>
#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
    1370:	08 95       	ret

00001372 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    1372:	ac 01       	movw	r20, r24

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1374:	80 91 0d 04 	lds	r24, 0x040D
    1378:	90 91 0e 04 	lds	r25, 0x040E
    137c:	84 17       	cp	r24, r20
    137e:	95 07       	cpc	r25, r21
    1380:	59 f0       	breq	.+22     	; 0x1398 <vQueueUnregisterQueue+0x26>
    1382:	e1 e1       	ldi	r30, 0x11	; 17
    1384:	f4 e0       	ldi	r31, 0x04	; 4
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	b9 01       	movw	r22, r18
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	84 17       	cp	r24, r20
    1392:	95 07       	cpc	r25, r21
    1394:	79 f4       	brne	.+30     	; 0x13b4 <vQueueUnregisterQueue+0x42>
    1396:	02 c0       	rjmp	.+4      	; 0x139c <vQueueUnregisterQueue+0x2a>
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    139c:	fb 01       	movw	r30, r22
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	e5 5f       	subi	r30, 0xF5	; 245
    13a8:	fb 4f       	sbci	r31, 0xFB	; 251
    13aa:	11 82       	std	Z+1, r1	; 0x01
    13ac:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    13ae:	13 82       	std	Z+3, r1	; 0x03
    13b0:	12 82       	std	Z+2, r1	; 0x02
				break;
    13b2:	08 95       	ret
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    13ba:	28 30       	cpi	r18, 0x08	; 8
    13bc:	31 05       	cpc	r19, r1
    13be:	29 f7       	brne	.-54     	; 0x138a <vQueueUnregisterQueue+0x18>
    13c0:	08 95       	ret

000013c2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    13c8:	0e 94 b9 09 	call	0x1372	; 0x1372 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    13cc:	ce 01       	movw	r24, r28
    13ce:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    13d8:	fc 01       	movw	r30, r24

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    13da:	82 85       	ldd	r24, Z+10	; 0x0a
    13dc:	93 85       	ldd	r25, Z+11	; 0x0b
    13de:	24 e0       	ldi	r18, 0x04	; 4
    13e0:	80 30       	cpi	r24, 0x00	; 0
    13e2:	92 07       	cpc	r25, r18
    13e4:	61 f4       	brne	.+24     	; 0x13fe <prvTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    13e6:	24 89       	ldd	r18, Z+20	; 0x14
    13e8:	35 89       	ldd	r19, Z+21	; 0x15
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	2e 3e       	cpi	r18, 0xEE	; 238
    13ee:	38 07       	cpc	r19, r24
    13f0:	41 f0       	breq	.+16     	; 0x1402 <prvTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	21 15       	cp	r18, r1
    13f6:	31 05       	cpc	r19, r1
    13f8:	29 f0       	breq	.+10     	; 0x1404 <prvTaskIsTaskSuspended+0x2c>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	08 95       	ret
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	08 95       	ret
    1402:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    1404:	08 95       	ret

00001406 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1406:	e0 91 ac 03 	lds	r30, 0x03AC
    140a:	f0 91 ad 03 	lds	r31, 0x03AD
    140e:	80 81       	ld	r24, Z
    1410:	88 23       	and	r24, r24
    1412:	39 f4       	brne	.+14     	; 0x1422 <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	90 93 a0 03 	sts	0x03A0, r25
    141c:	80 93 9f 03 	sts	0x039F, r24
    1420:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1422:	e0 91 ac 03 	lds	r30, 0x03AC
    1426:	f0 91 ad 03 	lds	r31, 0x03AD
    142a:	05 80       	ldd	r0, Z+5	; 0x05
    142c:	f6 81       	ldd	r31, Z+6	; 0x06
    142e:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1430:	06 80       	ldd	r0, Z+6	; 0x06
    1432:	f7 81       	ldd	r31, Z+7	; 0x07
    1434:	e0 2d       	mov	r30, r0
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	90 93 a0 03 	sts	0x03A0, r25
    143e:	80 93 9f 03 	sts	0x039F, r24
    1442:	08 95       	ret

00001444 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
    1450:	16 2f       	mov	r17, r22
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1452:	e0 90 a6 03 	lds	r14, 0x03A6
    1456:	f0 90 a7 03 	lds	r15, 0x03A7
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    145a:	80 91 9c 03 	lds	r24, 0x039C
    145e:	90 91 9d 03 	lds	r25, 0x039D
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	cf 3f       	cpi	r28, 0xFF	; 255
    146c:	d8 07       	cpc	r29, r24
    146e:	69 f4       	brne	.+26     	; 0x148a <prvAddCurrentTaskToDelayedList+0x46>
    1470:	11 23       	and	r17, r17
    1472:	59 f0       	breq	.+22     	; 0x148a <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1474:	60 91 9c 03 	lds	r22, 0x039C
    1478:	70 91 9d 03 	lds	r23, 0x039D
    147c:	6e 5f       	subi	r22, 0xFE	; 254
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	94 e0       	ldi	r25, 0x04	; 4
    1484:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1488:	2f c0       	rjmp	.+94     	; 0x14e8 <prvAddCurrentTaskToDelayedList+0xa4>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    148a:	ce 0d       	add	r28, r14
    148c:	df 1d       	adc	r29, r15

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    148e:	e0 91 9c 03 	lds	r30, 0x039C
    1492:	f0 91 9d 03 	lds	r31, 0x039D
    1496:	d3 83       	std	Z+3, r29	; 0x03
    1498:	c2 83       	std	Z+2, r28	; 0x02

			if( xTimeToWake < xConstTickCount )
    149a:	ce 15       	cp	r28, r14
    149c:	df 05       	cpc	r29, r15
    149e:	68 f4       	brcc	.+26     	; 0x14ba <prvAddCurrentTaskToDelayedList+0x76>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    14a0:	80 91 aa 03 	lds	r24, 0x03AA
    14a4:	90 91 ab 03 	lds	r25, 0x03AB
    14a8:	60 91 9c 03 	lds	r22, 0x039C
    14ac:	70 91 9d 03 	lds	r23, 0x039D
    14b0:	6e 5f       	subi	r22, 0xFE	; 254
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <prvAddCurrentTaskToDelayedList+0xa4>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    14ba:	80 91 ac 03 	lds	r24, 0x03AC
    14be:	90 91 ad 03 	lds	r25, 0x03AD
    14c2:	60 91 9c 03 	lds	r22, 0x039C
    14c6:	70 91 9d 03 	lds	r23, 0x039D
    14ca:	6e 5f       	subi	r22, 0xFE	; 254
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    14d2:	80 91 9f 03 	lds	r24, 0x039F
    14d6:	90 91 a0 03 	lds	r25, 0x03A0
    14da:	c8 17       	cp	r28, r24
    14dc:	d9 07       	cpc	r29, r25
    14de:	20 f4       	brcc	.+8      	; 0x14e8 <prvAddCurrentTaskToDelayedList+0xa4>
				{
					xNextTaskUnblockTime = xTimeToWake;
    14e0:	d0 93 a0 03 	sts	0x03A0, r29
    14e4:	c0 93 9f 03 	sts	0x039F, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	08 95       	ret

000014f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    14fa:	8f 89       	ldd	r24, Y+23	; 0x17
    14fc:	98 8d       	ldd	r25, Y+24	; 0x18
    14fe:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			vPortFree( pxTCB );
    1502:	ce 01       	movw	r24, r28
    1504:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    150e:	2f 92       	push	r2
    1510:	3f 92       	push	r3
    1512:	4f 92       	push	r4
    1514:	5f 92       	push	r5
    1516:	6f 92       	push	r6
    1518:	7f 92       	push	r7
    151a:	8f 92       	push	r8
    151c:	9f 92       	push	r9
    151e:	af 92       	push	r10
    1520:	bf 92       	push	r11
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	3c 01       	movw	r6, r24
    1532:	5b 01       	movw	r10, r22
    1534:	ea 01       	movw	r28, r20
    1536:	29 01       	movw	r4, r18
    1538:	d0 2e       	mov	r13, r16
    153a:	47 01       	movw	r8, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    153c:	ca 01       	movw	r24, r20
    153e:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    1542:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	09 f4       	brne	.+2      	; 0x154a <xTaskCreate+0x3c>
    1548:	ed c0       	rjmp	.+474    	; 0x1724 <xTaskCreate+0x216>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    154a:	8a e2       	ldi	r24, 0x2A	; 42
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    1552:	8c 01       	movw	r16, r24

				if( pxNewTCB != NULL )
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	81 f0       	breq	.+32     	; 0x1578 <xTaskCreate+0x6a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1558:	fc 01       	movw	r30, r24
    155a:	f0 8e       	std	Z+24, r15	; 0x18
    155c:	e7 8a       	std	Z+23, r14	; 0x17
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    155e:	21 97       	sbiw	r28, 0x01	; 1
    1560:	17 01       	movw	r2, r14
    1562:	2c 0e       	add	r2, r28
    1564:	3d 1e       	adc	r3, r29
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1566:	f5 01       	movw	r30, r10
    1568:	80 81       	ld	r24, Z
    156a:	f8 01       	movw	r30, r16
    156c:	81 8f       	std	Z+25, r24	; 0x19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    156e:	f5 01       	movw	r30, r10
    1570:	80 81       	ld	r24, Z
    1572:	88 23       	and	r24, r24
    1574:	31 f4       	brne	.+12     	; 0x1582 <xTaskCreate+0x74>
    1576:	13 c0       	rjmp	.+38     	; 0x159e <xTaskCreate+0x90>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1578:	c7 01       	movw	r24, r14
    157a:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	d6 c0       	rjmp	.+428    	; 0x172e <xTaskCreate+0x220>
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    1582:	e8 01       	movw	r28, r16
    1584:	6a 96       	adiw	r28, 0x1a	; 26
    1586:	d5 01       	movw	r26, r10
    1588:	11 96       	adiw	r26, 0x01	; 1
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    158a:	81 e0       	ldi	r24, 0x01	; 1
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    158c:	fd 01       	movw	r30, r26
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    158e:	9d 91       	ld	r25, X+
    1590:	99 93       	st	Y+, r25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1592:	90 81       	ld	r25, Z
    1594:	99 23       	and	r25, r25
    1596:	19 f0       	breq	.+6      	; 0x159e <xTaskCreate+0x90>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	8a 30       	cpi	r24, 0x0A	; 10
    159c:	b9 f7       	brne	.-18     	; 0x158c <xTaskCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    159e:	f8 01       	movw	r30, r16
    15a0:	12 a2       	lds	r17, 0x92
    15a2:	cd 2d       	mov	r28, r13
    15a4:	c5 30       	cpi	r28, 0x05	; 5
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <xTaskCreate+0x9c>
    15a8:	c4 e0       	ldi	r28, 0x04	; 4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    15aa:	f8 01       	movw	r30, r16
    15ac:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    15ae:	c3 a3       	lds	r28, 0x53
		pxNewTCB->uxMutexesHeld = 0;
    15b0:	14 a2       	lds	r17, 0x94
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    15b2:	ee 24       	eor	r14, r14
    15b4:	ff 24       	eor	r15, r15
    15b6:	68 94       	set
    15b8:	e1 f8       	bld	r14, 1
    15ba:	e0 0e       	add	r14, r16
    15bc:	f1 1e       	adc	r15, r17
    15be:	c7 01       	movw	r24, r14
    15c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    15c4:	c8 01       	movw	r24, r16
    15c6:	0c 96       	adiw	r24, 0x0c	; 12
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    15cc:	f8 01       	movw	r30, r16
    15ce:	11 87       	std	Z+9, r17	; 0x09
    15d0:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15d2:	85 e0       	ldi	r24, 0x05	; 5
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	8c 1b       	sub	r24, r28
    15d8:	91 09       	sbc	r25, r1
    15da:	95 87       	std	Z+13, r25	; 0x0d
    15dc:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    15de:	13 8b       	std	Z+19, r17	; 0x13
    15e0:	02 8b       	std	Z+18, r16	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    15e2:	15 a2       	lds	r17, 0x95
    15e4:	16 a2       	lds	r17, 0x96
    15e6:	17 a2       	lds	r17, 0x97
    15e8:	10 a6       	lds	r17, 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    15ea:	11 a6       	lds	r17, 0xb1
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    15ec:	c1 01       	movw	r24, r2
    15ee:	b3 01       	movw	r22, r6
    15f0:	a2 01       	movw	r20, r4
    15f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <pxPortInitialiseStack>
    15f6:	f8 01       	movw	r30, r16
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    15fc:	81 14       	cp	r8, r1
    15fe:	91 04       	cpc	r9, r1
    1600:	19 f0       	breq	.+6      	; 0x1608 <xTaskCreate+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1602:	f4 01       	movw	r30, r8
    1604:	11 83       	std	Z+1, r17	; 0x01
    1606:	00 83       	st	Z, r16

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    160e:	80 91 a8 03 	lds	r24, 0x03A8
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 93 a8 03 	sts	0x03A8, r24
		if( pxCurrentTCB == NULL )
    1618:	80 91 9c 03 	lds	r24, 0x039C
    161c:	90 91 9d 03 	lds	r25, 0x039D
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	09 f0       	breq	.+2      	; 0x1626 <xTaskCreate+0x118>
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <xTaskCreate+0x196>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1626:	10 93 9d 03 	sts	0x039D, r17
    162a:	00 93 9c 03 	sts	0x039C, r16

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    162e:	80 91 a8 03 	lds	r24, 0x03A8
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	09 f0       	breq	.+2      	; 0x1638 <xTaskCreate+0x12a>
    1636:	47 c0       	rjmp	.+142    	; 0x16c6 <xTaskCreate+0x1b8>
    1638:	c0 e0       	ldi	r28, 0x00	; 0
    163a:	d0 e0       	ldi	r29, 0x00	; 0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    163c:	ce 01       	movw	r24, r28
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	8c 0f       	add	r24, r28
    164c:	9d 1f       	adc	r25, r29
    164e:	81 55       	subi	r24, 0x51	; 81
    1650:	9c 4f       	sbci	r25, 0xFC	; 252
    1652:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
    1656:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1658:	c5 30       	cpi	r28, 0x05	; 5
    165a:	d1 05       	cpc	r29, r1
    165c:	79 f7       	brne	.-34     	; 0x163c <xTaskCreate+0x12e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    165e:	cc ed       	ldi	r28, 0xDC	; 220
    1660:	d3 e0       	ldi	r29, 0x03	; 3
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1668:	0f 2e       	mov	r0, r31
    166a:	f5 ee       	ldi	r31, 0xE5	; 229
    166c:	af 2e       	mov	r10, r31
    166e:	f3 e0       	ldi	r31, 0x03	; 3
    1670:	bf 2e       	mov	r11, r31
    1672:	f0 2d       	mov	r31, r0
    1674:	c5 01       	movw	r24, r10
    1676:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    167a:	8e ee       	ldi	r24, 0xEE	; 238
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1682:	87 ef       	ldi	r24, 0xF7	; 247
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	94 e0       	ldi	r25, 0x04	; 4
    168e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1692:	d0 93 ad 03 	sts	0x03AD, r29
    1696:	c0 93 ac 03 	sts	0x03AC, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    169a:	b0 92 ab 03 	sts	0x03AB, r11
    169e:	a0 92 aa 03 	sts	0x03AA, r10
    16a2:	11 c0       	rjmp	.+34     	; 0x16c6 <xTaskCreate+0x1b8>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    16a4:	80 91 a4 03 	lds	r24, 0x03A4
    16a8:	88 23       	and	r24, r24
    16aa:	69 f4       	brne	.+26     	; 0x16c6 <xTaskCreate+0x1b8>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    16ac:	e0 91 9c 03 	lds	r30, 0x039C
    16b0:	f0 91 9d 03 	lds	r31, 0x039D
    16b4:	96 89       	ldd	r25, Z+22	; 0x16
    16b6:	f8 01       	movw	r30, r16
    16b8:	86 89       	ldd	r24, Z+22	; 0x16
    16ba:	89 17       	cp	r24, r25
    16bc:	20 f0       	brcs	.+8      	; 0x16c6 <xTaskCreate+0x1b8>
				{
					pxCurrentTCB = pxNewTCB;
    16be:	10 93 9d 03 	sts	0x039D, r17
    16c2:	00 93 9c 03 	sts	0x039C, r16
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    16c6:	80 91 ae 03 	lds	r24, 0x03AE
    16ca:	8f 5f       	subi	r24, 0xFF	; 255
    16cc:	80 93 ae 03 	sts	0x03AE, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    16d0:	f8 01       	movw	r30, r16
    16d2:	86 89       	ldd	r24, Z+22	; 0x16
    16d4:	90 91 a5 03 	lds	r25, 0x03A5
    16d8:	98 17       	cp	r25, r24
    16da:	10 f4       	brcc	.+4      	; 0x16e0 <xTaskCreate+0x1d2>
    16dc:	80 93 a5 03 	sts	0x03A5, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 01       	movw	r18, r24
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	81 55       	subi	r24, 0x51	; 81
    16f6:	9c 4f       	sbci	r25, 0xFC	; 252
    16f8:	b7 01       	movw	r22, r14
    16fa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    1702:	80 91 a4 03 	lds	r24, 0x03A4
    1706:	88 23       	and	r24, r24
    1708:	79 f0       	breq	.+30     	; 0x1728 <xTaskCreate+0x21a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    170a:	e0 91 9c 03 	lds	r30, 0x039C
    170e:	f0 91 9d 03 	lds	r31, 0x039D
    1712:	96 89       	ldd	r25, Z+22	; 0x16
    1714:	f8 01       	movw	r30, r16
    1716:	86 89       	ldd	r24, Z+22	; 0x16
    1718:	98 17       	cp	r25, r24
    171a:	40 f4       	brcc	.+16     	; 0x172c <xTaskCreate+0x21e>
		{
			taskYIELD_IF_USING_PREEMPTION();
    171c:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	05 c0       	rjmp	.+10     	; 0x172e <xTaskCreate+0x220>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	03 c0       	rjmp	.+6      	; 0x172e <xTaskCreate+0x220>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	01 c0       	rjmp	.+2      	; 0x172e <xTaskCreate+0x220>
    172c:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	7f 90       	pop	r7
    1746:	6f 90       	pop	r6
    1748:	5f 90       	pop	r5
    174a:	4f 90       	pop	r4
    174c:	3f 90       	pop	r3
    174e:	2f 90       	pop	r2
    1750:	08 95       	ret

00001752 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	29 f4       	brne	.+10     	; 0x176e <vTaskDelete+0x1c>
    1764:	c0 91 9c 03 	lds	r28, 0x039C
    1768:	d0 91 9d 03 	lds	r29, 0x039D
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <vTaskDelete+0x1e>
    176e:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1770:	8e 01       	movw	r16, r28
    1772:	0e 5f       	subi	r16, 0xFE	; 254
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    177c:	8c 89       	ldd	r24, Y+20	; 0x14
    177e:	9d 89       	ldd	r25, Y+21	; 0x15
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	21 f0       	breq	.+8      	; 0x178c <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1784:	ce 01       	movw	r24, r28
    1786:	0c 96       	adiw	r24, 0x0c	; 12
    1788:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    178c:	80 91 ae 03 	lds	r24, 0x03AE
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 ae 03 	sts	0x03AE, r24

			if( pxTCB == pxCurrentTCB )
    1796:	80 91 9c 03 	lds	r24, 0x039C
    179a:	90 91 9d 03 	lds	r25, 0x039D
    179e:	c8 17       	cp	r28, r24
    17a0:	d9 07       	cpc	r29, r25
    17a2:	59 f4       	brne	.+22     	; 0x17ba <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    17a4:	87 ef       	ldi	r24, 0xF7	; 247
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	b8 01       	movw	r22, r16
    17aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    17ae:	80 91 a9 03 	lds	r24, 0x03A9
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	80 93 a9 03 	sts	0x03A9, r24
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    17ba:	80 91 a8 03 	lds	r24, 0x03A8
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	80 93 a8 03 	sts	0x03A8, r24
				prvDeleteTCB( pxTCB );
    17c4:	ce 01       	movw	r24, r28
    17c6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    17ca:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    17d2:	80 91 a4 03 	lds	r24, 0x03A4
    17d6:	88 23       	and	r24, r24
    17d8:	49 f0       	breq	.+18     	; 0x17ec <vTaskDelete+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
    17da:	80 91 9c 03 	lds	r24, 0x039C
    17de:	90 91 9d 03 	lds	r25, 0x039D
    17e2:	c8 17       	cp	r28, r24
    17e4:	d9 07       	cpc	r29, r25
    17e6:	11 f4       	brne	.+4      	; 0x17ec <vTaskDelete+0x9a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    17e8:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <uxTaskPriorityGet>:
	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	29 f4       	brne	.+10     	; 0x180a <uxTaskPriorityGet+0x14>
    1800:	e0 91 9c 03 	lds	r30, 0x039C
    1804:	f0 91 9d 03 	lds	r31, 0x039D
    1808:	01 c0       	rjmp	.+2      	; 0x180c <uxTaskPriorityGet+0x16>
    180a:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		taskEXIT_CRITICAL();
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
	}
    1810:	86 89       	ldd	r24, Z+22	; 0x16
    1812:	08 95       	ret

00001814 <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	29 f4       	brne	.+10     	; 0x1822 <uxTaskPriorityGetFromISR+0xe>
    1818:	e0 91 9c 03 	lds	r30, 0x039C
    181c:	f0 91 9d 03 	lds	r31, 0x039D
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <uxTaskPriorityGetFromISR+0x10>
    1822:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    1824:	86 89       	ldd	r24, Z+22	; 0x16
    1826:	08 95       	ret

00001828 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1832:	65 30       	cpi	r22, 0x05	; 5
    1834:	08 f0       	brcs	.+2      	; 0x1838 <vTaskPrioritySet+0x10>
    1836:	64 e0       	ldi	r22, 0x04	; 4
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	29 f4       	brne	.+10     	; 0x184c <vTaskPrioritySet+0x24>
    1842:	c0 91 9c 03 	lds	r28, 0x039C
    1846:	d0 91 9d 03 	lds	r29, 0x039D
    184a:	01 c0       	rjmp	.+2      	; 0x184e <vTaskPrioritySet+0x26>
    184c:	ec 01       	movw	r28, r24

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    184e:	2b a1       	lds	r18, 0x4b
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    1850:	26 17       	cp	r18, r22
    1852:	09 f4       	brne	.+2      	; 0x1856 <vTaskPrioritySet+0x2e>
    1854:	61 c0       	rjmp	.+194    	; 0x1918 <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    1856:	26 17       	cp	r18, r22
    1858:	88 f4       	brcc	.+34     	; 0x187c <vTaskPrioritySet+0x54>
				{
					if( pxTCB != pxCurrentTCB )
    185a:	80 91 9c 03 	lds	r24, 0x039C
    185e:	90 91 9d 03 	lds	r25, 0x039D
    1862:	c8 17       	cp	r28, r24
    1864:	d9 07       	cpc	r29, r25
    1866:	a1 f0       	breq	.+40     	; 0x1890 <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1868:	e0 91 9c 03 	lds	r30, 0x039C
    186c:	f0 91 9d 03 	lds	r31, 0x039D
						{
							xYieldRequired = pdTRUE;
    1870:	11 e0       	ldi	r17, 0x01	; 1
    1872:	86 89       	ldd	r24, Z+22	; 0x16
    1874:	68 17       	cp	r22, r24
    1876:	68 f4       	brcc	.+26     	; 0x1892 <vTaskPrioritySet+0x6a>
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	0b c0       	rjmp	.+22     	; 0x1892 <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    187c:	80 91 9c 03 	lds	r24, 0x039C
    1880:	90 91 9d 03 	lds	r25, 0x039D
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
    1884:	11 e0       	ldi	r17, 0x01	; 1
    1886:	c8 17       	cp	r28, r24
    1888:	d9 07       	cpc	r29, r25
    188a:	19 f0       	breq	.+6      	; 0x1892 <vTaskPrioritySet+0x6a>
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <vTaskPrioritySet+0x6a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1890:	10 e0       	ldi	r17, 0x00	; 0
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    1892:	8e 89       	ldd	r24, Y+22	; 0x16

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1894:	28 17       	cp	r18, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <vTaskPrioritySet+0x72>
					{
						pxTCB->uxPriority = uxNewPriority;
    1898:	6e 8b       	std	Y+22, r22	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    189a:	6b a3       	lds	r22, 0x5b
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    189c:	2c 85       	ldd	r18, Y+12	; 0x0c
    189e:	3d 85       	ldd	r19, Y+13	; 0x0d
    18a0:	33 23       	and	r19, r19
    18a2:	34 f0       	brlt	.+12     	; 0x18b0 <vTaskPrioritySet+0x88>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18a4:	25 e0       	ldi	r18, 0x05	; 5
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	26 1b       	sub	r18, r22
    18aa:	31 09       	sbc	r19, r1
    18ac:	3d 87       	std	Y+13, r19	; 0x0d
    18ae:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	9c 01       	movw	r18, r24
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	22 0f       	add	r18, r18
    18ba:	33 1f       	adc	r19, r19
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	82 0f       	add	r24, r18
    18c2:	93 1f       	adc	r25, r19
    18c4:	81 55       	subi	r24, 0x51	; 81
    18c6:	9c 4f       	sbci	r25, 0xFC	; 252
    18c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    18ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    18cc:	28 17       	cp	r18, r24
    18ce:	39 07       	cpc	r19, r25
    18d0:	f9 f4       	brne	.+62     	; 0x1910 <vTaskPrioritySet+0xe8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    18d2:	ee 24       	eor	r14, r14
    18d4:	ff 24       	eor	r15, r15
    18d6:	68 94       	set
    18d8:	e1 f8       	bld	r14, 1
    18da:	ec 0e       	add	r14, r28
    18dc:	fd 1e       	adc	r15, r29
    18de:	c7 01       	movw	r24, r14
    18e0:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    18e4:	8e 89       	ldd	r24, Y+22	; 0x16
    18e6:	90 91 a5 03 	lds	r25, 0x03A5
    18ea:	98 17       	cp	r25, r24
    18ec:	10 f4       	brcc	.+4      	; 0x18f2 <vTaskPrioritySet+0xca>
    18ee:	80 93 a5 03 	sts	0x03A5, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 01       	movw	r18, r24
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	82 0f       	add	r24, r18
    1904:	93 1f       	adc	r25, r19
    1906:	81 55       	subi	r24, 0x51	; 81
    1908:	9c 4f       	sbci	r25, 0xFC	; 252
    190a:	b7 01       	movw	r22, r14
    190c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    1910:	11 23       	and	r17, r17
    1912:	11 f0       	breq	.+4      	; 0x1918 <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    1914:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
	}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	08 95       	ret

00001928 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	b9 f1       	breq	.+110    	; 0x19a4 <vTaskResume+0x7c>
    1936:	80 91 9c 03 	lds	r24, 0x039C
    193a:	90 91 9d 03 	lds	r25, 0x039D
    193e:	c8 17       	cp	r28, r24
    1940:	d9 07       	cpc	r29, r25
    1942:	81 f1       	breq	.+96     	; 0x19a4 <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    194a:	ce 01       	movw	r24, r28
    194c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <prvTaskIsTaskSuspended>
    1950:	88 23       	and	r24, r24
    1952:	31 f1       	breq	.+76     	; 0x19a0 <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    1954:	8e 01       	movw	r16, r28
    1956:	0e 5f       	subi	r16, 0xFE	; 254
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	c8 01       	movw	r24, r16
    195c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1960:	8e 89       	ldd	r24, Y+22	; 0x16
    1962:	90 91 a5 03 	lds	r25, 0x03A5
    1966:	98 17       	cp	r25, r24
    1968:	10 f4       	brcc	.+4      	; 0x196e <vTaskResume+0x46>
    196a:	80 93 a5 03 	sts	0x03A5, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9c 01       	movw	r18, r24
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	22 0f       	add	r18, r18
    1978:	33 1f       	adc	r19, r19
    197a:	22 0f       	add	r18, r18
    197c:	33 1f       	adc	r19, r19
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
    1982:	81 55       	subi	r24, 0x51	; 81
    1984:	9c 4f       	sbci	r25, 0xFC	; 252
    1986:	b8 01       	movw	r22, r16
    1988:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    198c:	e0 91 9c 03 	lds	r30, 0x039C
    1990:	f0 91 9d 03 	lds	r31, 0x039D
    1994:	9e 89       	ldd	r25, Y+22	; 0x16
    1996:	86 89       	ldd	r24, Z+22	; 0x16
    1998:	98 17       	cp	r25, r24
    199a:	10 f0       	brcs	.+4      	; 0x19a0 <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    199c:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    19ba:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <prvTaskIsTaskSuspended>
    19be:	88 23       	and	r24, r24
    19c0:	b9 f1       	breq	.+110    	; 0x1a30 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19c2:	80 91 9e 03 	lds	r24, 0x039E
    19c6:	88 23       	and	r24, r24
    19c8:	51 f5       	brne	.+84     	; 0x1a1e <xTaskResumeFromISR+0x70>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    19ca:	e0 91 9c 03 	lds	r30, 0x039C
    19ce:	f0 91 9d 03 	lds	r31, 0x039D

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    19d2:	11 e0       	ldi	r17, 0x01	; 1
    19d4:	9e 89       	ldd	r25, Y+22	; 0x16
    19d6:	86 89       	ldd	r24, Z+22	; 0x16
    19d8:	98 17       	cp	r25, r24
    19da:	08 f4       	brcc	.+2      	; 0x19de <xTaskResumeFromISR+0x30>
    19dc:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19de:	ee 24       	eor	r14, r14
    19e0:	ff 24       	eor	r15, r15
    19e2:	68 94       	set
    19e4:	e1 f8       	bld	r14, 1
    19e6:	ec 0e       	add	r14, r28
    19e8:	fd 1e       	adc	r15, r29
    19ea:	c7 01       	movw	r24, r14
    19ec:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    19f0:	8e 89       	ldd	r24, Y+22	; 0x16
    19f2:	90 91 a5 03 	lds	r25, 0x03A5
    19f6:	98 17       	cp	r25, r24
    19f8:	10 f4       	brcc	.+4      	; 0x19fe <xTaskResumeFromISR+0x50>
    19fa:	80 93 a5 03 	sts	0x03A5, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 01       	movw	r18, r24
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	81 55       	subi	r24, 0x51	; 81
    1a14:	9c 4f       	sbci	r25, 0xFC	; 252
    1a16:	b7 01       	movw	r22, r14
    1a18:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1a1c:	0a c0       	rjmp	.+20     	; 0x1a32 <xTaskResumeFromISR+0x84>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1a1e:	be 01       	movw	r22, r28
    1a20:	64 5f       	subi	r22, 0xF4	; 244
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8e ee       	ldi	r24, 0xEE	; 238
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <xTaskResumeFromISR+0x84>
    1a30:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1a32:	81 2f       	mov	r24, r17
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	08 95       	ret

00001a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1a46:	85 e9       	ldi	r24, 0x95	; 149
    1a48:	9e e0       	ldi	r25, 0x0E	; 14
    1a4a:	6d e6       	ldi	r22, 0x6D	; 109
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	48 ec       	ldi	r20, 0xC8	; 200
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	0f 2e       	mov	r0, r31
    1a5a:	f9 e0       	ldi	r31, 0x09	; 9
    1a5c:	ef 2e       	mov	r14, r31
    1a5e:	f4 e0       	ldi	r31, 0x04	; 4
    1a60:	ff 2e       	mov	r15, r31
    1a62:	f0 2d       	mov	r31, r0
    1a64:	0e 94 87 0a 	call	0x150e	; 0x150e <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	81 f4       	brne	.+32     	; 0x1a8c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1a6c:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	90 93 a0 03 	sts	0x03A0, r25
    1a76:	80 93 9f 03 	sts	0x039F, r24
		xSchedulerRunning = pdTRUE;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 a4 03 	sts	0x03A4, r24
		xTickCount = ( TickType_t ) 0U;
    1a80:	10 92 a7 03 	sts	0x03A7, r1
    1a84:	10 92 a6 03 	sts	0x03A6, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1a88:	0e 94 86 04 	call	0x90c	; 0x90c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1a8c:	0f 91       	pop	r16
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	08 95       	ret

00001a94 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1a94:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1a96:	10 92 a4 03 	sts	0x03A4, r1
	vPortEndScheduler();
    1a9a:	0e 94 bb 04 	call	0x976	; 0x976 <vPortEndScheduler>
}
    1a9e:	08 95       	ret

00001aa0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1aa0:	80 91 9e 03 	lds	r24, 0x039E
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	80 93 9e 03 	sts	0x039E, r24
}
    1aaa:	08 95       	ret

00001aac <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1ab2:	80 91 a6 03 	lds	r24, 0x03A6
    1ab6:	90 91 a7 03 	lds	r25, 0x03A7
	}
	portTICK_TYPE_EXIT_CRITICAL();
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1abe:	08 95       	ret

00001ac0 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    1ac0:	80 91 a6 03 	lds	r24, 0x03A6
    1ac4:	90 91 a7 03 	lds	r25, 0x03A7
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1ac8:	08 95       	ret

00001aca <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1aca:	80 91 a8 03 	lds	r24, 0x03A8
}
    1ace:	08 95       	ret

00001ad0 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	21 f4       	brne	.+8      	; 0x1adc <pcTaskGetName+0xc>
    1ad4:	80 91 9c 03 	lds	r24, 0x039C
    1ad8:	90 91 9d 03 	lds	r25, 0x039D
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    1adc:	49 96       	adiw	r24, 0x19	; 25
}
    1ade:	08 95       	ret

00001ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1af0:	80 91 9e 03 	lds	r24, 0x039E
    1af4:	88 23       	and	r24, r24
    1af6:	09 f0       	breq	.+2      	; 0x1afa <xTaskIncrementTick+0x1a>
    1af8:	82 c0       	rjmp	.+260    	; 0x1bfe <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1afa:	c0 90 a6 03 	lds	r12, 0x03A6
    1afe:	d0 90 a7 03 	lds	r13, 0x03A7
    1b02:	08 94       	sec
    1b04:	c1 1c       	adc	r12, r1
    1b06:	d1 1c       	adc	r13, r1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1b08:	d0 92 a7 03 	sts	0x03A7, r13
    1b0c:	c0 92 a6 03 	sts	0x03A6, r12

		if( xConstTickCount == ( TickType_t ) 0U )
    1b10:	c1 14       	cp	r12, r1
    1b12:	d1 04       	cpc	r13, r1
    1b14:	b9 f4       	brne	.+46     	; 0x1b44 <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
    1b16:	80 91 ac 03 	lds	r24, 0x03AC
    1b1a:	90 91 ad 03 	lds	r25, 0x03AD
    1b1e:	20 91 aa 03 	lds	r18, 0x03AA
    1b22:	30 91 ab 03 	lds	r19, 0x03AB
    1b26:	30 93 ad 03 	sts	0x03AD, r19
    1b2a:	20 93 ac 03 	sts	0x03AC, r18
    1b2e:	90 93 ab 03 	sts	0x03AB, r25
    1b32:	80 93 aa 03 	sts	0x03AA, r24
    1b36:	80 91 a1 03 	lds	r24, 0x03A1
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
    1b3c:	80 93 a1 03 	sts	0x03A1, r24
    1b40:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b44:	80 91 9f 03 	lds	r24, 0x039F
    1b48:	90 91 a0 03 	lds	r25, 0x03A0
    1b4c:	c8 16       	cp	r12, r24
    1b4e:	d9 06       	cpc	r13, r25
    1b50:	20 f4       	brcc	.+8      	; 0x1b5a <xTaskIncrementTick+0x7a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1b52:	ff 24       	eor	r15, r15
    1b54:	5a c0       	rjmp	.+180    	; 0x1c0a <xTaskIncrementTick+0x12a>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b56:	fe 2c       	mov	r15, r14
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <xTaskIncrementTick+0x80>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b5a:	ff 24       	eor	r15, r15
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b5c:	ee 24       	eor	r14, r14
    1b5e:	e3 94       	inc	r14
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b60:	e0 91 ac 03 	lds	r30, 0x03AC
    1b64:	f0 91 ad 03 	lds	r31, 0x03AD
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 23       	and	r24, r24
    1b6c:	39 f4       	brne	.+14     	; 0x1b7c <xTaskIncrementTick+0x9c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9f ef       	ldi	r25, 0xFF	; 255
    1b72:	90 93 a0 03 	sts	0x03A0, r25
    1b76:	80 93 9f 03 	sts	0x039F, r24
					break;
    1b7a:	47 c0       	rjmp	.+142    	; 0x1c0a <xTaskIncrementTick+0x12a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1b7c:	e0 91 ac 03 	lds	r30, 0x03AC
    1b80:	f0 91 ad 03 	lds	r31, 0x03AD
    1b84:	05 80       	ldd	r0, Z+5	; 0x05
    1b86:	f6 81       	ldd	r31, Z+6	; 0x06
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b8c:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    1b92:	c8 16       	cp	r12, r24
    1b94:	d9 06       	cpc	r13, r25
    1b96:	28 f4       	brcc	.+10     	; 0x1ba2 <xTaskIncrementTick+0xc2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1b98:	90 93 a0 03 	sts	0x03A0, r25
    1b9c:	80 93 9f 03 	sts	0x039F, r24
						break;
    1ba0:	34 c0       	rjmp	.+104    	; 0x1c0a <xTaskIncrementTick+0x12a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1ba2:	8e 01       	movw	r16, r28
    1ba4:	0e 5f       	subi	r16, 0xFE	; 254
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	c8 01       	movw	r24, r16
    1baa:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1bae:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb0:	9d 89       	ldd	r25, Y+21	; 0x15
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <xTaskIncrementTick+0xde>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	0c 96       	adiw	r24, 0x0c	; 12
    1bba:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1bbe:	8e 89       	ldd	r24, Y+22	; 0x16
    1bc0:	90 91 a5 03 	lds	r25, 0x03A5
    1bc4:	98 17       	cp	r25, r24
    1bc6:	10 f4       	brcc	.+4      	; 0x1bcc <xTaskIncrementTick+0xec>
    1bc8:	80 93 a5 03 	sts	0x03A5, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9c 01       	movw	r18, r24
    1bd0:	22 0f       	add	r18, r18
    1bd2:	33 1f       	adc	r19, r19
    1bd4:	22 0f       	add	r18, r18
    1bd6:	33 1f       	adc	r19, r19
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	81 55       	subi	r24, 0x51	; 81
    1be2:	9c 4f       	sbci	r25, 0xFC	; 252
    1be4:	b8 01       	movw	r22, r16
    1be6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1bea:	e0 91 9c 03 	lds	r30, 0x039C
    1bee:	f0 91 9d 03 	lds	r31, 0x039D
    1bf2:	9e 89       	ldd	r25, Y+22	; 0x16
    1bf4:	86 89       	ldd	r24, Z+22	; 0x16
    1bf6:	98 17       	cp	r25, r24
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <xTaskIncrementTick+0x11c>
    1bfa:	ad cf       	rjmp	.-166    	; 0x1b56 <xTaskIncrementTick+0x76>
    1bfc:	b1 cf       	rjmp	.-158    	; 0x1b60 <xTaskIncrementTick+0x80>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1bfe:	80 91 a3 03 	lds	r24, 0x03A3
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 a3 03 	sts	0x03A3, r24

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1c08:	ff 24       	eor	r15, r15
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1c0a:	80 91 a2 03 	lds	r24, 0x03A2
    1c0e:	88 23       	and	r24, r24
    1c10:	11 f0       	breq	.+4      	; 0x1c16 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
    1c12:	ff 24       	eor	r15, r15
    1c14:	f3 94       	inc	r15
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1c16:	8f 2d       	mov	r24, r15
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	08 95       	ret

00001c2a <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1c2a:	df 92       	push	r13
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1c3e:	80 91 9e 03 	lds	r24, 0x039E
    1c42:	81 50       	subi	r24, 0x01	; 1
    1c44:	80 93 9e 03 	sts	0x039E, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c48:	80 91 9e 03 	lds	r24, 0x039E
    1c4c:	88 23       	and	r24, r24
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <xTaskResumeAll+0x28>
    1c50:	5f c0       	rjmp	.+190    	; 0x1d10 <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1c52:	80 91 a8 03 	lds	r24, 0x03A8
    1c56:	88 23       	and	r24, r24
    1c58:	91 f5       	brne	.+100    	; 0x1cbe <xTaskResumeAll+0x94>
    1c5a:	5d c0       	rjmp	.+186    	; 0x1d16 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1c5c:	e0 91 f3 03 	lds	r30, 0x03F3
    1c60:	f0 91 f4 03 	lds	r31, 0x03F4
    1c64:	c6 81       	ldd	r28, Z+6	; 0x06
    1c66:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c68:	ce 01       	movw	r24, r28
    1c6a:	0c 96       	adiw	r24, 0x0c	; 12
    1c6c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c70:	8e 01       	movw	r16, r28
    1c72:	0e 5f       	subi	r16, 0xFE	; 254
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	c8 01       	movw	r24, r16
    1c78:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c7c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c7e:	90 91 a5 03 	lds	r25, 0x03A5
    1c82:	98 17       	cp	r25, r24
    1c84:	10 f4       	brcc	.+4      	; 0x1c8a <xTaskResumeAll+0x60>
    1c86:	80 93 a5 03 	sts	0x03A5, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9c 01       	movw	r18, r24
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	81 55       	subi	r24, 0x51	; 81
    1ca0:	9c 4f       	sbci	r25, 0xFC	; 252
    1ca2:	b8 01       	movw	r22, r16
    1ca4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1ca8:	e0 91 9c 03 	lds	r30, 0x039C
    1cac:	f0 91 9d 03 	lds	r31, 0x039D
    1cb0:	9e 89       	ldd	r25, Y+22	; 0x16
    1cb2:	86 89       	ldd	r24, Z+22	; 0x16
    1cb4:	98 17       	cp	r25, r24
    1cb6:	68 f0       	brcs	.+26     	; 0x1cd2 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
    1cb8:	d0 92 a2 03 	sts	0x03A2, r13
    1cbc:	0a c0       	rjmp	.+20     	; 0x1cd2 <xTaskResumeAll+0xa8>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1cbe:	c0 e0       	ldi	r28, 0x00	; 0
    1cc0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cc2:	0f 2e       	mov	r0, r31
    1cc4:	fe ee       	ldi	r31, 0xEE	; 238
    1cc6:	ef 2e       	mov	r14, r31
    1cc8:	f3 e0       	ldi	r31, 0x03	; 3
    1cca:	ff 2e       	mov	r15, r31
    1ccc:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    1cce:	dd 24       	eor	r13, r13
    1cd0:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f6       	brne	.-126    	; 0x1c5c <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1cda:	20 97       	sbiw	r28, 0x00	; 0
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1cde:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1ce2:	c0 91 a3 03 	lds	r28, 0x03A3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1ce6:	cc 23       	and	r28, r28
    1ce8:	59 f0       	breq	.+22     	; 0x1d00 <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
    1cea:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1cec:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskIncrementTick>
    1cf0:	88 23       	and	r24, r24
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
    1cf4:	00 93 a2 03 	sts	0x03A2, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1cf8:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1cfa:	c1 f7       	brne	.-16     	; 0x1cec <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
    1cfc:	10 92 a3 03 	sts	0x03A3, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1d00:	80 91 a2 03 	lds	r24, 0x03A2
    1d04:	88 23       	and	r24, r24
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <xTaskResumeAll+0xea>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1d08:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <xTaskResumeAll+0xec>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	01 c0       	rjmp	.+2      	; 0x1d16 <xTaskResumeAll+0xec>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	df 90       	pop	r13
    1d28:	08 95       	ret

00001d2a <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d2a:	07 ef       	ldi	r16, 0xF7	; 247
    1d2c:	13 e0       	ldi	r17, 0x03	; 3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d2e:	0f 2e       	mov	r0, r31
    1d30:	ff ea       	ldi	r31, 0xAF	; 175
    1d32:	ef 2e       	mov	r14, r31
    1d34:	f3 e0       	ldi	r31, 0x03	; 3
    1d36:	ff 2e       	mov	r15, r31
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	24 c0       	rjmp	.+72     	; 0x1d84 <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1d3c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d40:	f8 01       	movw	r30, r16
    1d42:	c0 81       	ld	r28, Z
			}
			( void ) xTaskResumeAll();
    1d44:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1d48:	cc 23       	and	r28, r28
    1d4a:	e1 f0       	breq	.+56     	; 0x1d84 <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1d52:	e0 91 fc 03 	lds	r30, 0x03FC
    1d56:	f0 91 fd 03 	lds	r31, 0x03FD
    1d5a:	c6 81       	ldd	r28, Z+6	; 0x06
    1d5c:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1d5e:	ce 01       	movw	r24, r28
    1d60:	02 96       	adiw	r24, 0x02	; 2
    1d62:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					--uxCurrentNumberOfTasks;
    1d66:	80 91 a8 03 	lds	r24, 0x03A8
    1d6a:	81 50       	subi	r24, 0x01	; 1
    1d6c:	80 93 a8 03 	sts	0x03A8, r24
					--uxDeletedTasksWaitingCleanUp;
    1d70:	80 91 a9 03 	lds	r24, 0x03A9
    1d74:	81 50       	subi	r24, 0x01	; 1
    1d76:	80 93 a9 03 	sts	0x03A9, r24
				}
				taskEXIT_CRITICAL();
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    1d7e:	ce 01       	movw	r24, r28
    1d80:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1d84:	80 91 a9 03 	lds	r24, 0x03A9
    1d88:	88 23       	and	r24, r24
    1d8a:	c1 f6       	brne	.-80     	; 0x1d3c <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d8c:	f7 01       	movw	r30, r14
    1d8e:	80 81       	ld	r24, Z
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	c0 f3       	brcs	.-16     	; 0x1d84 <prvIdleTask+0x5a>
			{
				taskYIELD();
    1d94:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    1d98:	f5 cf       	rjmp	.-22     	; 0x1d84 <prvIdleTask+0x5a>

00001d9a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	51 f0       	breq	.+20     	; 0x1db8 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1da4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1da8:	ce 01       	movw	r24, r28
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1db0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1db4:	88 23       	and	r24, r24
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
    1db8:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	8c 01       	movw	r16, r24
    1dcc:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    1dce:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1dd2:	80 91 a6 03 	lds	r24, 0x03A6
    1dd6:	90 91 a7 03 	lds	r25, 0x03A7

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1dda:	f8 01       	movw	r30, r16
    1ddc:	20 81       	ld	r18, Z
    1dde:	31 81       	ldd	r19, Z+1	; 0x01
    1de0:	c2 0f       	add	r28, r18
    1de2:	d3 1f       	adc	r29, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1de4:	82 17       	cp	r24, r18
    1de6:	93 07       	cpc	r25, r19
    1de8:	48 f4       	brcc	.+18     	; 0x1dfc <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1dea:	c2 17       	cp	r28, r18
    1dec:	d3 07       	cpc	r29, r19
    1dee:	f8 f4       	brcc	.+62     	; 0x1e2e <vTaskDelayUntil+0x6c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1df0:	d1 83       	std	Z+1, r29	; 0x01
    1df2:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    1df4:	8c 17       	cp	r24, r28
    1df6:	9d 07       	cpc	r25, r29
    1df8:	78 f4       	brcc	.+30     	; 0x1e18 <vTaskDelayUntil+0x56>
    1dfa:	07 c0       	rjmp	.+14     	; 0x1e0a <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1dfc:	c2 17       	cp	r28, r18
    1dfe:	d3 07       	cpc	r29, r19
    1e00:	90 f0       	brcs	.+36     	; 0x1e26 <vTaskDelayUntil+0x64>
    1e02:	8c 17       	cp	r24, r28
    1e04:	9d 07       	cpc	r25, r29
    1e06:	78 f0       	brcs	.+30     	; 0x1e26 <vTaskDelayUntil+0x64>
    1e08:	12 c0       	rjmp	.+36     	; 0x1e2e <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	28 1b       	sub	r18, r24
    1e0e:	39 0b       	sbc	r19, r25
    1e10:	c9 01       	movw	r24, r18
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1e18:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e1c:	88 23       	and	r24, r24
    1e1e:	59 f4       	brne	.+22     	; 0x1e36 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    1e20:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1e26:	f8 01       	movw	r30, r16
    1e28:	d1 83       	std	Z+1, r29	; 0x01
    1e2a:	c0 83       	st	Z, r28
    1e2c:	ee cf       	rjmp	.-36     	; 0x1e0a <vTaskDelayUntil+0x48>
    1e2e:	f8 01       	movw	r30, r16
    1e30:	d1 83       	std	Z+1, r29	; 0x01
    1e32:	c0 83       	st	Z, r28
    1e34:	f1 cf       	rjmp	.-30     	; 0x1e18 <vTaskDelayUntil+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1e40:	80 91 9e 03 	lds	r24, 0x039E
    1e44:	88 23       	and	r24, r24
    1e46:	21 f0       	breq	.+8      	; 0x1e50 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	80 93 a2 03 	sts	0x03A2, r24
    1e4e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1e50:	10 92 a2 03 	sts	0x03A2, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1e54:	20 91 a5 03 	lds	r18, 0x03A5
    1e58:	82 2f       	mov	r24, r18
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e8 0f       	add	r30, r24
    1e6c:	f9 1f       	adc	r31, r25
    1e6e:	e1 55       	subi	r30, 0x51	; 81
    1e70:	fc 4f       	sbci	r31, 0xFC	; 252
    1e72:	30 81       	ld	r19, Z
    1e74:	33 23       	and	r19, r19
    1e76:	89 f4       	brne	.+34     	; 0x1e9a <vTaskSwitchContext+0x5a>
    1e78:	21 50       	subi	r18, 0x01	; 1
    1e7a:	82 2f       	mov	r24, r18
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	e8 0f       	add	r30, r24
    1e8e:	f9 1f       	adc	r31, r25
    1e90:	e1 55       	subi	r30, 0x51	; 81
    1e92:	fc 4f       	sbci	r31, 0xFC	; 252
    1e94:	30 81       	ld	r19, Z
    1e96:	33 23       	and	r19, r19
    1e98:	79 f3       	breq	.-34     	; 0x1e78 <vTaskSwitchContext+0x38>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	aa 0f       	add	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	aa 0f       	add	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	aa 0f       	add	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	8a 0f       	add	r24, r26
    1eaa:	9b 1f       	adc	r25, r27
    1eac:	dc 01       	movw	r26, r24
    1eae:	a1 55       	subi	r26, 0x51	; 81
    1eb0:	bc 4f       	sbci	r27, 0xFC	; 252
    1eb2:	11 96       	adiw	r26, 0x01	; 1
    1eb4:	ed 91       	ld	r30, X+
    1eb6:	fc 91       	ld	r31, X
    1eb8:	12 97       	sbiw	r26, 0x02	; 2
    1eba:	02 80       	ldd	r0, Z+2	; 0x02
    1ebc:	f3 81       	ldd	r31, Z+3	; 0x03
    1ebe:	e0 2d       	mov	r30, r0
    1ec0:	12 96       	adiw	r26, 0x02	; 2
    1ec2:	fc 93       	st	X, r31
    1ec4:	ee 93       	st	-X, r30
    1ec6:	11 97       	sbiw	r26, 0x01	; 1
    1ec8:	cd 01       	movw	r24, r26
    1eca:	03 96       	adiw	r24, 0x03	; 3
    1ecc:	e8 17       	cp	r30, r24
    1ece:	f9 07       	cpc	r31, r25
    1ed0:	31 f4       	brne	.+12     	; 0x1ede <vTaskSwitchContext+0x9e>
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	12 96       	adiw	r26, 0x02	; 2
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
    1edc:	11 97       	sbiw	r26, 0x01	; 1
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	ed 91       	ld	r30, X+
    1ee2:	fc 91       	ld	r31, X
    1ee4:	12 97       	sbiw	r26, 0x02	; 2
    1ee6:	86 81       	ldd	r24, Z+6	; 0x06
    1ee8:	97 81       	ldd	r25, Z+7	; 0x07
    1eea:	90 93 9d 03 	sts	0x039D, r25
    1eee:	80 93 9c 03 	sts	0x039C, r24
    1ef2:	20 93 a5 03 	sts	0x03A5, r18
    1ef6:	08 95       	ret

00001ef8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	29 f4       	brne	.+10     	; 0x1f14 <vTaskSuspend+0x1c>
    1f0a:	00 91 9c 03 	lds	r16, 0x039C
    1f0e:	10 91 9d 03 	lds	r17, 0x039D
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <vTaskSuspend+0x1e>
    1f14:	8c 01       	movw	r16, r24

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f16:	e8 01       	movw	r28, r16
    1f18:	22 96       	adiw	r28, 0x02	; 2
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1f20:	f8 01       	movw	r30, r16
    1f22:	84 89       	ldd	r24, Z+20	; 0x14
    1f24:	95 89       	ldd	r25, Z+21	; 0x15
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <vTaskSuspend+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	0c 96       	adiw	r24, 0x0c	; 12
    1f2e:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	be 01       	movw	r22, r28
    1f38:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    1f40:	80 91 a4 03 	lds	r24, 0x03A4
    1f44:	88 23       	and	r24, r24
    1f46:	39 f0       	breq	.+14     	; 0x1f56 <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    1f4e:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    1f56:	80 91 9c 03 	lds	r24, 0x039C
    1f5a:	90 91 9d 03 	lds	r25, 0x039D
    1f5e:	08 17       	cp	r16, r24
    1f60:	19 07       	cpc	r17, r25
    1f62:	a1 f4       	brne	.+40     	; 0x1f8c <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    1f64:	80 91 a4 03 	lds	r24, 0x03A4
    1f68:	88 23       	and	r24, r24
    1f6a:	19 f0       	breq	.+6      	; 0x1f72 <vTaskSuspend+0x7a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1f6c:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1f72:	80 91 a8 03 	lds	r24, 0x03A8
    1f76:	90 91 00 04 	lds	r25, 0x0400
    1f7a:	98 17       	cp	r25, r24
    1f7c:	29 f4       	brne	.+10     	; 0x1f88 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1f7e:	10 92 9d 03 	sts	0x039D, r1
    1f82:	10 92 9c 03 	sts	0x039C, r1
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    1f88:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1f9c:	60 91 9c 03 	lds	r22, 0x039C
    1fa0:	70 91 9d 03 	lds	r23, 0x039D
    1fa4:	64 5f       	subi	r22, 0xF4	; 244
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fac:	ce 01       	movw	r24, r28
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>
}
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1fc0:	e0 91 9c 03 	lds	r30, 0x039C
    1fc4:	f0 91 9d 03 	lds	r31, 0x039D
    1fc8:	70 68       	ori	r23, 0x80	; 128
    1fca:	75 87       	std	Z+13, r23	; 0x0d
    1fcc:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fce:	60 91 9c 03 	lds	r22, 0x039C
    1fd2:	70 91 9d 03 	lds	r23, 0x039D
    1fd6:	64 5f       	subi	r22, 0xF4	; 244
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fde:	ce 01       	movw	r24, r28
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>
}
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	15 96       	adiw	r26, 0x05	; 5
    1ff8:	ed 91       	ld	r30, X+
    1ffa:	fc 91       	ld	r31, X
    1ffc:	16 97       	sbiw	r26, 0x06	; 6
    1ffe:	06 81       	ldd	r16, Z+6	; 0x06
    2000:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2002:	e8 01       	movw	r28, r16
    2004:	2c 96       	adiw	r28, 0x0c	; 12
    2006:	ce 01       	movw	r24, r28
    2008:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    200c:	80 91 9e 03 	lds	r24, 0x039E
    2010:	88 23       	and	r24, r24
    2012:	e9 f4       	brne	.+58     	; 0x204e <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2014:	e8 01       	movw	r28, r16
    2016:	22 96       	adiw	r28, 0x02	; 2
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    201e:	f8 01       	movw	r30, r16
    2020:	86 89       	ldd	r24, Z+22	; 0x16
    2022:	90 91 a5 03 	lds	r25, 0x03A5
    2026:	98 17       	cp	r25, r24
    2028:	10 f4       	brcc	.+4      	; 0x202e <xTaskRemoveFromEventList+0x42>
    202a:	80 93 a5 03 	sts	0x03A5, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9c 01       	movw	r18, r24
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	22 0f       	add	r18, r18
    2038:	33 1f       	adc	r19, r19
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	82 0f       	add	r24, r18
    2040:	93 1f       	adc	r25, r19
    2042:	81 55       	subi	r24, 0x51	; 81
    2044:	9c 4f       	sbci	r25, 0xFC	; 252
    2046:	be 01       	movw	r22, r28
    2048:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    204e:	8e ee       	ldi	r24, 0xEE	; 238
    2050:	93 e0       	ldi	r25, 0x03	; 3
    2052:	be 01       	movw	r22, r28
    2054:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2058:	e0 91 9c 03 	lds	r30, 0x039C
    205c:	f0 91 9d 03 	lds	r31, 0x039D
    2060:	d8 01       	movw	r26, r16
    2062:	56 96       	adiw	r26, 0x16	; 22
    2064:	9c 91       	ld	r25, X
    2066:	56 97       	sbiw	r26, 0x16	; 22
    2068:	86 89       	ldd	r24, Z+22	; 0x16
    206a:	89 17       	cp	r24, r25
    206c:	20 f4       	brcc	.+8      	; 0x2076 <xTaskRemoveFromEventList+0x8a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	80 93 a2 03 	sts	0x03A2, r24
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		xReturn = pdFALSE;
    2076:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	08 95       	ret

00002082 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    208a:	70 68       	ori	r23, 0x80	; 128
    208c:	fc 01       	movw	r30, r24
    208e:	71 83       	std	Z+1, r23	; 0x01
    2090:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    2092:	c6 81       	ldd	r28, Z+6	; 0x06
    2094:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    2096:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    209a:	8e 01       	movw	r16, r28
    209c:	0e 5f       	subi	r16, 0xFE	; 254
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	c8 01       	movw	r24, r16
    20a2:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    20a6:	8e 89       	ldd	r24, Y+22	; 0x16
    20a8:	90 91 a5 03 	lds	r25, 0x03A5
    20ac:	98 17       	cp	r25, r24
    20ae:	10 f4       	brcc	.+4      	; 0x20b4 <xTaskRemoveFromUnorderedEventList+0x32>
    20b0:	80 93 a5 03 	sts	0x03A5, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 01       	movw	r18, r24
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	81 55       	subi	r24, 0x51	; 81
    20ca:	9c 4f       	sbci	r25, 0xFC	; 252
    20cc:	b8 01       	movw	r22, r16
    20ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    20d2:	e0 91 9c 03 	lds	r30, 0x039C
    20d6:	f0 91 9d 03 	lds	r31, 0x039D
    20da:	9e 89       	ldd	r25, Y+22	; 0x16
    20dc:	86 89       	ldd	r24, Z+22	; 0x16
    20de:	89 17       	cp	r24, r25
    20e0:	20 f4       	brcc	.+8      	; 0x20ea <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 a2 03 	sts	0x03A2, r24
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	08 95       	ret

000020f6 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    20f6:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    20f8:	80 91 a1 03 	lds	r24, 0x03A1
    20fc:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    20fe:	80 91 a6 03 	lds	r24, 0x03A6
    2102:	90 91 a7 03 	lds	r25, 0x03A7
    2106:	92 83       	std	Z+2, r25	; 0x02
    2108:	81 83       	std	Z+1, r24	; 0x01
}
    210a:	08 95       	ret

0000210c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    210c:	fc 01       	movw	r30, r24
    210e:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2116:	60 91 a6 03 	lds	r22, 0x03A6
    211a:	70 91 a7 03 	lds	r23, 0x03A7
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    211e:	4d 91       	ld	r20, X+
    2120:	5c 91       	ld	r21, X
    2122:	11 97       	sbiw	r26, 0x01	; 1
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	4f 3f       	cpi	r20, 0xFF	; 255
    2128:	58 07       	cpc	r21, r24
    212a:	e9 f0       	breq	.+58     	; 0x2166 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    212c:	80 91 a1 03 	lds	r24, 0x03A1
    2130:	90 81       	ld	r25, Z
    2132:	98 17       	cp	r25, r24
    2134:	29 f0       	breq	.+10     	; 0x2140 <xTaskCheckForTimeOut+0x34>
    2136:	81 81       	ldd	r24, Z+1	; 0x01
    2138:	92 81       	ldd	r25, Z+2	; 0x02
    213a:	68 17       	cp	r22, r24
    213c:	79 07       	cpc	r23, r25
    213e:	a8 f4       	brcc	.+42     	; 0x216a <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2140:	81 81       	ldd	r24, Z+1	; 0x01
    2142:	92 81       	ldd	r25, Z+2	; 0x02
    2144:	9b 01       	movw	r18, r22
    2146:	28 1b       	sub	r18, r24
    2148:	39 0b       	sbc	r19, r25
    214a:	24 17       	cp	r18, r20
    214c:	35 07       	cpc	r19, r21
    214e:	78 f4       	brcc	.+30     	; 0x216e <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    2150:	86 1b       	sub	r24, r22
    2152:	97 0b       	sbc	r25, r23
    2154:	84 0f       	add	r24, r20
    2156:	95 1f       	adc	r25, r21
    2158:	8d 93       	st	X+, r24
    215a:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    215c:	cf 01       	movw	r24, r30
    215e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	05 c0       	rjmp	.+10     	; 0x2170 <xTaskCheckForTimeOut+0x64>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    216e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2174:	08 95       	ret

00002176 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 a2 03 	sts	0x03A2, r24
}
    217c:	08 95       	ret

0000217e <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    217e:	80 91 9c 03 	lds	r24, 0x039C
    2182:	90 91 9d 03 	lds	r25, 0x039D

		return xReturn;
	}
    2186:	08 95       	ret

00002188 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	09 f4       	brne	.+2      	; 0x2198 <vTaskPriorityInherit+0x10>
    2196:	51 c0       	rjmp	.+162    	; 0x223a <vTaskPriorityInherit+0xb2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2198:	8e 89       	ldd	r24, Y+22	; 0x16
    219a:	e0 91 9c 03 	lds	r30, 0x039C
    219e:	f0 91 9d 03 	lds	r31, 0x039D
    21a2:	96 89       	ldd	r25, Z+22	; 0x16
    21a4:	89 17       	cp	r24, r25
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <vTaskPriorityInherit+0x22>
    21a8:	48 c0       	rjmp	.+144    	; 0x223a <vTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    21aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    21ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    21ae:	33 23       	and	r19, r19
    21b0:	5c f0       	brlt	.+22     	; 0x21c8 <vTaskPriorityInherit+0x40>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21b2:	e0 91 9c 03 	lds	r30, 0x039C
    21b6:	f0 91 9d 03 	lds	r31, 0x039D
    21ba:	96 89       	ldd	r25, Z+22	; 0x16
    21bc:	25 e0       	ldi	r18, 0x05	; 5
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	29 1b       	sub	r18, r25
    21c2:	31 09       	sbc	r19, r1
    21c4:	3d 87       	std	Y+13, r19	; 0x0d
    21c6:	2c 87       	std	Y+12, r18	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9c 01       	movw	r18, r24
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	81 55       	subi	r24, 0x51	; 81
    21de:	9c 4f       	sbci	r25, 0xFC	; 252
    21e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    21e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    21e4:	28 17       	cp	r18, r24
    21e6:	39 07       	cpc	r19, r25
    21e8:	11 f5       	brne	.+68     	; 0x222e <vTaskPriorityInherit+0xa6>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    21ea:	8e 01       	movw	r16, r28
    21ec:	0e 5f       	subi	r16, 0xFE	; 254
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    21f6:	e0 91 9c 03 	lds	r30, 0x039C
    21fa:	f0 91 9d 03 	lds	r31, 0x039D
    21fe:	86 89       	ldd	r24, Z+22	; 0x16
    2200:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    2202:	90 91 a5 03 	lds	r25, 0x03A5
    2206:	98 17       	cp	r25, r24
    2208:	10 f4       	brcc	.+4      	; 0x220e <vTaskPriorityInherit+0x86>
    220a:	80 93 a5 03 	sts	0x03A5, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c 01       	movw	r18, r24
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	81 55       	subi	r24, 0x51	; 81
    2224:	9c 4f       	sbci	r25, 0xFC	; 252
    2226:	b8 01       	movw	r22, r16
    2228:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    222c:	06 c0       	rjmp	.+12     	; 0x223a <vTaskPriorityInherit+0xb2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    222e:	e0 91 9c 03 	lds	r30, 0x039C
    2232:	f0 91 9d 03 	lds	r31, 0x039D
    2236:	86 89       	ldd	r24, Z+22	; 0x16
    2238:	8e 8b       	std	Y+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	81 f1       	breq	.+96     	; 0x22b2 <xTaskPriorityDisinherit+0x6e>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    2252:	8c a1       	lds	r24, 0x4c
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	8c a3       	lds	r24, 0x5c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2258:	2e 89       	ldd	r18, Y+22	; 0x16
    225a:	9b a1       	lds	r25, 0x4b
    225c:	29 17       	cp	r18, r25
    225e:	59 f1       	breq	.+86     	; 0x22b6 <xTaskPriorityDisinherit+0x72>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2260:	88 23       	and	r24, r24
    2262:	59 f5       	brne	.+86     	; 0x22ba <xTaskPriorityDisinherit+0x76>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2264:	8e 01       	movw	r16, r28
    2266:	0e 5f       	subi	r16, 0xFE	; 254
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	c8 01       	movw	r24, r16
    226c:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    2270:	4b a1       	lds	r20, 0x4b
    2272:	4e 8b       	std	Y+22, r20	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2274:	24 2f       	mov	r18, r20
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	85 e0       	ldi	r24, 0x05	; 5
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	82 1b       	sub	r24, r18
    227e:	93 0b       	sbc	r25, r19
    2280:	9d 87       	std	Y+13, r25	; 0x0d
    2282:	8c 87       	std	Y+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    2284:	80 91 a5 03 	lds	r24, 0x03A5
    2288:	84 17       	cp	r24, r20
    228a:	10 f4       	brcc	.+4      	; 0x2290 <xTaskPriorityDisinherit+0x4c>
    228c:	40 93 a5 03 	sts	0x03A5, r20
    2290:	c9 01       	movw	r24, r18
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	28 0f       	add	r18, r24
    22a0:	39 1f       	adc	r19, r25
    22a2:	c9 01       	movw	r24, r18
    22a4:	81 55       	subi	r24, 0x51	; 81
    22a6:	9c 4f       	sbci	r25, 0xFC	; 252
    22a8:	b8 01       	movw	r22, r16
    22aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <xTaskPriorityDisinherit+0x78>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <xTaskPriorityDisinherit+0x78>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <xTaskPriorityDisinherit+0x78>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    22c6:	e0 91 9c 03 	lds	r30, 0x039C
    22ca:	f0 91 9d 03 	lds	r31, 0x039D
    22ce:	84 85       	ldd	r24, Z+12	; 0x0c
    22d0:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22d2:	e0 91 9c 03 	lds	r30, 0x039C
    22d6:	f0 91 9d 03 	lds	r31, 0x039D
    22da:	a0 91 9c 03 	lds	r26, 0x039C
    22de:	b0 91 9d 03 	lds	r27, 0x039D
    22e2:	56 96       	adiw	r26, 0x16	; 22
    22e4:	4c 91       	ld	r20, X
    22e6:	56 97       	sbiw	r26, 0x16	; 22
    22e8:	25 e0       	ldi	r18, 0x05	; 5
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	24 1b       	sub	r18, r20
    22ee:	31 09       	sbc	r19, r1
    22f0:	35 87       	std	Z+13, r19	; 0x0d
    22f2:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    22f4:	08 95       	ret

000022f6 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    22f6:	80 91 9c 03 	lds	r24, 0x039C
    22fa:	90 91 9d 03 	lds	r25, 0x039D
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	39 f0       	breq	.+14     	; 0x2310 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2302:	e0 91 9c 03 	lds	r30, 0x039C
    2306:	f0 91 9d 03 	lds	r31, 0x039D
    230a:	84 a1       	lds	r24, 0x44
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	84 a3       	lds	r24, 0x54
		}

		return pxCurrentTCB;
    2310:	80 91 9c 03 	lds	r24, 0x039C
    2314:	90 91 9d 03 	lds	r25, 0x039D
	}
    2318:	08 95       	ret

0000231a <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	c8 2f       	mov	r28, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    2328:	e0 91 9c 03 	lds	r30, 0x039C
    232c:	f0 91 9d 03 	lds	r31, 0x039D
    2330:	85 a1       	lds	r24, 0x45
    2332:	96 a1       	lds	r25, 0x46
    2334:	a7 a1       	lds	r26, 0x47
    2336:	b0 a5       	lds	r27, 0x60
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	a1 05       	cpc	r26, r1
    233c:	b1 05       	cpc	r27, r1
    233e:	79 f4       	brne	.+30     	; 0x235e <ulTaskNotifyTake+0x44>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2340:	e0 91 9c 03 	lds	r30, 0x039C
    2344:	f0 91 9d 03 	lds	r31, 0x039D
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    234c:	61 15       	cp	r22, r1
    234e:	71 05       	cpc	r23, r1
    2350:	31 f0       	breq	.+12     	; 0x235e <ulTaskNotifyTake+0x44>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2352:	cb 01       	movw	r24, r22
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    235a:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    235e:	0f 90       	pop	r0
    2360:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    2368:	e0 91 9c 03 	lds	r30, 0x039C
    236c:	f0 91 9d 03 	lds	r31, 0x039D
    2370:	05 a1       	lds	r16, 0x45
    2372:	16 a1       	lds	r17, 0x46
    2374:	27 a1       	lds	r18, 0x47
    2376:	30 a5       	lds	r19, 0x60

			if( ulReturn != 0UL )
    2378:	01 15       	cp	r16, r1
    237a:	11 05       	cpc	r17, r1
    237c:	21 05       	cpc	r18, r1
    237e:	31 05       	cpc	r19, r1
    2380:	c1 f0       	breq	.+48     	; 0x23b2 <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    2382:	cc 23       	and	r28, r28
    2384:	49 f0       	breq	.+18     	; 0x2398 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    2386:	e0 91 9c 03 	lds	r30, 0x039C
    238a:	f0 91 9d 03 	lds	r31, 0x039D
    238e:	15 a2       	lds	r17, 0x95
    2390:	16 a2       	lds	r17, 0x96
    2392:	17 a2       	lds	r17, 0x97
    2394:	10 a6       	lds	r17, 0xb0
    2396:	0d c0       	rjmp	.+26     	; 0x23b2 <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    2398:	e0 91 9c 03 	lds	r30, 0x039C
    239c:	f0 91 9d 03 	lds	r31, 0x039D
    23a0:	d9 01       	movw	r26, r18
    23a2:	c8 01       	movw	r24, r16
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	a1 09       	sbc	r26, r1
    23a8:	b1 09       	sbc	r27, r1
    23aa:	85 a3       	lds	r24, 0x55
    23ac:	96 a3       	lds	r25, 0x56
    23ae:	a7 a3       	lds	r26, 0x57
    23b0:	b0 a7       	lds	r27, 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    23b2:	e0 91 9c 03 	lds	r30, 0x039C
    23b6:	f0 91 9d 03 	lds	r31, 0x039D
    23ba:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    23c0:	60 2f       	mov	r22, r16
    23c2:	71 2f       	mov	r23, r17
    23c4:	82 2f       	mov	r24, r18
    23c6:	93 2f       	mov	r25, r19
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	08 95       	ret

000023d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	49 01       	movw	r8, r18
    23e6:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    23ee:	e0 91 9c 03 	lds	r30, 0x039C
    23f2:	f0 91 9d 03 	lds	r31, 0x039D
    23f6:	21 a5       	lds	r18, 0x61
    23f8:	22 30       	cpi	r18, 0x02	; 2
    23fa:	19 f1       	breq	.+70     	; 0x2442 <xTaskNotifyWait+0x72>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    23fc:	e0 91 9c 03 	lds	r30, 0x039C
    2400:	f0 91 9d 03 	lds	r31, 0x039D
    2404:	45 a1       	lds	r20, 0x45
    2406:	56 a1       	lds	r21, 0x46
    2408:	67 a1       	lds	r22, 0x47
    240a:	70 a5       	lds	r23, 0x60
    240c:	80 95       	com	r24
    240e:	90 95       	com	r25
    2410:	a0 95       	com	r26
    2412:	b0 95       	com	r27
    2414:	84 23       	and	r24, r20
    2416:	95 23       	and	r25, r21
    2418:	a6 23       	and	r26, r22
    241a:	b7 23       	and	r27, r23
    241c:	85 a3       	lds	r24, 0x55
    241e:	96 a3       	lds	r25, 0x56
    2420:	a7 a3       	lds	r26, 0x57
    2422:	b0 a7       	lds	r27, 0x70

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2424:	e0 91 9c 03 	lds	r30, 0x039C
    2428:	f0 91 9d 03 	lds	r31, 0x039D
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    2430:	e1 14       	cp	r14, r1
    2432:	f1 04       	cpc	r15, r1
    2434:	31 f0       	breq	.+12     	; 0x2442 <xTaskNotifyWait+0x72>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2436:	c7 01       	movw	r24, r14
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 22 0a 	call	0x1444	; 0x1444 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    243e:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    244c:	01 15       	cp	r16, r1
    244e:	11 05       	cpc	r17, r1
    2450:	69 f0       	breq	.+26     	; 0x246c <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    2452:	e0 91 9c 03 	lds	r30, 0x039C
    2456:	f0 91 9d 03 	lds	r31, 0x039D
    245a:	85 a1       	lds	r24, 0x45
    245c:	96 a1       	lds	r25, 0x46
    245e:	a7 a1       	lds	r26, 0x47
    2460:	b0 a5       	lds	r27, 0x60
    2462:	f8 01       	movw	r30, r16
    2464:	80 83       	st	Z, r24
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	a2 83       	std	Z+2, r26	; 0x02
    246a:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    246c:	e0 91 9c 03 	lds	r30, 0x039C
    2470:	f0 91 9d 03 	lds	r31, 0x039D
    2474:	81 a5       	lds	r24, 0x61
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	b1 f0       	breq	.+44     	; 0x24a6 <xTaskNotifyWait+0xd6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    247a:	e0 91 9c 03 	lds	r30, 0x039C
    247e:	f0 91 9d 03 	lds	r31, 0x039D
    2482:	85 a1       	lds	r24, 0x45
    2484:	96 a1       	lds	r25, 0x46
    2486:	a7 a1       	lds	r26, 0x47
    2488:	b0 a5       	lds	r27, 0x60
    248a:	80 94       	com	r8
    248c:	90 94       	com	r9
    248e:	a0 94       	com	r10
    2490:	b0 94       	com	r11
    2492:	88 22       	and	r8, r24
    2494:	99 22       	and	r9, r25
    2496:	aa 22       	and	r10, r26
    2498:	bb 22       	and	r11, r27
    249a:	85 a2       	lds	r24, 0x95
    249c:	96 a2       	lds	r25, 0x96
    249e:	a7 a2       	lds	r26, 0x97
    24a0:	b0 a6       	lds	r27, 0xb0
				xReturn = pdTRUE;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <xTaskNotifyWait+0xd8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    24a6:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    24a8:	e0 91 9c 03 	lds	r30, 0x039C
    24ac:	f0 91 9d 03 	lds	r31, 0x039D
    24b0:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	9f 90       	pop	r9
    24c4:	8f 90       	pop	r8
    24c6:	08 95       	ret

000024c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	ec 01       	movw	r28, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    24d8:	01 15       	cp	r16, r1
    24da:	11 05       	cpc	r17, r1
    24dc:	49 f0       	breq	.+18     	; 0x24f0 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    24de:	8d a1       	lds	r24, 0x4d
    24e0:	9e a1       	lds	r25, 0x4e
    24e2:	af a1       	lds	r26, 0x4f
    24e4:	b8 a5       	lds	r27, 0x68
    24e6:	f8 01       	movw	r30, r16
    24e8:	80 83       	st	Z, r24
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	a2 83       	std	Z+2, r26	; 0x02
    24ee:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    24f0:	39 a5       	lds	r19, 0x69

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	89 a7       	lds	r24, 0x79

			switch( eAction )
    24f6:	22 30       	cpi	r18, 0x02	; 2
    24f8:	b9 f0       	breq	.+46     	; 0x2528 <xTaskGenericNotify+0x60>
    24fa:	23 30       	cpi	r18, 0x03	; 3
    24fc:	18 f4       	brcc	.+6      	; 0x2504 <xTaskGenericNotify+0x3c>
    24fe:	21 30       	cpi	r18, 0x01	; 1
    2500:	51 f5       	brne	.+84     	; 0x2556 <xTaskGenericNotify+0x8e>
    2502:	05 c0       	rjmp	.+10     	; 0x250e <xTaskGenericNotify+0x46>
    2504:	23 30       	cpi	r18, 0x03	; 3
    2506:	e1 f0       	breq	.+56     	; 0x2540 <xTaskGenericNotify+0x78>
    2508:	24 30       	cpi	r18, 0x04	; 4
    250a:	29 f5       	brne	.+74     	; 0x2556 <xTaskGenericNotify+0x8e>
    250c:	1e c0       	rjmp	.+60     	; 0x254a <xTaskGenericNotify+0x82>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    250e:	8d a1       	lds	r24, 0x4d
    2510:	9e a1       	lds	r25, 0x4e
    2512:	af a1       	lds	r26, 0x4f
    2514:	b8 a5       	lds	r27, 0x68
    2516:	48 2b       	or	r20, r24
    2518:	59 2b       	or	r21, r25
    251a:	6a 2b       	or	r22, r26
    251c:	7b 2b       	or	r23, r27
    251e:	4d a3       	lds	r20, 0x5d
    2520:	5e a3       	lds	r21, 0x5e
    2522:	6f a3       	lds	r22, 0x5f
    2524:	78 a7       	lds	r23, 0x78
					break;
    2526:	17 c0       	rjmp	.+46     	; 0x2556 <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2528:	8d a1       	lds	r24, 0x4d
    252a:	9e a1       	lds	r25, 0x4e
    252c:	af a1       	lds	r26, 0x4f
    252e:	b8 a5       	lds	r27, 0x68
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	a1 1d       	adc	r26, r1
    2534:	b1 1d       	adc	r27, r1
    2536:	8d a3       	lds	r24, 0x5d
    2538:	9e a3       	lds	r25, 0x5e
    253a:	af a3       	lds	r26, 0x5f
    253c:	b8 a7       	lds	r27, 0x78
					break;
    253e:	0b c0       	rjmp	.+22     	; 0x2556 <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2540:	4d a3       	lds	r20, 0x5d
    2542:	5e a3       	lds	r21, 0x5e
    2544:	6f a3       	lds	r22, 0x5f
    2546:	78 a7       	lds	r23, 0x78
					break;
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    254a:	32 30       	cpi	r19, 0x02	; 2
    254c:	71 f1       	breq	.+92     	; 0x25aa <xTaskGenericNotify+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    254e:	4d a3       	lds	r20, 0x5d
    2550:	5e a3       	lds	r21, 0x5e
    2552:	6f a3       	lds	r22, 0x5f
    2554:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2556:	31 30       	cpi	r19, 0x01	; 1
    2558:	51 f5       	brne	.+84     	; 0x25ae <xTaskGenericNotify+0xe6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    255a:	8e 01       	movw	r16, r28
    255c:	0e 5f       	subi	r16, 0xFE	; 254
    255e:	1f 4f       	sbci	r17, 0xFF	; 255
    2560:	c8 01       	movw	r24, r16
    2562:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2566:	8e 89       	ldd	r24, Y+22	; 0x16
    2568:	90 91 a5 03 	lds	r25, 0x03A5
    256c:	98 17       	cp	r25, r24
    256e:	10 f4       	brcc	.+4      	; 0x2574 <xTaskGenericNotify+0xac>
    2570:	80 93 a5 03 	sts	0x03A5, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9c 01       	movw	r18, r24
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	82 0f       	add	r24, r18
    2586:	93 1f       	adc	r25, r19
    2588:	81 55       	subi	r24, 0x51	; 81
    258a:	9c 4f       	sbci	r25, 0xFC	; 252
    258c:	b8 01       	movw	r22, r16
    258e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2592:	e0 91 9c 03 	lds	r30, 0x039C
    2596:	f0 91 9d 03 	lds	r31, 0x039D
    259a:	9e 89       	ldd	r25, Y+22	; 0x16
    259c:	86 89       	ldd	r24, Z+22	; 0x16
    259e:	89 17       	cp	r24, r25
    25a0:	40 f4       	brcc	.+16     	; 0x25b2 <xTaskGenericNotify+0xea>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    25a2:	0e 94 bc 04 	call	0x978	; 0x978 <vPortYield>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	05 c0       	rjmp	.+10     	; 0x25b4 <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <xTaskGenericNotify+0xec>

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <xTaskGenericNotify+0xec>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    25b2:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    25b4:	0f 90       	pop	r0
    25b6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	08 95       	ret

000025c2 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	ec 01       	movw	r28, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    25d0:	01 15       	cp	r16, r1
    25d2:	11 05       	cpc	r17, r1
    25d4:	49 f0       	breq	.+18     	; 0x25e8 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    25d6:	8d a1       	lds	r24, 0x4d
    25d8:	9e a1       	lds	r25, 0x4e
    25da:	af a1       	lds	r26, 0x4f
    25dc:	b8 a5       	lds	r27, 0x68
    25de:	f8 01       	movw	r30, r16
    25e0:	80 83       	st	Z, r24
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	a2 83       	std	Z+2, r26	; 0x02
    25e6:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    25e8:	39 a5       	lds	r19, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	89 a7       	lds	r24, 0x79

			switch( eAction )
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	b9 f0       	breq	.+46     	; 0x2620 <xTaskGenericNotifyFromISR+0x5e>
    25f2:	23 30       	cpi	r18, 0x03	; 3
    25f4:	18 f4       	brcc	.+6      	; 0x25fc <xTaskGenericNotifyFromISR+0x3a>
    25f6:	21 30       	cpi	r18, 0x01	; 1
    25f8:	59 f5       	brne	.+86     	; 0x2650 <xTaskGenericNotifyFromISR+0x8e>
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <xTaskGenericNotifyFromISR+0x44>
    25fc:	23 30       	cpi	r18, 0x03	; 3
    25fe:	e1 f0       	breq	.+56     	; 0x2638 <xTaskGenericNotifyFromISR+0x76>
    2600:	24 30       	cpi	r18, 0x04	; 4
    2602:	31 f5       	brne	.+76     	; 0x2650 <xTaskGenericNotifyFromISR+0x8e>
    2604:	1e c0       	rjmp	.+60     	; 0x2642 <xTaskGenericNotifyFromISR+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2606:	8d a1       	lds	r24, 0x4d
    2608:	9e a1       	lds	r25, 0x4e
    260a:	af a1       	lds	r26, 0x4f
    260c:	b8 a5       	lds	r27, 0x68
    260e:	84 2b       	or	r24, r20
    2610:	95 2b       	or	r25, r21
    2612:	a6 2b       	or	r26, r22
    2614:	b7 2b       	or	r27, r23
    2616:	8d a3       	lds	r24, 0x5d
    2618:	9e a3       	lds	r25, 0x5e
    261a:	af a3       	lds	r26, 0x5f
    261c:	b8 a7       	lds	r27, 0x78
					break;
    261e:	18 c0       	rjmp	.+48     	; 0x2650 <xTaskGenericNotifyFromISR+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2620:	8d a1       	lds	r24, 0x4d
    2622:	9e a1       	lds	r25, 0x4e
    2624:	af a1       	lds	r26, 0x4f
    2626:	b8 a5       	lds	r27, 0x68
    2628:	01 96       	adiw	r24, 0x01	; 1
    262a:	a1 1d       	adc	r26, r1
    262c:	b1 1d       	adc	r27, r1
    262e:	8d a3       	lds	r24, 0x5d
    2630:	9e a3       	lds	r25, 0x5e
    2632:	af a3       	lds	r26, 0x5f
    2634:	b8 a7       	lds	r27, 0x78
					break;
    2636:	0c c0       	rjmp	.+24     	; 0x2650 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2638:	4d a3       	lds	r20, 0x5d
    263a:	5e a3       	lds	r21, 0x5e
    263c:	6f a3       	lds	r22, 0x5f
    263e:	78 a7       	lds	r23, 0x78
					break;
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2642:	32 30       	cpi	r19, 0x02	; 2
    2644:	09 f4       	brne	.+2      	; 0x2648 <xTaskGenericNotifyFromISR+0x86>
    2646:	41 c0       	rjmp	.+130    	; 0x26ca <xTaskGenericNotifyFromISR+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2648:	4d a3       	lds	r20, 0x5d
    264a:	5e a3       	lds	r21, 0x5e
    264c:	6f a3       	lds	r22, 0x5f
    264e:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2650:	31 30       	cpi	r19, 0x01	; 1
    2652:	e9 f5       	brne	.+122    	; 0x26ce <xTaskGenericNotifyFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2654:	80 91 9e 03 	lds	r24, 0x039E
    2658:	88 23       	and	r24, r24
    265a:	e9 f4       	brne	.+58     	; 0x2696 <xTaskGenericNotifyFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    265c:	8e 01       	movw	r16, r28
    265e:	0e 5f       	subi	r16, 0xFE	; 254
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	c8 01       	movw	r24, r16
    2664:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2668:	8e 89       	ldd	r24, Y+22	; 0x16
    266a:	90 91 a5 03 	lds	r25, 0x03A5
    266e:	98 17       	cp	r25, r24
    2670:	10 f4       	brcc	.+4      	; 0x2676 <xTaskGenericNotifyFromISR+0xb4>
    2672:	80 93 a5 03 	sts	0x03A5, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9c 01       	movw	r18, r24
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	22 0f       	add	r18, r18
    2680:	33 1f       	adc	r19, r19
    2682:	22 0f       	add	r18, r18
    2684:	33 1f       	adc	r19, r19
    2686:	82 0f       	add	r24, r18
    2688:	93 1f       	adc	r25, r19
    268a:	81 55       	subi	r24, 0x51	; 81
    268c:	9c 4f       	sbci	r25, 0xFC	; 252
    268e:	b8 01       	movw	r22, r16
    2690:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2694:	07 c0       	rjmp	.+14     	; 0x26a4 <xTaskGenericNotifyFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2696:	be 01       	movw	r22, r28
    2698:	64 5f       	subi	r22, 0xF4	; 244
    269a:	7f 4f       	sbci	r23, 0xFF	; 255
    269c:	8e ee       	ldi	r24, 0xEE	; 238
    269e:	93 e0       	ldi	r25, 0x03	; 3
    26a0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26a4:	e0 91 9c 03 	lds	r30, 0x039C
    26a8:	f0 91 9d 03 	lds	r31, 0x039D
    26ac:	9e 89       	ldd	r25, Y+22	; 0x16
    26ae:	86 89       	ldd	r24, Z+22	; 0x16
    26b0:	89 17       	cp	r24, r25
    26b2:	78 f4       	brcc	.+30     	; 0x26d2 <xTaskGenericNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    26b4:	e1 14       	cp	r14, r1
    26b6:	f1 04       	cpc	r15, r1
    26b8:	21 f0       	breq	.+8      	; 0x26c2 <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	f7 01       	movw	r30, r14
    26be:	80 83       	st	Z, r24
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <xTaskGenericNotifyFromISR+0x112>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	80 93 a2 03 	sts	0x03A2, r24
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <xTaskGenericNotifyFromISR+0x112>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <xTaskGenericNotifyFromISR+0x112>

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <xTaskGenericNotifyFromISR+0x112>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26d2:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	08 95       	ret

000026e2 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	8b 01       	movw	r16, r22

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    26f2:	29 a5       	lds	r18, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	89 a7       	lds	r24, 0x79

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    26f8:	8d a1       	lds	r24, 0x4d
    26fa:	9e a1       	lds	r25, 0x4e
    26fc:	af a1       	lds	r26, 0x4f
    26fe:	b8 a5       	lds	r27, 0x68
    2700:	01 96       	adiw	r24, 0x01	; 1
    2702:	a1 1d       	adc	r26, r1
    2704:	b1 1d       	adc	r27, r1
    2706:	8d a3       	lds	r24, 0x5d
    2708:	9e a3       	lds	r25, 0x5e
    270a:	af a3       	lds	r26, 0x5f
    270c:	b8 a7       	lds	r27, 0x78

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    270e:	21 30       	cpi	r18, 0x01	; 1
    2710:	e9 f5       	brne	.+122    	; 0x278c <vTaskNotifyGiveFromISR+0xaa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2712:	80 91 9e 03 	lds	r24, 0x039E
    2716:	88 23       	and	r24, r24
    2718:	01 f5       	brne	.+64     	; 0x275a <vTaskNotifyGiveFromISR+0x78>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    271a:	ee 24       	eor	r14, r14
    271c:	ff 24       	eor	r15, r15
    271e:	68 94       	set
    2720:	e1 f8       	bld	r14, 1
    2722:	ec 0e       	add	r14, r28
    2724:	fd 1e       	adc	r15, r29
    2726:	c7 01       	movw	r24, r14
    2728:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    272c:	8e 89       	ldd	r24, Y+22	; 0x16
    272e:	90 91 a5 03 	lds	r25, 0x03A5
    2732:	98 17       	cp	r25, r24
    2734:	10 f4       	brcc	.+4      	; 0x273a <vTaskNotifyGiveFromISR+0x58>
    2736:	80 93 a5 03 	sts	0x03A5, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9c 01       	movw	r18, r24
    273e:	22 0f       	add	r18, r18
    2740:	33 1f       	adc	r19, r19
    2742:	22 0f       	add	r18, r18
    2744:	33 1f       	adc	r19, r19
    2746:	22 0f       	add	r18, r18
    2748:	33 1f       	adc	r19, r19
    274a:	82 0f       	add	r24, r18
    274c:	93 1f       	adc	r25, r19
    274e:	81 55       	subi	r24, 0x51	; 81
    2750:	9c 4f       	sbci	r25, 0xFC	; 252
    2752:	b7 01       	movw	r22, r14
    2754:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <vTaskNotifyGiveFromISR+0x86>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    275a:	be 01       	movw	r22, r28
    275c:	64 5f       	subi	r22, 0xF4	; 244
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	8e ee       	ldi	r24, 0xEE	; 238
    2762:	93 e0       	ldi	r25, 0x03	; 3
    2764:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2768:	e0 91 9c 03 	lds	r30, 0x039C
    276c:	f0 91 9d 03 	lds	r31, 0x039D
    2770:	9e 89       	ldd	r25, Y+22	; 0x16
    2772:	86 89       	ldd	r24, Z+22	; 0x16
    2774:	89 17       	cp	r24, r25
    2776:	50 f4       	brcc	.+20     	; 0x278c <vTaskNotifyGiveFromISR+0xaa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2778:	01 15       	cp	r16, r1
    277a:	11 05       	cpc	r17, r1
    277c:	21 f0       	breq	.+8      	; 0x2786 <vTaskNotifyGiveFromISR+0xa4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	f8 01       	movw	r30, r16
    2782:	80 83       	st	Z, r24
    2784:	03 c0       	rjmp	.+6      	; 0x278c <vTaskNotifyGiveFromISR+0xaa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 a2 03 	sts	0x03A2, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	08 95       	ret

0000279a <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	29 f4       	brne	.+10     	; 0x27a8 <xTaskNotifyStateClear+0xe>
    279e:	e0 91 9c 03 	lds	r30, 0x039C
    27a2:	f0 91 9d 03 	lds	r31, 0x039D
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <xTaskNotifyStateClear+0x10>
    27a8:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27b0:	81 a5       	lds	r24, 0x61
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	19 f4       	brne	.+6      	; 0x27bc <xTaskNotifyStateClear+0x22>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27b6:	11 a6       	lds	r17, 0xb1
				xReturn = pdPASS;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <xTaskNotifyStateClear+0x24>
			}
			else
			{
				xReturn = pdFAIL;
    27bc:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    27be:	0f 90       	pop	r0
    27c0:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    27c2:	08 95       	ret

000027c4 <memcpy>:
    27c4:	fb 01       	movw	r30, r22
    27c6:	dc 01       	movw	r26, r24
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <memcpy+0xa>
    27ca:	01 90       	ld	r0, Z+
    27cc:	0d 92       	st	X+, r0
    27ce:	41 50       	subi	r20, 0x01	; 1
    27d0:	50 40       	sbci	r21, 0x00	; 0
    27d2:	d8 f7       	brcc	.-10     	; 0x27ca <memcpy+0x6>
    27d4:	08 95       	ret

000027d6 <_exit>:
    27d6:	f8 94       	cli

000027d8 <__stop_program>:
    27d8:	ff cf       	rjmp	.-2      	; 0x27d8 <__stop_program>
