
Mutual Exclusion_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000027e6  0000287a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ba  00800072  00800072  0000288c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000030c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003666  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c61  00000000  00000000  0000688e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a4  00000000  00000000  000074ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bcc  00000000  00000000  00008894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015b5  00000000  00000000  00009460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd8  00000000  00000000  0000aa15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000e9ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 32       	cpi	r26, 0x2C	; 44
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 04 	call	0x858	; 0x858 <main>
      8a:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
      92:	44 23       	and	r20, r20
      94:	41 f4       	brne	.+16     	; 0xa6 <prvTestWaitCondition+0x14>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
      96:	68 23       	and	r22, r24
      98:	79 23       	and	r23, r25
		{
			xWaitConditionMet = pdTRUE;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	61 15       	cp	r22, r1
      9e:	71 05       	cpc	r23, r1
      a0:	51 f4       	brne	.+20     	; 0xb6 <prvTestWaitCondition+0x24>
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
      a6:	9b 01       	movw	r18, r22
      a8:	28 23       	and	r18, r24
      aa:	39 23       	and	r19, r25
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	62 17       	cp	r22, r18
      b0:	73 07       	cpc	r23, r19
      b2:	09 f0       	breq	.+2      	; 0xb6 <prvTestWaitCondition+0x24>
      b4:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
      b6:	08 95       	ret

000000b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
      b8:	cf 93       	push	r28
      ba:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
      bc:	8b e0       	ldi	r24, 0x0B	; 11
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
      c4:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	31 f0       	breq	.+12     	; 0xd6 <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
      ca:	fc 01       	movw	r30, r24
      cc:	11 92       	st	Z+, r1
      ce:	11 92       	st	Z+, r1
      d0:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
      d2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
      d6:	8c 2f       	mov	r24, r28
      d8:	9d 2f       	mov	r25, r29
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	5c 01       	movw	r10, r24
      f6:	6b 01       	movw	r12, r22
      f8:	e4 2e       	mov	r14, r20
      fa:	f2 2e       	mov	r15, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
      fc:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     100:	f5 01       	movw	r30, r10
     102:	c0 81       	ld	r28, Z
     104:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     106:	ce 01       	movw	r24, r28
     108:	b6 01       	movw	r22, r12
     10a:	4f 2d       	mov	r20, r15
     10c:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     110:	88 23       	and	r24, r24
     112:	51 f0       	breq	.+20     	; 0x128 <xEventGroupWaitBits+0x48>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     114:	ee 20       	and	r14, r14
     116:	01 f1       	breq	.+64     	; 0x158 <xEventGroupWaitBits+0x78>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     118:	c0 94       	com	r12
     11a:	d0 94       	com	r13
     11c:	cc 22       	and	r12, r28
     11e:	dd 22       	and	r13, r29
     120:	f5 01       	movw	r30, r10
     122:	d1 82       	std	Z+1, r13	; 0x01
     124:	c0 82       	st	Z, r12
     126:	18 c0       	rjmp	.+48     	; 0x158 <xEventGroupWaitBits+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     128:	01 15       	cp	r16, r1
     12a:	11 05       	cpc	r17, r1
     12c:	a9 f0       	breq	.+42     	; 0x158 <xEventGroupWaitBits+0x78>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     12e:	ee 20       	and	r14, r14
     130:	19 f4       	brne	.+6      	; 0x138 <xEventGroupWaitBits+0x58>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <xEventGroupWaitBits+0x5c>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     13c:	f1 10       	cpse	r15, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     13e:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     140:	6c 29       	or	r22, r12
     142:	7d 29       	or	r23, r13
     144:	c5 01       	movw	r24, r10
     146:	02 96       	adiw	r24, 0x02	; 2
     148:	a8 01       	movw	r20, r16
     14a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     14e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     152:	88 23       	and	r24, r24
     154:	39 f4       	brne	.+14     	; 0x164 <xEventGroupWaitBits+0x84>
     156:	04 c0       	rjmp	.+8      	; 0x160 <xEventGroupWaitBits+0x80>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     158:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
     15c:	ce 01       	movw	r24, r28
     15e:	21 c0       	rjmp	.+66     	; 0x1a2 <xEventGroupWaitBits+0xc2>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     160:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     164:	0e 94 69 11 	call	0x22d2	; 0x22d2 <uxTaskResetEventItemValue>
     168:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     16a:	91 fd       	sbrc	r25, 1
     16c:	18 c0       	rjmp	.+48     	; 0x19e <xEventGroupWaitBits+0xbe>
		{
			taskENTER_CRITICAL();
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     174:	f5 01       	movw	r30, r10
     176:	c0 81       	ld	r28, Z
     178:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     17a:	ce 01       	movw	r24, r28
     17c:	b6 01       	movw	r22, r12
     17e:	4f 2d       	mov	r20, r15
     180:	0e 94 49 00 	call	0x92	; 0x92 <prvTestWaitCondition>
     184:	88 23       	and	r24, r24
     186:	49 f0       	breq	.+18     	; 0x19a <xEventGroupWaitBits+0xba>
				{
					if( xClearOnExit != pdFALSE )
     188:	ee 20       	and	r14, r14
     18a:	39 f0       	breq	.+14     	; 0x19a <xEventGroupWaitBits+0xba>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     18c:	c0 94       	com	r12
     18e:	d0 94       	com	r13
     190:	cc 22       	and	r12, r28
     192:	dd 22       	and	r13, r29
     194:	f5 01       	movw	r30, r10
     196:	d1 82       	std	Z+1, r13	; 0x01
     198:	c0 82       	st	Z, r12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     19e:	ce 01       	movw	r24, r28
     1a0:	90 70       	andi	r25, 0x00	; 0
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	ef 90       	pop	r14
     1ae:	df 90       	pop	r13
     1b0:	cf 90       	pop	r12
     1b2:	bf 90       	pop	r11
     1b4:	af 90       	pop	r10
     1b6:	08 95       	ret

000001b8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     1b8:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	f8 94       	cli
     1be:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     1c4:	60 95       	com	r22
     1c6:	70 95       	com	r23
     1c8:	68 23       	and	r22, r24
     1ca:	79 23       	and	r23, r25
     1cc:	71 83       	std	Z+1, r23	; 0x01
     1ce:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     1d4:	08 95       	ret

000001d6 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     1d6:	fc 01       	movw	r30, r24
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	08 95       	ret

000001de <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	8c 01       	movw	r16, r24
     1f4:	eb 01       	movw	r28, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	cf 2e       	mov	r12, r31
     1fc:	dd 24       	eor	r13, r13
     1fe:	f0 2d       	mov	r31, r0
     200:	c8 0e       	add	r12, r24
     202:	d9 1e       	adc	r13, r25
	vTaskSuspendAll();
     204:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     208:	d8 01       	movw	r26, r16
     20a:	17 96       	adiw	r26, 0x07	; 7
     20c:	ed 91       	ld	r30, X+
     20e:	fc 91       	ld	r31, X
     210:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     212:	8d 91       	ld	r24, X+
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	8c 2b       	or	r24, r28
     21a:	9d 2b       	or	r25, r29
     21c:	11 96       	adiw	r26, 0x01	; 1
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     222:	ce 16       	cp	r12, r30
     224:	df 06       	cpc	r13, r31
     226:	c1 f1       	breq	.+112    	; 0x298 <xEventGroupSetBits+0xba>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     228:	aa 24       	eor	r10, r10
     22a:	bb 24       	eor	r11, r11
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     22c:	ff 24       	eor	r15, r15
     22e:	f3 94       	inc	r15
     230:	ee 24       	eor	r14, r14
     232:	01 c0       	rjmp	.+2      	; 0x236 <xEventGroupSetBits+0x58>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     234:	fe 01       	movw	r30, r28
		{
			pxNext = listGET_NEXT( pxListItem );
     236:	c2 81       	ldd	r28, Z+2	; 0x02
     238:	d3 81       	ldd	r29, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     23e:	bc 01       	movw	r22, r24
     240:	60 70       	andi	r22, 0x00	; 0
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     242:	9c 01       	movw	r18, r24
     244:	30 70       	andi	r19, 0x00	; 0

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     246:	92 fd       	sbrc	r25, 2
     248:	0b c0       	rjmp	.+22     	; 0x260 <xEventGroupSetBits+0x82>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     24a:	d8 01       	movw	r26, r16
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	11 97       	sbiw	r26, 0x01	; 1
     252:	82 23       	and	r24, r18
     254:	93 23       	and	r25, r19
				{
					xMatchFound = pdTRUE;
     256:	4f 2d       	mov	r20, r15
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	69 f4       	brne	.+26     	; 0x276 <xEventGroupSetBits+0x98>
     25c:	4e 2d       	mov	r20, r14
     25e:	0b c0       	rjmp	.+22     	; 0x276 <xEventGroupSetBits+0x98>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     260:	d8 01       	movw	r26, r16
     262:	8d 91       	ld	r24, X+
     264:	9c 91       	ld	r25, X
     266:	11 97       	sbiw	r26, 0x01	; 1
     268:	82 23       	and	r24, r18
     26a:	93 23       	and	r25, r19
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     26c:	4f 2d       	mov	r20, r15
     26e:	28 17       	cp	r18, r24
     270:	39 07       	cpc	r19, r25
     272:	09 f0       	breq	.+2      	; 0x276 <xEventGroupSetBits+0x98>
     274:	4e 2d       	mov	r20, r14
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     276:	44 23       	and	r20, r20
     278:	59 f0       	breq	.+22     	; 0x290 <xEventGroupSetBits+0xb2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     27a:	70 ff       	sbrs	r23, 0
     27c:	02 c0       	rjmp	.+4      	; 0x282 <xEventGroupSetBits+0xa4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     27e:	a2 2a       	or	r10, r18
     280:	b3 2a       	or	r11, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     282:	d8 01       	movw	r26, r16
     284:	6d 91       	ld	r22, X+
     286:	7c 91       	ld	r23, X
     288:	72 60       	ori	r23, 0x02	; 2
     28a:	cf 01       	movw	r24, r30
     28c:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskRemoveFromUnorderedEventList>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     290:	cc 16       	cp	r12, r28
     292:	dd 06       	cpc	r13, r29
     294:	79 f6       	brne	.-98     	; 0x234 <xEventGroupSetBits+0x56>
     296:	02 c0       	rjmp	.+4      	; 0x29c <xEventGroupSetBits+0xbe>
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     298:	aa 24       	eor	r10, r10
     29a:	bb 24       	eor	r11, r11
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     29c:	c5 01       	movw	r24, r10
     29e:	80 95       	com	r24
     2a0:	90 95       	com	r25
     2a2:	f8 01       	movw	r30, r16
     2a4:	a0 80       	ld	r10, Z
     2a6:	b1 80       	ldd	r11, Z+1	; 0x01
     2a8:	a8 22       	and	r10, r24
     2aa:	b9 22       	and	r11, r25
     2ac:	b1 82       	std	Z+1, r11	; 0x01
     2ae:	a0 82       	st	Z, r10
	}
	( void ) xTaskResumeAll();
     2b0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     2b4:	d8 01       	movw	r26, r16
     2b6:	8c 91       	ld	r24, X
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	11 97       	sbiw	r26, 0x01	; 1
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	08 95       	ret

000002d4 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	6c 01       	movw	r12, r24
     2ea:	eb 01       	movw	r28, r22
     2ec:	7a 01       	movw	r14, r20
     2ee:	59 01       	movw	r10, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     2f0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     2f4:	f6 01       	movw	r30, r12
     2f6:	00 81       	ld	r16, Z
     2f8:	11 81       	ldd	r17, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     2fa:	c6 01       	movw	r24, r12
     2fc:	be 01       	movw	r22, r28
     2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     302:	c0 2b       	or	r28, r16
     304:	d1 2b       	or	r29, r17
     306:	c7 01       	movw	r24, r14
     308:	8c 23       	and	r24, r28
     30a:	9d 23       	and	r25, r29
     30c:	8e 15       	cp	r24, r14
     30e:	9f 05       	cpc	r25, r15
     310:	51 f4       	brne	.+20     	; 0x326 <xEventGroupSync+0x52>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     312:	80 95       	com	r24
     314:	90 95       	com	r25
     316:	f6 01       	movw	r30, r12
     318:	20 81       	ld	r18, Z
     31a:	31 81       	ldd	r19, Z+1	; 0x01
     31c:	82 23       	and	r24, r18
     31e:	93 23       	and	r25, r19
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
     324:	12 c0       	rjmp	.+36     	; 0x34a <xEventGroupSync+0x76>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     326:	a1 14       	cp	r10, r1
     328:	b1 04       	cpc	r11, r1
     32a:	61 f0       	breq	.+24     	; 0x344 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     32c:	b7 01       	movw	r22, r14
     32e:	75 60       	ori	r23, 0x05	; 5
     330:	c6 01       	movw	r24, r12
     332:	02 96       	adiw	r24, 0x02	; 2
     334:	a5 01       	movw	r20, r10
     336:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     33a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
     33e:	88 23       	and	r24, r24
     340:	49 f4       	brne	.+18     	; 0x354 <xEventGroupSync+0x80>
     342:	06 c0       	rjmp	.+12     	; 0x350 <xEventGroupSync+0x7c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     344:	f6 01       	movw	r30, r12
     346:	c0 81       	ld	r28, Z
     348:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     34a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
     34e:	1c c0       	rjmp	.+56     	; 0x388 <xEventGroupSync+0xb4>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
     350:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     354:	0e 94 69 11 	call	0x22d2	; 0x22d2 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     358:	91 fd       	sbrc	r25, 1
     35a:	14 c0       	rjmp	.+40     	; 0x384 <xEventGroupSync+0xb0>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     362:	f6 01       	movw	r30, r12
     364:	80 81       	ld	r24, Z
     366:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     368:	97 01       	movw	r18, r14
     36a:	28 23       	and	r18, r24
     36c:	39 23       	and	r19, r25
     36e:	2e 15       	cp	r18, r14
     370:	3f 05       	cpc	r19, r15
     372:	31 f4       	brne	.+12     	; 0x380 <xEventGroupSync+0xac>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     374:	20 95       	com	r18
     376:	30 95       	com	r19
     378:	28 23       	and	r18, r24
     37a:	39 23       	and	r19, r25
     37c:	31 83       	std	Z+1, r19	; 0x01
     37e:	20 83       	st	Z, r18
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     384:	ec 01       	movw	r28, r24
     386:	d0 70       	andi	r29, 0x00	; 0
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     388:	8c 2f       	mov	r24, r28
     38a:	9d 2f       	mov	r25, r29
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	bf 90       	pop	r11
     39e:	af 90       	pop	r10
     3a0:	08 95       	ret

000003a2 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     3a8:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	88 23       	and	r24, r24
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <vEventGroupDelete+0x22>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	72 e0       	ldi	r23, 0x02	; 2
     3ba:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	88 23       	and	r24, r24
     3c2:	b9 f7       	brne	.-18     	; 0x3b2 <vEventGroupDelete+0x10>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     3ca:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     3d4:	ba 01       	movw	r22, r20
     3d6:	0e 94 ef 00 	call	0x1de	; 0x1de <xEventGroupSetBits>
}
     3da:	08 95       	ret

000003dc <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     3dc:	ba 01       	movw	r22, r20
     3de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <xEventGroupClearBits>
}
     3e2:	08 95       	ret

000003e4 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
     3e4:	61 30       	cpi	r22, 0x01	; 1
     3e6:	29 f4       	brne	.+10     	; 0x3f2 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
     3e8:	e8 2f       	mov	r30, r24
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	81 83       	std	Z+1, r24	; 0x01
     3f0:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
     3f2:	66 23       	and	r22, r22
     3f4:	19 f4       	brne	.+6      	; 0x3fc <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
     3f6:	e8 2f       	mov	r30, r24
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	11 82       	std	Z+1, r1	; 0x01
     3fc:	08 95       	ret

000003fe <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
     3fe:	41 30       	cpi	r20, 0x01	; 1
     400:	79 f4       	brne	.+30     	; 0x420 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
     402:	e8 2f       	mov	r30, r24
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	21 81       	ldd	r18, Z+1	; 0x01
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	ac 01       	movw	r20, r24
     40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_Set_Pin_Direction+0x16>
     410:	44 0f       	add	r20, r20
     412:	55 1f       	adc	r21, r21
     414:	6a 95       	dec	r22
     416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_Set_Pin_Direction+0x12>
     418:	ba 01       	movw	r22, r20
     41a:	62 2b       	or	r22, r18
     41c:	61 83       	std	Z+1, r22	; 0x01
     41e:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
     420:	44 23       	and	r20, r20
     422:	79 f4       	brne	.+30     	; 0x442 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
     424:	e8 2f       	mov	r30, r24
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	21 81       	ldd	r18, Z+1	; 0x01
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	ac 01       	movw	r20, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_Set_Pin_Direction+0x38>
     432:	44 0f       	add	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_Set_Pin_Direction+0x34>
     43a:	ba 01       	movw	r22, r20
     43c:	60 95       	com	r22
     43e:	62 23       	and	r22, r18
     440:	61 83       	std	Z+1, r22	; 0x01
     442:	08 95       	ret

00000444 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
     444:	e8 2f       	mov	r30, r24
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	62 83       	std	Z+2, r22	; 0x02
}
     44a:	08 95       	ret

0000044c <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	79 f4       	brne	.+30     	; 0x46e <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
     450:	e8 2f       	mov	r30, r24
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	22 81       	ldd	r18, Z+2	; 0x02
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_Set_Pin_Value+0x16>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_Set_Pin_Value+0x12>
     466:	ba 01       	movw	r22, r20
     468:	62 2b       	or	r22, r18
     46a:	62 83       	std	Z+2, r22	; 0x02
     46c:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
     46e:	44 23       	and	r20, r20
     470:	79 f4       	brne	.+30     	; 0x490 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
     472:	e8 2f       	mov	r30, r24
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	ac 01       	movw	r20, r24
     47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_Set_Pin_Value+0x38>
     480:	44 0f       	add	r20, r20
     482:	55 1f       	adc	r21, r21
     484:	6a 95       	dec	r22
     486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_Set_Pin_Value+0x34>
     488:	ba 01       	movw	r22, r20
     48a:	60 95       	com	r22
     48c:	62 23       	and	r22, r18
     48e:	62 83       	std	Z+2, r22	; 0x02
     490:	08 95       	ret

00000492 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	0f 92       	push	r0
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
     49c:	e8 2f       	mov	r30, r24
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	89 83       	std	Y+1, r24	; 0x01
	return Value;
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9c 01       	movw	r18, r24
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_Get_Pin_value+0x1a>
     4c4:	35 95       	asr	r19
     4c6:	27 95       	ror	r18
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_Get_Pin_value+0x16>
     4cc:	b9 01       	movw	r22, r18
     4ce:	61 70       	andi	r22, 0x01	; 1
     4d0:	69 83       	std	Y+1, r22	; 0x01
	return Value;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
     4dc:	e8 2f       	mov	r30, r24
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	22 81       	ldd	r18, Z+2	; 0x02
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_Toggle_Pin+0x12>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_Toggle_Pin+0xe>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 27       	eor	r22, r18
     4f6:	62 83       	std	Z+2, r22	; 0x02
}
     4f8:	08 95       	ret

000004fa <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
     4fa:	e8 2f       	mov	r30, r24
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
     504:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
     506:	62 95       	swap	r22
     508:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
     50a:	68 27       	eor	r22, r24
     50c:	62 83       	std	Z+2, r22	; 0x02
	
} 
     50e:	08 95       	ret

00000510 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
     510:	e8 2f       	mov	r30, r24
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	6f 70       	andi	r22, 0x0F	; 15
     51e:	68 27       	eor	r22, r24
     520:	62 83       	std	Z+2, r22	; 0x02
	
}
     522:	08 95       	ret

00000524 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     52e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     532:	80 91 72 00 	lds	r24, 0x0072
     536:	88 23       	and	r24, r24
     538:	f9 f4       	brne	.+62     	; 0x578 <pvPortMalloc+0x54>
	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     53a:	8c e7       	ldi	r24, 0x7C	; 124
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 74 00 	sts	0x0074, r25
     542:	80 93 73 00 	sts	0x0073, r24
	xStart.xBlockSize = ( size_t ) 0;
     546:	10 92 76 00 	sts	0x0076, r1
     54a:	10 92 75 00 	sts	0x0075, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     54e:	8f e1       	ldi	r24, 0x1F	; 31
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	90 93 7a 00 	sts	0x007A, r25
     556:	80 93 79 00 	sts	0x0079, r24
	xEnd.pxNextFreeBlock = NULL;
     55a:	e9 e7       	ldi	r30, 0x79	; 121
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	12 92       	st	-Z, r1
     560:	12 92       	st	-Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     562:	90 93 7f 00 	sts	0x007F, r25
     566:	80 93 7e 00 	sts	0x007E, r24
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     56a:	f0 93 7d 00 	sts	0x007D, r31
     56e:	e0 93 7c 00 	sts	0x007C, r30
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 72 00 	sts	0x0072, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     578:	20 97       	sbiw	r28, 0x00	; 0
     57a:	09 f4       	brne	.+2      	; 0x57e <pvPortMalloc+0x5a>
     57c:	62 c0       	rjmp	.+196    	; 0x642 <pvPortMalloc+0x11e>
		{
			xWantedSize += heapSTRUCT_SIZE;
     57e:	9e 01       	movw	r18, r28
     580:	2c 5f       	subi	r18, 0xFC	; 252
     582:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     584:	23 96       	adiw	r28, 0x03	; 3
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	ce 31       	cpi	r28, 0x1E	; 30
     58a:	d8 07       	cpc	r29, r24
     58c:	08 f0       	brcs	.+2      	; 0x590 <pvPortMalloc+0x6c>
     58e:	5c c0       	rjmp	.+184    	; 0x648 <pvPortMalloc+0x124>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     590:	e0 91 73 00 	lds	r30, 0x0073
     594:	f0 91 74 00 	lds	r31, 0x0074

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     598:	a3 e7       	ldi	r26, 0x73	; 115
     59a:	b0 e0       	ldi	r27, 0x00	; 0
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <pvPortMalloc+0x7e>
     59e:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     5a0:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	93 81       	ldd	r25, Z+3	; 0x03
     5a6:	82 17       	cp	r24, r18
     5a8:	93 07       	cpc	r25, r19
     5aa:	20 f4       	brcc	.+8      	; 0x5b4 <pvPortMalloc+0x90>
     5ac:	80 81       	ld	r24, Z
     5ae:	91 81       	ldd	r25, Z+1	; 0x01
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	a9 f7       	brne	.-22     	; 0x59e <pvPortMalloc+0x7a>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     5b4:	c0 e0       	ldi	r28, 0x00	; 0
     5b6:	e7 37       	cpi	r30, 0x77	; 119
     5b8:	fc 07       	cpc	r31, r28
     5ba:	09 f4       	brne	.+2      	; 0x5be <pvPortMalloc+0x9a>
     5bc:	48 c0       	rjmp	.+144    	; 0x64e <pvPortMalloc+0x12a>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	11 97       	sbiw	r26, 0x01	; 1
     5c4:	8c 01       	movw	r16, r24
     5c6:	0c 5f       	subi	r16, 0xFC	; 252
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	93 81       	ldd	r25, Z+3	; 0x03
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	89 30       	cpi	r24, 0x09	; 9
     5de:	91 05       	cpc	r25, r1
     5e0:	18 f1       	brcs	.+70     	; 0x628 <pvPortMalloc+0x104>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5e2:	af 01       	movw	r20, r30
     5e4:	42 0f       	add	r20, r18
     5e6:	53 1f       	adc	r21, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5e8:	da 01       	movw	r26, r20
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	9c 93       	st	X, r25
     5ee:	8e 93       	st	-X, r24
     5f0:	12 97       	sbiw	r26, 0x02	; 2
					pxBlock->xBlockSize = xWantedSize;
     5f2:	33 83       	std	Z+3, r19	; 0x03
     5f4:	22 83       	std	Z+2, r18	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	2d 91       	ld	r18, X+
     5fa:	3c 91       	ld	r19, X
     5fc:	13 97       	sbiw	r26, 0x03	; 3
     5fe:	63 e7       	ldi	r22, 0x73	; 115
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	01 c0       	rjmp	.+2      	; 0x606 <pvPortMalloc+0xe2>
     604:	bd 01       	movw	r22, r26
     606:	eb 01       	movw	r28, r22
     608:	a8 81       	ld	r26, Y
     60a:	b9 81       	ldd	r27, Y+1	; 0x01
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	8d 91       	ld	r24, X+
     610:	9c 91       	ld	r25, X
     612:	13 97       	sbiw	r26, 0x03	; 3
     614:	82 17       	cp	r24, r18
     616:	93 07       	cpc	r25, r19
     618:	a8 f3       	brcs	.-22     	; 0x604 <pvPortMalloc+0xe0>
     61a:	ea 01       	movw	r28, r20
     61c:	b9 83       	std	Y+1, r27	; 0x01
     61e:	a8 83       	st	Y, r26
     620:	db 01       	movw	r26, r22
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	5c 93       	st	X, r21
     626:	4e 93       	st	-X, r20
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     628:	80 91 60 00 	lds	r24, 0x0060
     62c:	90 91 61 00 	lds	r25, 0x0061
     630:	22 81       	ldd	r18, Z+2	; 0x02
     632:	33 81       	ldd	r19, Z+3	; 0x03
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	90 93 61 00 	sts	0x0061, r25
     63c:	80 93 60 00 	sts	0x0060, r24
     640:	08 c0       	rjmp	.+16     	; 0x652 <pvPortMalloc+0x12e>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	05 c0       	rjmp	.+10     	; 0x652 <pvPortMalloc+0x12e>
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <pvPortMalloc+0x12e>
     64e:	00 e0       	ldi	r16, 0x00	; 0
     650:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     652:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     656:	80 2f       	mov	r24, r16
     658:	91 2f       	mov	r25, r17
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	39 f1       	breq	.+78     	; 0x6c0 <vPortFree+0x5c>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     672:	8c 01       	movw	r16, r24
     674:	04 50       	subi	r16, 0x04	; 4
     676:	10 40       	sbci	r17, 0x00	; 0

		vTaskSuspendAll();
     678:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     67c:	f8 01       	movw	r30, r16
     67e:	22 81       	ldd	r18, Z+2	; 0x02
     680:	33 81       	ldd	r19, Z+3	; 0x03
     682:	a3 e7       	ldi	r26, 0x73	; 115
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	01 c0       	rjmp	.+2      	; 0x68a <vPortFree+0x26>
     688:	df 01       	movw	r26, r30
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	11 97       	sbiw	r26, 0x01	; 1
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	82 17       	cp	r24, r18
     696:	93 07       	cpc	r25, r19
     698:	b8 f3       	brcs	.-18     	; 0x688 <vPortFree+0x24>
     69a:	24 97       	sbiw	r28, 0x04	; 4
     69c:	f9 83       	std	Y+1, r31	; 0x01
     69e:	e8 83       	st	Y, r30
     6a0:	0d 93       	st	X+, r16
     6a2:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     6a4:	80 91 60 00 	lds	r24, 0x0060
     6a8:	90 91 61 00 	lds	r25, 0x0061
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	3b 81       	ldd	r19, Y+3	; 0x03
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	90 93 61 00 	sts	0x0061, r25
     6b8:	80 93 60 00 	sts	0x0060, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     6bc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
	}
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
     6ca:	80 91 60 00 	lds	r24, 0x0060
     6ce:	90 91 61 00 	lds	r25, 0x0061
     6d2:	08 95       	ret

000006d4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     6d4:	08 95       	ret

000006d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6d6:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d8:	03 96       	adiw	r24, 0x03	; 3
     6da:	92 83       	std	Z+2, r25	; 0x02
     6dc:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	3f ef       	ldi	r19, 0xFF	; 255
     6e2:	34 83       	std	Z+4, r19	; 0x04
     6e4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6e6:	96 83       	std	Z+6, r25	; 0x06
     6e8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6ea:	90 87       	std	Z+8, r25	; 0x08
     6ec:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     6ee:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     6f0:	08 95       	ret

000006f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     6f2:	fc 01       	movw	r30, r24
     6f4:	11 86       	std	Z+9, r1	; 0x09
     6f6:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     6f8:	08 95       	ret

000006fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     700:	dc 01       	movw	r26, r24
     702:	11 96       	adiw	r26, 0x01	; 1
     704:	cd 91       	ld	r28, X+
     706:	dc 91       	ld	r29, X
     708:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     70a:	d3 83       	std	Z+3, r29	; 0x03
     70c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     70e:	2c 81       	ldd	r18, Y+4	; 0x04
     710:	3d 81       	ldd	r19, Y+5	; 0x05
     712:	35 83       	std	Z+5, r19	; 0x05
     714:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     716:	ac 81       	ldd	r26, Y+4	; 0x04
     718:	bd 81       	ldd	r27, Y+5	; 0x05
     71a:	13 96       	adiw	r26, 0x03	; 3
     71c:	7c 93       	st	X, r23
     71e:	6e 93       	st	-X, r22
     720:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     722:	7d 83       	std	Y+5, r23	; 0x05
     724:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	20 83       	st	Z, r18
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ac 01       	movw	r20, r24
     73e:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     740:	28 81       	ld	r18, Y
     742:	39 81       	ldd	r19, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	2f 3f       	cpi	r18, 0xFF	; 255
     748:	38 07       	cpc	r19, r24
     74a:	21 f4       	brne	.+8      	; 0x754 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     74c:	fa 01       	movw	r30, r20
     74e:	a7 81       	ldd	r26, Z+7	; 0x07
     750:	b0 85       	ldd	r27, Z+8	; 0x08
     752:	0d c0       	rjmp	.+26     	; 0x76e <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     754:	da 01       	movw	r26, r20
     756:	13 96       	adiw	r26, 0x03	; 3
     758:	01 c0       	rjmp	.+2      	; 0x75c <vListInsert+0x24>
     75a:	df 01       	movw	r26, r30
     75c:	12 96       	adiw	r26, 0x02	; 2
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	13 97       	sbiw	r26, 0x03	; 3
     764:	80 81       	ld	r24, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	b0 f7       	brcc	.-20     	; 0x75a <vListInsert+0x22>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	13 97       	sbiw	r26, 0x03	; 3
     776:	fb 83       	std	Y+3, r31	; 0x03
     778:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     77a:	d5 83       	std	Z+5, r29	; 0x05
     77c:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     77e:	bd 83       	std	Y+5, r27	; 0x05
     780:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     782:	13 96       	adiw	r26, 0x03	; 3
     784:	dc 93       	st	X, r29
     786:	ce 93       	st	-X, r28
     788:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     78a:	59 87       	std	Y+9, r21	; 0x09
     78c:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     78e:	fa 01       	movw	r30, r20
     790:	80 81       	ld	r24, Z
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 83       	st	Z, r24
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7a2:	c0 85       	ldd	r28, Z+8	; 0x08
     7a4:	d1 85       	ldd	r29, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7a6:	a2 81       	ldd	r26, Z+2	; 0x02
     7a8:	b3 81       	ldd	r27, Z+3	; 0x03
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	95 81       	ldd	r25, Z+5	; 0x05
     7ae:	15 96       	adiw	r26, 0x05	; 5
     7b0:	9c 93       	st	X, r25
     7b2:	8e 93       	st	-X, r24
     7b4:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7b6:	a4 81       	ldd	r26, Z+4	; 0x04
     7b8:	b5 81       	ldd	r27, Z+5	; 0x05
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	13 96       	adiw	r26, 0x03	; 3
     7c0:	9c 93       	st	X, r25
     7c2:	8e 93       	st	-X, r24
     7c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     7c6:	a9 81       	ldd	r26, Y+1	; 0x01
     7c8:	ba 81       	ldd	r27, Y+2	; 0x02
     7ca:	ae 17       	cp	r26, r30
     7cc:	bf 07       	cpc	r27, r31
     7ce:	31 f4       	brne	.+12     	; 0x7dc <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     7d0:	14 96       	adiw	r26, 0x04	; 4
     7d2:	8d 91       	ld	r24, X+
     7d4:	9c 91       	ld	r25, X
     7d6:	15 97       	sbiw	r26, 0x05	; 5
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     7dc:	11 86       	std	Z+9, r1	; 0x09
     7de:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     7e0:	88 81       	ld	r24, Y
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <Task2>:
void Task2(void* pv)
{
	while(1)
	{
		//cli();   /* Disable global interrupt */
		taskENTER_CRITICAL();
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	0f 92       	push	r0
		x++;
     7f2:	80 91 9c 03 	lds	r24, 0x039C
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	80 93 9c 03 	sts	0x039C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	91 ee       	ldi	r25, 0xE1	; 225
     800:	a4 e0       	ldi	r26, 0x04	; 4
     802:	81 50       	subi	r24, 0x01	; 1
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	a0 40       	sbci	r26, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <Task2+0x16>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <Task2+0x20>
     80c:	00 00       	nop
		_delay_ms(200);
		y++;
     80e:	80 91 9b 03 	lds	r24, 0x039B
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	80 93 9b 03 	sts	0x039B, r24
		taskEXIT_CRITICAL();
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	91 ee       	ldi	r25, 0xE1	; 225
     820:	a4 e0       	ldi	r26, 0x04	; 4
     822:	81 50       	subi	r24, 0x01	; 1
     824:	90 40       	sbci	r25, 0x00	; 0
     826:	a0 40       	sbci	r26, 0x00	; 0
     828:	e1 f7       	brne	.-8      	; 0x822 <Task2+0x36>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <Task2+0x40>
     82c:	00 00       	nop
     82e:	de cf       	rjmp	.-68     	; 0x7ec <Task2>

00000830 <Task1>:
       
    }
}
void Task1(void* pv)
{
	DIO_Set_Pin_Direction(D,0,OUTPUT);
     830:	80 e3       	ldi	r24, 0x30	; 48
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DIO_Set_Pin_Direction>
	while(1)
	{
		if (x == y)
     83a:	90 91 9c 03 	lds	r25, 0x039C
     83e:	80 91 9b 03 	lds	r24, 0x039B
     842:	98 17       	cp	r25, r24
     844:	21 f4       	brne	.+8      	; 0x84e <Task1+0x1e>
		{
			DIO_Toggle_Pin(D,0);	
     846:	80 e3       	ldi	r24, 0x30	; 48
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <DIO_Toggle_Pin>
		}
		vTaskDelay(100);  /* go to waiting state  >> 100 tick  (100ms) */
     84e:	84 e6       	ldi	r24, 0x64	; 100
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <vTaskDelay>
	}	
     856:	f1 cf       	rjmp	.-30     	; 0x83a <Task1+0xa>

00000858 <main>:

u8 x=0,y=0;

int main(void)
{
	xTaskCreate(Task1,"Ali",100,NULL,2,NULL);   /* High priority */
     858:	88 e1       	ldi	r24, 0x18	; 24
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	62 e6       	ldi	r22, 0x62	; 98
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	44 e6       	ldi	r20, 0x64	; 100
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	02 e0       	ldi	r16, 0x02	; 2
     86a:	ee 24       	eor	r14, r14
     86c:	ff 24       	eor	r15, r15
     86e:	0e 94 8d 0a 	call	0x151a	; 0x151a <xTaskCreate>
	xTaskCreate(Task2,"Morsy",100,NULL,1,NULL); /* Low Priority  */
     872:	86 ef       	ldi	r24, 0xF6	; 246
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	66 e6       	ldi	r22, 0x66	; 102
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	44 e6       	ldi	r20, 0x64	; 100
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	01 e0       	ldi	r16, 0x01	; 1
     884:	0e 94 8d 0a 	call	0x151a	; 0x151a <xTaskCreate>
	
	
	vTaskStartScheduler();
     888:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskStartScheduler>
     88c:	ff cf       	rjmp	.-2      	; 0x88c <__stack+0x2d>

0000088e <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     88e:	21 e1       	ldi	r18, 0x11	; 17
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	32 e2       	ldi	r19, 0x22	; 34
     898:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     89a:	fc 01       	movw	r30, r24
     89c:	32 97       	sbiw	r30, 0x02	; 2
     89e:	a3 e3       	ldi	r26, 0x33	; 51
     8a0:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     8a2:	fc 01       	movw	r30, r24
     8a4:	33 97       	sbiw	r30, 0x03	; 3
     8a6:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     8a8:	fc 01       	movw	r30, r24
     8aa:	34 97       	sbiw	r30, 0x04	; 4
     8ac:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     8ae:	fc 01       	movw	r30, r24
     8b0:	35 97       	sbiw	r30, 0x05	; 5
     8b2:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     8b4:	fc 01       	movw	r30, r24
     8b6:	36 97       	sbiw	r30, 0x06	; 6
     8b8:	60 e8       	ldi	r22, 0x80	; 128
     8ba:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     8bc:	fc 01       	movw	r30, r24
     8be:	37 97       	sbiw	r30, 0x07	; 7
     8c0:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     8c2:	fc 01       	movw	r30, r24
     8c4:	38 97       	sbiw	r30, 0x08	; 8
     8c6:	62 e0       	ldi	r22, 0x02	; 2
     8c8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     8ca:	fc 01       	movw	r30, r24
     8cc:	39 97       	sbiw	r30, 0x09	; 9
     8ce:	63 e0       	ldi	r22, 0x03	; 3
     8d0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     8d2:	fc 01       	movw	r30, r24
     8d4:	3a 97       	sbiw	r30, 0x0a	; 10
     8d6:	64 e0       	ldi	r22, 0x04	; 4
     8d8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     8da:	fc 01       	movw	r30, r24
     8dc:	3b 97       	sbiw	r30, 0x0b	; 11
     8de:	65 e0       	ldi	r22, 0x05	; 5
     8e0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     8e2:	fc 01       	movw	r30, r24
     8e4:	3c 97       	sbiw	r30, 0x0c	; 12
     8e6:	66 e0       	ldi	r22, 0x06	; 6
     8e8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     8ea:	fc 01       	movw	r30, r24
     8ec:	3d 97       	sbiw	r30, 0x0d	; 13
     8ee:	67 e0       	ldi	r22, 0x07	; 7
     8f0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     8f2:	fc 01       	movw	r30, r24
     8f4:	3e 97       	sbiw	r30, 0x0e	; 14
     8f6:	68 e0       	ldi	r22, 0x08	; 8
     8f8:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     8fa:	fc 01       	movw	r30, r24
     8fc:	3f 97       	sbiw	r30, 0x0f	; 15
     8fe:	69 e0       	ldi	r22, 0x09	; 9
     900:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     902:	fc 01       	movw	r30, r24
     904:	70 97       	sbiw	r30, 0x10	; 16
     906:	60 e1       	ldi	r22, 0x10	; 16
     908:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     90a:	fc 01       	movw	r30, r24
     90c:	71 97       	sbiw	r30, 0x11	; 17
     90e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     910:	fc 01       	movw	r30, r24
     912:	72 97       	sbiw	r30, 0x12	; 18
     914:	22 e1       	ldi	r18, 0x12	; 18
     916:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     918:	fc 01       	movw	r30, r24
     91a:	73 97       	sbiw	r30, 0x13	; 19
     91c:	23 e1       	ldi	r18, 0x13	; 19
     91e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     920:	fc 01       	movw	r30, r24
     922:	74 97       	sbiw	r30, 0x14	; 20
     924:	24 e1       	ldi	r18, 0x14	; 20
     926:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     928:	fc 01       	movw	r30, r24
     92a:	75 97       	sbiw	r30, 0x15	; 21
     92c:	25 e1       	ldi	r18, 0x15	; 21
     92e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     930:	fc 01       	movw	r30, r24
     932:	76 97       	sbiw	r30, 0x16	; 22
     934:	26 e1       	ldi	r18, 0x16	; 22
     936:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     938:	fc 01       	movw	r30, r24
     93a:	77 97       	sbiw	r30, 0x17	; 23
     93c:	27 e1       	ldi	r18, 0x17	; 23
     93e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     940:	fc 01       	movw	r30, r24
     942:	78 97       	sbiw	r30, 0x18	; 24
     944:	28 e1       	ldi	r18, 0x18	; 24
     946:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     948:	fc 01       	movw	r30, r24
     94a:	79 97       	sbiw	r30, 0x19	; 25
     94c:	29 e1       	ldi	r18, 0x19	; 25
     94e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     950:	fc 01       	movw	r30, r24
     952:	7a 97       	sbiw	r30, 0x1a	; 26
     954:	20 e2       	ldi	r18, 0x20	; 32
     956:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     958:	fc 01       	movw	r30, r24
     95a:	7b 97       	sbiw	r30, 0x1b	; 27
     95c:	21 e2       	ldi	r18, 0x21	; 33
     95e:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     960:	fc 01       	movw	r30, r24
     962:	7c 97       	sbiw	r30, 0x1c	; 28
     964:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     966:	fc 01       	movw	r30, r24
     968:	7d 97       	sbiw	r30, 0x1d	; 29
     96a:	23 e2       	ldi	r18, 0x23	; 35
     96c:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     96e:	fc 01       	movw	r30, r24
     970:	7e 97       	sbiw	r30, 0x1e	; 30
     972:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     974:	fc 01       	movw	r30, r24
     976:	7f 97       	sbiw	r30, 0x1f	; 31
     978:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     97a:	fc 01       	movw	r30, r24
     97c:	b0 97       	sbiw	r30, 0x20	; 32
     97e:	26 e2       	ldi	r18, 0x26	; 38
     980:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     982:	fc 01       	movw	r30, r24
     984:	b1 97       	sbiw	r30, 0x21	; 33
     986:	27 e2       	ldi	r18, 0x27	; 39
     988:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     98a:	fc 01       	movw	r30, r24
     98c:	b2 97       	sbiw	r30, 0x22	; 34
     98e:	28 e2       	ldi	r18, 0x28	; 40
     990:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     992:	fc 01       	movw	r30, r24
     994:	b3 97       	sbiw	r30, 0x23	; 35
     996:	29 e2       	ldi	r18, 0x29	; 41
     998:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     99a:	fc 01       	movw	r30, r24
     99c:	b4 97       	sbiw	r30, 0x24	; 36
     99e:	20 e3       	ldi	r18, 0x30	; 48
     9a0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     9a2:	fc 01       	movw	r30, r24
     9a4:	b5 97       	sbiw	r30, 0x25	; 37
     9a6:	21 e3       	ldi	r18, 0x31	; 49
     9a8:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     9aa:	86 97       	sbiw	r24, 0x26	; 38
}
     9ac:	08 95       	ret

000009ae <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     9ae:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
     9b0:	8c e7       	ldi	r24, 0x7C	; 124
     9b2:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     9b4:	8b e0       	ldi	r24, 0x0B	; 11
     9b6:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     9b8:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     9ba:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     9bc:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     9be:	a0 91 9d 03 	lds	r26, 0x039D
     9c2:	b0 91 9e 03 	lds	r27, 0x039E
     9c6:	cd 91       	ld	r28, X+
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	dd 91       	ld	r29, X+
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	cf 90       	pop	r12
     9f6:	bf 90       	pop	r11
     9f8:	af 90       	pop	r10
     9fa:	9f 90       	pop	r9
     9fc:	8f 90       	pop	r8
     9fe:	7f 90       	pop	r7
     a00:	6f 90       	pop	r6
     a02:	5f 90       	pop	r5
     a04:	4f 90       	pop	r4
     a06:	3f 90       	pop	r3
     a08:	2f 90       	pop	r2
     a0a:	1f 90       	pop	r1
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     a12:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	08 95       	ret

00000a18 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     a18:	08 95       	ret

00000a1a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	0f 92       	push	r0
     a22:	1f 92       	push	r1
     a24:	11 24       	eor	r1, r1
     a26:	2f 92       	push	r2
     a28:	3f 92       	push	r3
     a2a:	4f 92       	push	r4
     a2c:	5f 92       	push	r5
     a2e:	6f 92       	push	r6
     a30:	7f 92       	push	r7
     a32:	8f 92       	push	r8
     a34:	9f 92       	push	r9
     a36:	af 92       	push	r10
     a38:	bf 92       	push	r11
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	2f 93       	push	r18
     a48:	3f 93       	push	r19
     a4a:	4f 93       	push	r20
     a4c:	5f 93       	push	r21
     a4e:	6f 93       	push	r22
     a50:	7f 93       	push	r23
     a52:	8f 93       	push	r24
     a54:	9f 93       	push	r25
     a56:	af 93       	push	r26
     a58:	bf 93       	push	r27
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ef 93       	push	r30
     a60:	ff 93       	push	r31
     a62:	a0 91 9d 03 	lds	r26, 0x039D
     a66:	b0 91 9e 03 	lds	r27, 0x039E
     a6a:	0d b6       	in	r0, 0x3d	; 61
     a6c:	0d 92       	st	X+, r0
     a6e:	0e b6       	in	r0, 0x3e	; 62
     a70:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a72:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a76:	a0 91 9d 03 	lds	r26, 0x039D
     a7a:	b0 91 9e 03 	lds	r27, 0x039E
     a7e:	cd 91       	ld	r28, X+
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	dd 91       	ld	r29, X+
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	7f 91       	pop	r23
     a98:	6f 91       	pop	r22
     a9a:	5f 91       	pop	r21
     a9c:	4f 91       	pop	r20
     a9e:	3f 91       	pop	r19
     aa0:	2f 91       	pop	r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	9f 90       	pop	r9
     ab4:	8f 90       	pop	r8
     ab6:	7f 90       	pop	r7
     ab8:	6f 90       	pop	r6
     aba:	5f 90       	pop	r5
     abc:	4f 90       	pop	r4
     abe:	3f 90       	pop	r3
     ac0:	2f 90       	pop	r2
     ac2:	1f 90       	pop	r1
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     aca:	08 95       	ret

00000acc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	0f 92       	push	r0
     ad4:	1f 92       	push	r1
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 92       	push	r2
     ada:	3f 92       	push	r3
     adc:	4f 92       	push	r4
     ade:	5f 92       	push	r5
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	a0 91 9d 03 	lds	r26, 0x039D
     b18:	b0 91 9e 03 	lds	r27, 0x039E
     b1c:	0d b6       	in	r0, 0x3d	; 61
     b1e:	0d 92       	st	X+, r0
     b20:	0e b6       	in	r0, 0x3e	; 62
     b22:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     b24:	0e 94 76 0d 	call	0x1aec	; 0x1aec <xTaskIncrementTick>
     b28:	88 23       	and	r24, r24
     b2a:	11 f0       	breq	.+4      	; 0xb30 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     b2c:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     b30:	a0 91 9d 03 	lds	r26, 0x039D
     b34:	b0 91 9e 03 	lds	r27, 0x039E
     b38:	cd 91       	ld	r28, X+
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	dd 91       	ld	r29, X+
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	9f 90       	pop	r9
     b6e:	8f 90       	pop	r8
     b70:	7f 90       	pop	r7
     b72:	6f 90       	pop	r6
     b74:	5f 90       	pop	r5
     b76:	4f 90       	pop	r4
     b78:	3f 90       	pop	r3
     b7a:	2f 90       	pop	r2
     b7c:	1f 90       	pop	r1
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b84:	08 95       	ret

00000b86 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     b86:	0e 94 66 05 	call	0xacc	; 0xacc <vPortYieldFromTick>
		asm volatile ( "reti" );
     b8a:	18 95       	reti

00000b8c <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     b92:	fc 01       	movw	r30, r24
     b94:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63

	taskENTER_CRITICAL();
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
		{
			xReturn = pdTRUE;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	91 11       	cpse	r25, r1
     b9e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();

	return xReturn;
}
     ba0:	08 95       	ret

00000ba2 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     ba2:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     ba4:	44 8d       	ldd	r20, Z+28	; 0x1c
     ba6:	44 23       	and	r20, r20
     ba8:	c1 f0       	breq	.+48     	; 0xbda <prvCopyDataFromQueue+0x38>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     baa:	26 81       	ldd	r18, Z+6	; 0x06
     bac:	37 81       	ldd	r19, Z+7	; 0x07
     bae:	24 0f       	add	r18, r20
     bb0:	31 1d       	adc	r19, r1
     bb2:	37 83       	std	Z+7, r19	; 0x07
     bb4:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     bb6:	a2 81       	ldd	r26, Z+2	; 0x02
     bb8:	b3 81       	ldd	r27, Z+3	; 0x03
     bba:	2a 17       	cp	r18, r26
     bbc:	3b 07       	cpc	r19, r27
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <prvCopyDataFromQueue+0x26>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     bc0:	20 81       	ld	r18, Z
     bc2:	31 81       	ldd	r19, Z+1	; 0x01
     bc4:	37 83       	std	Z+7, r19	; 0x07
     bc6:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     bc8:	36 81       	ldd	r19, Z+6	; 0x06
     bca:	27 81       	ldd	r18, Z+7	; 0x07
     bcc:	86 2f       	mov	r24, r22
     bce:	97 2f       	mov	r25, r23
     bd0:	63 2f       	mov	r22, r19
     bd2:	72 2f       	mov	r23, r18
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <memcpy>
     bda:	08 95       	ret

00000bdc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	8c 01       	movw	r16, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     bee:	fc 01       	movw	r30, r24
     bf0:	c6 8d       	ldd	r28, Z+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     bf2:	1c 16       	cp	r1, r28
     bf4:	cc f4       	brge	.+50     	; 0xc28 <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     bf6:	81 89       	ldd	r24, Z+17	; 0x11
     bf8:	88 23       	and	r24, r24
     bfa:	31 f4       	brne	.+12     	; 0xc08 <prvUnlockQueue+0x2c>
     bfc:	15 c0       	rjmp	.+42     	; 0xc28 <prvUnlockQueue+0x4c>
     bfe:	f8 01       	movw	r30, r16
     c00:	81 89       	ldd	r24, Z+17	; 0x11
     c02:	88 23       	and	r24, r24
     c04:	41 f4       	brne	.+16     	; 0xc16 <prvUnlockQueue+0x3a>
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     c08:	0f 2e       	mov	r0, r31
     c0a:	f1 e1       	ldi	r31, 0x11	; 17
     c0c:	ef 2e       	mov	r14, r31
     c0e:	ff 24       	eor	r15, r15
     c10:	f0 2d       	mov	r31, r0
     c12:	e0 0e       	add	r14, r16
     c14:	f1 1e       	adc	r15, r17
     c16:	c7 01       	movw	r24, r14
     c18:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
     c1c:	88 23       	and	r24, r24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <prvUnlockQueue+0x48>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     c20:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     c24:	c1 50       	subi	r28, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     c26:	59 f7       	brne	.-42     	; 0xbfe <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	f8 01       	movw	r30, r16
     c2c:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     c38:	f8 01       	movw	r30, r16
     c3a:	c5 8d       	ldd	r28, Z+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c3c:	1c 16       	cp	r1, r28
     c3e:	c4 f4       	brge	.+48     	; 0xc70 <prvUnlockQueue+0x94>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c40:	80 85       	ldd	r24, Z+8	; 0x08
     c42:	88 23       	and	r24, r24
     c44:	31 f4       	brne	.+12     	; 0xc52 <prvUnlockQueue+0x76>
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <prvUnlockQueue+0x94>
     c48:	f8 01       	movw	r30, r16
     c4a:	80 85       	ldd	r24, Z+8	; 0x08
     c4c:	88 23       	and	r24, r24
     c4e:	39 f4       	brne	.+14     	; 0xc5e <prvUnlockQueue+0x82>
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c52:	ee 24       	eor	r14, r14
     c54:	ff 24       	eor	r15, r15
     c56:	68 94       	set
     c58:	e3 f8       	bld	r14, 3
     c5a:	e0 0e       	add	r14, r16
     c5c:	f1 1e       	adc	r15, r17
     c5e:	c7 01       	movw	r24, r14
     c60:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
     c64:	88 23       	and	r24, r24
     c66:	11 f0       	breq	.+4      	; 0xc6c <prvUnlockQueue+0x90>
				{
					vTaskMissedYield();
     c68:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     c6c:	c1 50       	subi	r28, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     c6e:	61 f7       	brne	.-40     	; 0xc48 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	f8 01       	movw	r30, r16
     c74:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
}
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	08 95       	ret

00000c86 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	14 2f       	mov	r17, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c92:	0a 8d       	ldd	r16, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     c94:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c96:	44 23       	and	r20, r20
     c98:	61 f4       	brne	.+24     	; 0xcb2 <prvCopyDataToQueue+0x2c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c9a:	88 81       	ld	r24, Y
     c9c:	99 81       	ldd	r25, Y+1	; 0x01
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	09 f0       	breq	.+2      	; 0xca4 <prvCopyDataToQueue+0x1e>
     ca2:	42 c0       	rjmp	.+132    	; 0xd28 <prvCopyDataToQueue+0xa2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	9b 81       	ldd	r25, Y+3	; 0x03
     ca8:	0e 94 28 11 	call	0x2250	; 0x2250 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     cac:	1b 82       	std	Y+3, r1	; 0x03
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	42 c0       	rjmp	.+132    	; 0xd36 <prvCopyDataToQueue+0xb0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     cb2:	11 23       	and	r17, r17
     cb4:	b9 f4       	brne	.+46     	; 0xce4 <prvCopyDataToQueue+0x5e>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     cc0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	82 0f       	add	r24, r18
     cc8:	91 1d       	adc	r25, r1
     cca:	9d 83       	std	Y+5, r25	; 0x05
     ccc:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     cce:	2a 81       	ldd	r18, Y+2	; 0x02
     cd0:	3b 81       	ldd	r19, Y+3	; 0x03
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	50 f1       	brcs	.+84     	; 0xd2c <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     cd8:	88 81       	ld	r24, Y
     cda:	99 81       	ldd	r25, Y+1	; 0x01
     cdc:	9d 83       	std	Y+5, r25	; 0x05
     cde:	8c 83       	std	Y+4, r24	; 0x04
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	29 c0       	rjmp	.+82     	; 0xd36 <prvCopyDataToQueue+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     cee:	4c 8d       	ldd	r20, Y+28	; 0x1c
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	50 95       	com	r21
     cf4:	41 95       	neg	r20
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	8e 81       	ldd	r24, Y+6	; 0x06
     cfa:	9f 81       	ldd	r25, Y+7	; 0x07
     cfc:	84 0f       	add	r24, r20
     cfe:	95 1f       	adc	r25, r21
     d00:	9f 83       	std	Y+7, r25	; 0x07
     d02:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     d04:	28 81       	ld	r18, Y
     d06:	39 81       	ldd	r19, Y+1	; 0x01
     d08:	82 17       	cp	r24, r18
     d0a:	93 07       	cpc	r25, r19
     d0c:	30 f4       	brcc	.+12     	; 0xd1a <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	84 0f       	add	r24, r20
     d14:	95 1f       	adc	r25, r21
     d16:	9f 83       	std	Y+7, r25	; 0x07
     d18:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     d1a:	12 30       	cpi	r17, 0x02	; 2
     d1c:	49 f4       	brne	.+18     	; 0xd30 <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     d1e:	00 23       	and	r16, r16
     d20:	49 f0       	breq	.+18     	; 0xd34 <prvCopyDataToQueue+0xae>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     d22:	01 50       	subi	r16, 0x01	; 1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	07 c0       	rjmp	.+14     	; 0xd36 <prvCopyDataToQueue+0xb0>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <prvCopyDataToQueue+0xb0>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <prvCopyDataToQueue+0xb0>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <prvCopyDataToQueue+0xb0>
     d34:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     d36:	0f 5f       	subi	r16, 0xFF	; 255
     d38:	0a 8f       	std	Y+26, r16	; 0x1a

	return xReturn;
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d50:	48 81       	ld	r20, Y
     d52:	59 81       	ldd	r21, Y+1	; 0x01
     d54:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	2e 9f       	mul	r18, r30
     d5e:	c0 01       	movw	r24, r0
     d60:	2f 9f       	mul	r18, r31
     d62:	90 0d       	add	r25, r0
     d64:	3e 9f       	mul	r19, r30
     d66:	90 0d       	add	r25, r0
     d68:	11 24       	eor	r1, r1
     d6a:	84 0f       	add	r24, r20
     d6c:	95 1f       	adc	r25, r21
     d6e:	9b 83       	std	Y+3, r25	; 0x03
     d70:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     d72:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     d74:	5d 83       	std	Y+5, r21	; 0x05
     d76:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     d78:	c9 01       	movw	r24, r18
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	e8 9f       	mul	r30, r24
     d7e:	90 01       	movw	r18, r0
     d80:	e9 9f       	mul	r30, r25
     d82:	30 0d       	add	r19, r0
     d84:	f8 9f       	mul	r31, r24
     d86:	30 0d       	add	r19, r0
     d88:	11 24       	eor	r1, r1
     d8a:	24 0f       	add	r18, r20
     d8c:	35 1f       	adc	r19, r21
     d8e:	3f 83       	std	Y+7, r19	; 0x07
     d90:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
     d96:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     d98:	66 23       	and	r22, r22
     d9a:	61 f4       	brne	.+24     	; 0xdb4 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d9c:	88 85       	ldd	r24, Y+8	; 0x08
     d9e:	88 23       	and	r24, r24
     da0:	89 f0       	breq	.+34     	; 0xdc4 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     da2:	ce 01       	movw	r24, r28
     da4:	08 96       	adiw	r24, 0x08	; 8
     da6:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
     daa:	88 23       	and	r24, r24
     dac:	59 f0       	breq	.+22     	; 0xdc4 <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
     dae:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     db4:	ce 01       	movw	r24, r28
     db6:	08 96       	adiw	r24, 0x08	; 8
     db8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     dbc:	ce 01       	movw	r24, r28
     dbe:	41 96       	adiw	r24, 0x11	; 17
     dc0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	08 2f       	mov	r16, r24
     dda:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
     ddc:	66 23       	and	r22, r22
     dde:	21 f0       	breq	.+8      	; 0xde8 <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     de0:	68 9f       	mul	r22, r24
     de2:	c0 01       	movw	r24, r0
     de4:	11 24       	eor	r1, r1
     de6:	02 c0       	rjmp	.+4      	; 0xdec <xQueueGenericCreate+0x1c>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     dec:	4f 96       	adiw	r24, 0x1f	; 31
     dee:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
     df2:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	71 f0       	breq	.+28     	; 0xe14 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     df8:	11 23       	and	r17, r17
     dfa:	19 f4       	brne	.+6      	; 0xe02 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     dfc:	99 83       	std	Y+1, r25	; 0x01
     dfe:	88 83       	st	Y, r24
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <xQueueGenericCreate+0x38>

		if( pxNewQueue != NULL )
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     e02:	4f 96       	adiw	r24, 0x1f	; 31
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     e04:	99 83       	std	Y+1, r25	; 0x01
     e06:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     e08:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
     e0a:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e0c:	ce 01       	movw	r24, r28
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	0e 94 a2 06 	call	0xd44	; 0xd44 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
     e14:	8c 2f       	mov	r24, r28
     e16:	9d 2f       	mov	r25, r29
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     e22:	8f 92       	push	r8
     e24:	9f 92       	push	r9
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	00 d0       	rcall	.+0      	; 0xe3a <xQueueGenericSend+0x18>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <xQueueGenericSend+0x1a>
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	8c 01       	movw	r16, r24
     e44:	4b 01       	movw	r8, r22
     e46:	5d 83       	std	Y+5, r21	; 0x05
     e48:	4c 83       	std	Y+4, r20	; 0x04
     e4a:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     e4c:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
     e4e:	bb 24       	eor	r11, r11
     e50:	b3 94       	inc	r11
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e52:	cc 24       	eor	r12, r12
     e54:	dd 24       	eor	r13, r13
     e56:	68 94       	set
     e58:	c3 f8       	bld	r12, 3
     e5a:	c8 0e       	add	r12, r24
     e5c:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     e64:	f8 01       	movw	r30, r16
     e66:	92 8d       	ldd	r25, Z+26	; 0x1a
     e68:	83 8d       	ldd	r24, Z+27	; 0x1b
     e6a:	98 17       	cp	r25, r24
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <xQueueGenericSend+0x52>
     e6e:	f2 e0       	ldi	r31, 0x02	; 2
     e70:	ef 16       	cp	r14, r31
     e72:	d1 f4       	brne	.+52     	; 0xea8 <xQueueGenericSend+0x86>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     e74:	c8 01       	movw	r24, r16
     e76:	b4 01       	movw	r22, r8
     e78:	4e 2d       	mov	r20, r14
     e7a:	0e 94 43 06 	call	0xc86	; 0xc86 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e7e:	f8 01       	movw	r30, r16
     e80:	91 89       	ldd	r25, Z+17	; 0x11
     e82:	99 23       	and	r25, r25
     e84:	49 f0       	breq	.+18     	; 0xe98 <xQueueGenericSend+0x76>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e86:	c8 01       	movw	r24, r16
     e88:	41 96       	adiw	r24, 0x11	; 17
     e8a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
     e8e:	88 23       	and	r24, r24
     e90:	39 f0       	breq	.+14     	; 0xea0 <xQueueGenericSend+0x7e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     e92:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <xQueueGenericSend+0x7e>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     e98:	88 23       	and	r24, r24
     e9a:	11 f0       	breq	.+4      	; 0xea0 <xQueueGenericSend+0x7e>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     e9c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	52 c0       	rjmp	.+164    	; 0xf4c <xQueueGenericSend+0x12a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	21 f4       	brne	.+8      	; 0xeb8 <xQueueGenericSend+0x96>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	4a c0       	rjmp	.+148    	; 0xf4c <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
     eb8:	ff 20       	and	r15, r15
     eba:	29 f4       	brne	.+10     	; 0xec6 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 81 10 	call	0x2102	; 0x2102 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     ec4:	fb 2c       	mov	r15, r11
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     eca:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	0f 92       	push	r0
     ed4:	f8 01       	movw	r30, r16
     ed6:	85 8d       	ldd	r24, Z+29	; 0x1d
     ed8:	8f 3f       	cpi	r24, 0xFF	; 255
     eda:	09 f4       	brne	.+2      	; 0xede <xQueueGenericSend+0xbc>
     edc:	15 8e       	std	Z+29, r1	; 0x1d
     ede:	f8 01       	movw	r30, r16
     ee0:	86 8d       	ldd	r24, Z+30	; 0x1e
     ee2:	8f 3f       	cpi	r24, 0xFF	; 255
     ee4:	09 f4       	brne	.+2      	; 0xee8 <xQueueGenericSend+0xc6>
     ee6:	16 8e       	std	Z+30, r1	; 0x1e
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	be 01       	movw	r22, r28
     ef2:	6c 5f       	subi	r22, 0xFC	; 252
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	0e 94 8c 10 	call	0x2118	; 0x2118 <xTaskCheckForTimeOut>
     efa:	88 23       	and	r24, r24
     efc:	09 f5       	brne	.+66     	; 0xf40 <xQueueGenericSend+0x11e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     f04:	f8 01       	movw	r30, r16
     f06:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     f0c:	f8 01       	movw	r30, r16
     f0e:	83 8d       	ldd	r24, Z+27	; 0x1b
     f10:	98 17       	cp	r25, r24
     f12:	81 f4       	brne	.+32     	; 0xf34 <xQueueGenericSend+0x112>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     f14:	6c 81       	ldd	r22, Y+4	; 0x04
     f16:	7d 81       	ldd	r23, Y+5	; 0x05
     f18:	c6 01       	movw	r24, r12
     f1a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     f1e:	c8 01       	movw	r24, r16
     f20:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     f24:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
     f28:	88 23       	and	r24, r24
     f2a:	09 f0       	breq	.+2      	; 0xf2e <xQueueGenericSend+0x10c>
     f2c:	98 cf       	rjmp	.-208    	; 0xe5e <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
     f2e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
     f32:	95 cf       	rjmp	.-214    	; 0xe5e <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
     f3a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
     f3e:	8f cf       	rjmp	.-226    	; 0xe5e <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     f40:	c8 01       	movw	r24, r16
     f42:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
     f46:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	bf 90       	pop	r11
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	08 95       	ret

00000f6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	48 2f       	mov	r20, r24
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xQueueGenericCreate>
     f7c:	ec 01       	movw	r28, r24

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
		if( pxNewQueue != NULL )
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	61 f0       	breq	.+24     	; 0xf9a <xQueueCreateMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     f82:	1b 82       	std	Y+3, r1	; 0x03
     f84:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     f86:	19 82       	std	Y+1, r1	; 0x01
     f88:	18 82       	st	Y, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
     f8a:	1e 82       	std	Y+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	0e 94 11 07 	call	0xe22	; 0xe22 <xQueueGenericSend>

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
		prvInitialiseMutex( pxNewQueue );

		return pxNewQueue;
	}
     f9a:	8c 2f       	mov	r24, r28
     f9c:	9d 2f       	mov	r25, r29
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	8c 01       	movw	r16, r24
     fb0:	7a 01       	movw	r14, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     fb2:	fc 01       	movw	r30, r24
     fb4:	92 8d       	ldd	r25, Z+26	; 0x1a
     fb6:	83 8d       	ldd	r24, Z+27	; 0x1b
     fb8:	98 17       	cp	r25, r24
     fba:	10 f0       	brcs	.+4      	; 0xfc0 <xQueueGenericSendFromISR+0x1c>
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	f1 f4       	brne	.+60     	; 0xffc <xQueueGenericSendFromISR+0x58>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
     fc0:	f8 01       	movw	r30, r16
     fc2:	c6 8d       	ldd	r28, Z+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     fc4:	c8 01       	movw	r24, r16
     fc6:	42 2f       	mov	r20, r18
     fc8:	0e 94 43 06 	call	0xc86	; 0xc86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
     fcc:	cf 3f       	cpi	r28, 0xFF	; 255
     fce:	89 f4       	brne	.+34     	; 0xff2 <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     fd0:	f8 01       	movw	r30, r16
     fd2:	81 89       	ldd	r24, Z+17	; 0x11
     fd4:	88 23       	and	r24, r24
     fd6:	a1 f0       	breq	.+40     	; 0x1000 <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     fd8:	c8 01       	movw	r24, r16
     fda:	41 96       	adiw	r24, 0x11	; 17
     fdc:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
     fe0:	88 23       	and	r24, r24
     fe2:	81 f0       	breq	.+32     	; 0x1004 <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     fe4:	e1 14       	cp	r14, r1
     fe6:	f1 04       	cpc	r15, r1
     fe8:	79 f0       	breq	.+30     	; 0x1008 <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	f7 01       	movw	r30, r14
     fee:	80 83       	st	Z, r24
     ff0:	0c c0       	rjmp	.+24     	; 0x100a <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     ff2:	cf 5f       	subi	r28, 0xFF	; 255
     ff4:	f8 01       	movw	r30, r16
     ff6:	c6 8f       	std	Z+30, r28	; 0x1e
			}

			xReturn = pdPASS;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	03 c0       	rjmp	.+6      	; 0x100a <xQueueGenericSendFromISR+0x66>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	01 c0       	rjmp	.+2      	; 0x100a <xQueueGenericSendFromISR+0x66>
    1008:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	fc 01       	movw	r30, r24
    101c:	eb 01       	movw	r28, r22
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    101e:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    1020:	93 8d       	ldd	r25, Z+27	; 0x1b
    1022:	89 17       	cp	r24, r25
    1024:	b8 f4       	brcc	.+46     	; 0x1054 <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1026:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    102c:	9f 3f       	cpi	r25, 0xFF	; 255
    102e:	71 f4       	brne	.+28     	; 0x104c <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1030:	81 89       	ldd	r24, Z+17	; 0x11
    1032:	88 23       	and	r24, r24
    1034:	89 f0       	breq	.+34     	; 0x1058 <xQueueGiveFromISR+0x42>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1036:	cf 01       	movw	r24, r30
    1038:	41 96       	adiw	r24, 0x11	; 17
    103a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
    103e:	88 23       	and	r24, r24
    1040:	69 f0       	breq	.+26     	; 0x105c <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1042:	20 97       	sbiw	r28, 0x00	; 0
    1044:	69 f0       	breq	.+26     	; 0x1060 <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	88 83       	st	Y, r24
    104a:	0b c0       	rjmp	.+22     	; 0x1062 <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    104c:	9f 5f       	subi	r25, 0xFF	; 255
    104e:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <xQueueGiveFromISR+0x4c>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <xQueueGiveFromISR+0x4c>
    1060:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	00 d0       	rcall	.+0      	; 0x1082 <xQueueGenericReceive+0x1a>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <xQueueGenericReceive+0x1c>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	7c 01       	movw	r14, r24
    108c:	4b 01       	movw	r8, r22
    108e:	5d 83       	std	Y+5, r21	; 0x05
    1090:	4c 83       	std	Y+4, r20	; 0x04
    1092:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1094:	00 e0       	ldi	r16, 0x00	; 0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1096:	dd 24       	eor	r13, r13
    1098:	d3 94       	inc	r13
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    109a:	0f 2e       	mov	r0, r31
    109c:	f1 e1       	ldi	r31, 0x11	; 17
    109e:	af 2e       	mov	r10, r31
    10a0:	bb 24       	eor	r11, r11
    10a2:	f0 2d       	mov	r31, r0
    10a4:	a8 0e       	add	r10, r24
    10a6:	b9 1e       	adc	r11, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    10ae:	f7 01       	movw	r30, r14
    10b0:	12 8d       	ldd	r17, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    10b2:	11 23       	and	r17, r17
    10b4:	99 f1       	breq	.+102    	; 0x111c <xQueueGenericReceive+0xb4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    10b6:	a6 80       	ldd	r10, Z+6	; 0x06
    10b8:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    10ba:	c7 01       	movw	r24, r14
    10bc:	b4 01       	movw	r22, r8
    10be:	0e 94 d1 05 	call	0xba2	; 0xba2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    10c2:	cc 20       	and	r12, r12
    10c4:	c9 f4       	brne	.+50     	; 0x10f8 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    10c6:	11 50       	subi	r17, 0x01	; 1
    10c8:	f7 01       	movw	r30, r14
    10ca:	12 8f       	std	Z+26, r17	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	29 f4       	brne	.+10     	; 0x10de <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    10d4:	0e 94 81 11 	call	0x2302	; 0x2302 <pvTaskIncrementMutexHeldCount>
    10d8:	f7 01       	movw	r30, r14
    10da:	93 83       	std	Z+3, r25	; 0x03
    10dc:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    10de:	f7 01       	movw	r30, r14
    10e0:	80 85       	ldd	r24, Z+8	; 0x08
    10e2:	88 23       	and	r24, r24
    10e4:	b9 f0       	breq	.+46     	; 0x1114 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    10e6:	c7 01       	movw	r24, r14
    10e8:	08 96       	adiw	r24, 0x08	; 8
    10ea:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
    10ee:	88 23       	and	r24, r24
    10f0:	89 f0       	breq	.+34     	; 0x1114 <xQueueGenericReceive+0xac>
						{
							queueYIELD_IF_USING_PREEMPTION();
    10f2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    10f6:	0e c0       	rjmp	.+28     	; 0x1114 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    10f8:	f7 01       	movw	r30, r14
    10fa:	b7 82       	std	Z+7, r11	; 0x07
    10fc:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10fe:	81 89       	ldd	r24, Z+17	; 0x11
    1100:	88 23       	and	r24, r24
    1102:	41 f0       	breq	.+16     	; 0x1114 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1104:	c7 01       	movw	r24, r14
    1106:	41 96       	adiw	r24, 0x11	; 17
    1108:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
    110c:	88 23       	and	r24, r24
    110e:	11 f0       	breq	.+4      	; 0x1114 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1110:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	61 c0       	rjmp	.+194    	; 0x11de <xQueueGenericReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	21 f4       	brne	.+8      	; 0x112c <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	59 c0       	rjmp	.+178    	; 0x11de <xQueueGenericReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
    112c:	00 23       	and	r16, r16
    112e:	29 f4       	brne	.+10     	; 0x113a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 81 10 	call	0x2102	; 0x2102 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1138:	0d 2d       	mov	r16, r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    113e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	0f 92       	push	r0
    1148:	f7 01       	movw	r30, r14
    114a:	85 8d       	ldd	r24, Z+29	; 0x1d
    114c:	8f 3f       	cpi	r24, 0xFF	; 255
    114e:	09 f4       	brne	.+2      	; 0x1152 <xQueueGenericReceive+0xea>
    1150:	15 8e       	std	Z+29, r1	; 0x1d
    1152:	f7 01       	movw	r30, r14
    1154:	86 8d       	ldd	r24, Z+30	; 0x1e
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	09 f4       	brne	.+2      	; 0x115c <xQueueGenericReceive+0xf4>
    115a:	16 8e       	std	Z+30, r1	; 0x1e
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	be 01       	movw	r22, r28
    1166:	6c 5f       	subi	r22, 0xFC	; 252
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	0e 94 8c 10 	call	0x2118	; 0x2118 <xTaskCheckForTimeOut>
    116e:	88 23       	and	r24, r24
    1170:	51 f5       	brne	.+84     	; 0x11c6 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1172:	c7 01       	movw	r24, r14
    1174:	0e 94 c6 05 	call	0xb8c	; 0xb8c <prvIsQueueEmpty>
    1178:	88 23       	and	r24, r24
    117a:	f9 f0       	breq	.+62     	; 0x11ba <xQueueGenericReceive+0x152>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    117c:	f7 01       	movw	r30, r14
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	51 f4       	brne	.+20     	; 0x119a <xQueueGenericReceive+0x132>
					{
						taskENTER_CRITICAL();
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    118c:	f7 01       	movw	r30, r14
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	93 81       	ldd	r25, Z+3	; 0x03
    1192:	0e 94 ca 10 	call	0x2194	; 0x2194 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    119a:	6c 81       	ldd	r22, Y+4	; 0x04
    119c:	7d 81       	ldd	r23, Y+5	; 0x05
    119e:	c5 01       	movw	r24, r10
    11a0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    11a4:	c7 01       	movw	r24, r14
    11a6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    11aa:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
    11ae:	88 23       	and	r24, r24
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <xQueueGenericReceive+0x14c>
    11b2:	7a cf       	rjmp	.-268    	; 0x10a8 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
    11b4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    11b8:	77 cf       	rjmp	.-274    	; 0x10a8 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11ba:	c7 01       	movw	r24, r14
    11bc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11c0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
    11c4:	71 cf       	rjmp	.-286    	; 0x10a8 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11c6:	c7 01       	movw	r24, r14
    11c8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11cc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11d0:	c7 01       	movw	r24, r14
    11d2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <prvIsQueueEmpty>
    11d6:	88 23       	and	r24, r24
    11d8:	09 f4       	brne	.+2      	; 0x11dc <xQueueGenericReceive+0x174>
    11da:	66 cf       	rjmp	.-308    	; 0x10a8 <xQueueGenericReceive+0x40>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    11dc:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	8f 90       	pop	r8
    1200:	08 95       	ret

00001202 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	8c 01       	movw	r16, r24
    1210:	7a 01       	movw	r14, r20
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1212:	fc 01       	movw	r30, r24
    1214:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1216:	cc 23       	and	r28, r28
    1218:	e9 f0       	breq	.+58     	; 0x1254 <xQueueReceiveFromISR+0x52>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    121a:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    121c:	0e 94 d1 05 	call	0xba2	; 0xba2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1220:	c1 50       	subi	r28, 0x01	; 1
    1222:	f8 01       	movw	r30, r16
    1224:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1226:	df 3f       	cpi	r29, 0xFF	; 255
    1228:	81 f4       	brne	.+32     	; 0x124a <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    122a:	80 85       	ldd	r24, Z+8	; 0x08
    122c:	88 23       	and	r24, r24
    122e:	a1 f0       	breq	.+40     	; 0x1258 <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1230:	c8 01       	movw	r24, r16
    1232:	08 96       	adiw	r24, 0x08	; 8
    1234:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskRemoveFromEventList>
    1238:	88 23       	and	r24, r24
    123a:	81 f0       	breq	.+32     	; 0x125c <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    123c:	e1 14       	cp	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	79 f0       	breq	.+30     	; 0x1260 <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	f7 01       	movw	r30, r14
    1246:	80 83       	st	Z, r24
    1248:	0c c0       	rjmp	.+24     	; 0x1262 <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    124a:	df 5f       	subi	r29, 0xFF	; 255
    124c:	f8 01       	movw	r30, r16
    124e:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <xQueueReceiveFromISR+0x60>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <xQueueReceiveFromISR+0x60>
    1260:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	08 95       	ret

00001270 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    127a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    127c:	88 23       	and	r24, r24
    127e:	49 f0       	breq	.+18     	; 0x1292 <xQueuePeekFromISR+0x22>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1280:	0e 81       	ldd	r16, Y+6	; 0x06
    1282:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 d1 05 	call	0xba2	; 0xba2 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    128a:	1f 83       	std	Y+7, r17	; 0x07
    128c:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    1292:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12a4:	fc 01       	movw	r30, r24
    12a6:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12ac:	08 95       	ret

000012ae <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    12ae:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12b6:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12bc:	83 8d       	ldd	r24, Z+27	; 0x1b
	}
	taskEXIT_CRITICAL();

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12be:	89 1b       	sub	r24, r25
    12c0:	08 95       	ret

000012c2 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12c2:	fc 01       	movw	r30, r24
    12c4:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12c6:	08 95       	ret

000012c8 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    12c8:	fc 01       	movw	r30, r24
    12ca:	92 8d       	ldd	r25, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	91 11       	cpse	r25, r1
    12d0:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12d2:	08 95       	ret

000012d4 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    12d4:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    12d6:	22 8d       	ldd	r18, Z+26	; 0x1a
	{
		xReturn = pdTRUE;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	93 8d       	ldd	r25, Z+27	; 0x1b
    12dc:	29 13       	cpse	r18, r25
    12de:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    12e0:	08 95       	ret

000012e2 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    12e2:	dc 01       	movw	r26, r24

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    12e4:	80 91 0c 04 	lds	r24, 0x040C
    12e8:	90 91 0d 04 	lds	r25, 0x040D
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	51 f0       	breq	.+20     	; 0x1304 <vQueueAddToRegistry+0x22>
    12f0:	e0 e1       	ldi	r30, 0x10	; 16
    12f2:	f4 e0       	ldi	r31, 0x04	; 4
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	a9 01       	movw	r20, r18
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	79 f4       	brne	.+30     	; 0x1320 <vQueueAddToRegistry+0x3e>
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vQueueAddToRegistry+0x26>
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    1308:	fa 01       	movw	r30, r20
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	e4 5f       	subi	r30, 0xF4	; 244
    1314:	fb 4f       	sbci	r31, 0xFB	; 251
    1316:	71 83       	std	Z+1, r23	; 0x01
    1318:	60 83       	st	Z, r22
				xQueueRegistry[ ux ].xHandle = xQueue;
    131a:	b3 83       	std	Z+3, r27	; 0x03
    131c:	a2 83       	std	Z+2, r26	; 0x02

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    131e:	08 95       	ret
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1326:	28 30       	cpi	r18, 0x08	; 8
    1328:	31 05       	cpc	r19, r1
    132a:	31 f7       	brne	.-52     	; 0x12f8 <vQueueAddToRegistry+0x16>
    132c:	08 95       	ret

0000132e <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    132e:	ac 01       	movw	r20, r24

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1330:	80 91 0e 04 	lds	r24, 0x040E
    1334:	90 91 0f 04 	lds	r25, 0x040F
    1338:	84 17       	cp	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	59 f0       	breq	.+22     	; 0x1354 <pcQueueGetName+0x26>
    133e:	e2 e1       	ldi	r30, 0x12	; 18
    1340:	f4 e0       	ldi	r31, 0x04	; 4
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	b9 01       	movw	r22, r18
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	84 17       	cp	r24, r20
    134e:	95 07       	cpc	r25, r21
    1350:	69 f4       	brne	.+26     	; 0x136c <pcQueueGetName+0x3e>
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <pcQueueGetName+0x2a>
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	70 e0       	ldi	r23, 0x00	; 0
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    1358:	fb 01       	movw	r30, r22
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	e4 5f       	subi	r30, 0xF4	; 244
    1364:	fb 4f       	sbci	r31, 0xFB	; 251
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
				break;
    136a:	08 95       	ret
    136c:	2f 5f       	subi	r18, 0xFF	; 255
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	34 96       	adiw	r30, 0x04	; 4
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    1372:	28 30       	cpi	r18, 0x08	; 8
    1374:	31 05       	cpc	r19, r1
    1376:	39 f7       	brne	.-50     	; 0x1346 <pcQueueGetName+0x18>
#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
    137c:	08 95       	ret

0000137e <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    137e:	ac 01       	movw	r20, r24

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1380:	80 91 0e 04 	lds	r24, 0x040E
    1384:	90 91 0f 04 	lds	r25, 0x040F
    1388:	84 17       	cp	r24, r20
    138a:	95 07       	cpc	r25, r21
    138c:	59 f0       	breq	.+22     	; 0x13a4 <vQueueUnregisterQueue+0x26>
    138e:	e2 e1       	ldi	r30, 0x12	; 18
    1390:	f4 e0       	ldi	r31, 0x04	; 4
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	b9 01       	movw	r22, r18
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	84 17       	cp	r24, r20
    139e:	95 07       	cpc	r25, r21
    13a0:	79 f4       	brne	.+30     	; 0x13c0 <vQueueUnregisterQueue+0x42>
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <vQueueUnregisterQueue+0x2a>
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    13a8:	fb 01       	movw	r30, r22
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e4 5f       	subi	r30, 0xF4	; 244
    13b4:	fb 4f       	sbci	r31, 0xFB	; 251
    13b6:	11 82       	std	Z+1, r1	; 0x01
    13b8:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    13ba:	13 82       	std	Z+3, r1	; 0x03
    13bc:	12 82       	std	Z+2, r1	; 0x02
				break;
    13be:	08 95       	ret
    13c0:	2f 5f       	subi	r18, 0xFF	; 255
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	34 96       	adiw	r30, 0x04	; 4
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    13c6:	28 30       	cpi	r18, 0x08	; 8
    13c8:	31 05       	cpc	r19, r1
    13ca:	29 f7       	brne	.-54     	; 0x1396 <vQueueUnregisterQueue+0x18>
    13cc:	08 95       	ret

000013ce <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    13d4:	0e 94 bf 09 	call	0x137e	; 0x137e <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    13d8:	ce 01       	movw	r24, r28
    13da:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    13e4:	fc 01       	movw	r30, r24

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    13e6:	82 85       	ldd	r24, Z+10	; 0x0a
    13e8:	93 85       	ldd	r25, Z+11	; 0x0b
    13ea:	24 e0       	ldi	r18, 0x04	; 4
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	92 07       	cpc	r25, r18
    13f0:	61 f4       	brne	.+24     	; 0x140a <prvTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    13f2:	24 89       	ldd	r18, Z+20	; 0x14
    13f4:	35 89       	ldd	r19, Z+21	; 0x15
    13f6:	83 e0       	ldi	r24, 0x03	; 3
    13f8:	2f 3e       	cpi	r18, 0xEF	; 239
    13fa:	38 07       	cpc	r19, r24
    13fc:	41 f0       	breq	.+16     	; 0x140e <prvTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	21 15       	cp	r18, r1
    1402:	31 05       	cpc	r19, r1
    1404:	29 f0       	breq	.+10     	; 0x1410 <prvTaskIsTaskSuspended+0x2c>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	08 95       	ret
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	08 95       	ret
    140e:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    1410:	08 95       	ret

00001412 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1412:	e0 91 ad 03 	lds	r30, 0x03AD
    1416:	f0 91 ae 03 	lds	r31, 0x03AE
    141a:	80 81       	ld	r24, Z
    141c:	88 23       	and	r24, r24
    141e:	39 f4       	brne	.+14     	; 0x142e <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	90 93 a1 03 	sts	0x03A1, r25
    1428:	80 93 a0 03 	sts	0x03A0, r24
    142c:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    142e:	e0 91 ad 03 	lds	r30, 0x03AD
    1432:	f0 91 ae 03 	lds	r31, 0x03AE
    1436:	05 80       	ldd	r0, Z+5	; 0x05
    1438:	f6 81       	ldd	r31, Z+6	; 0x06
    143a:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    143c:	06 80       	ldd	r0, Z+6	; 0x06
    143e:	f7 81       	ldd	r31, Z+7	; 0x07
    1440:	e0 2d       	mov	r30, r0
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	90 93 a1 03 	sts	0x03A1, r25
    144a:	80 93 a0 03 	sts	0x03A0, r24
    144e:	08 95       	ret

00001450 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
    145c:	16 2f       	mov	r17, r22
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    145e:	e0 90 a7 03 	lds	r14, 0x03A7
    1462:	f0 90 a8 03 	lds	r15, 0x03A8
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1466:	80 91 9d 03 	lds	r24, 0x039D
    146a:	90 91 9e 03 	lds	r25, 0x039E
    146e:	02 96       	adiw	r24, 0x02	; 2
    1470:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	cf 3f       	cpi	r28, 0xFF	; 255
    1478:	d8 07       	cpc	r29, r24
    147a:	69 f4       	brne	.+26     	; 0x1496 <prvAddCurrentTaskToDelayedList+0x46>
    147c:	11 23       	and	r17, r17
    147e:	59 f0       	breq	.+22     	; 0x1496 <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1480:	60 91 9d 03 	lds	r22, 0x039D
    1484:	70 91 9e 03 	lds	r23, 0x039E
    1488:	6e 5f       	subi	r22, 0xFE	; 254
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	94 e0       	ldi	r25, 0x04	; 4
    1490:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1494:	2f c0       	rjmp	.+94     	; 0x14f4 <prvAddCurrentTaskToDelayedList+0xa4>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    1496:	ce 0d       	add	r28, r14
    1498:	df 1d       	adc	r29, r15

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    149a:	e0 91 9d 03 	lds	r30, 0x039D
    149e:	f0 91 9e 03 	lds	r31, 0x039E
    14a2:	d3 83       	std	Z+3, r29	; 0x03
    14a4:	c2 83       	std	Z+2, r28	; 0x02

			if( xTimeToWake < xConstTickCount )
    14a6:	ce 15       	cp	r28, r14
    14a8:	df 05       	cpc	r29, r15
    14aa:	68 f4       	brcc	.+26     	; 0x14c6 <prvAddCurrentTaskToDelayedList+0x76>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    14ac:	80 91 ab 03 	lds	r24, 0x03AB
    14b0:	90 91 ac 03 	lds	r25, 0x03AC
    14b4:	60 91 9d 03 	lds	r22, 0x039D
    14b8:	70 91 9e 03 	lds	r23, 0x039E
    14bc:	6e 5f       	subi	r22, 0xFE	; 254
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <prvAddCurrentTaskToDelayedList+0xa4>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    14c6:	80 91 ad 03 	lds	r24, 0x03AD
    14ca:	90 91 ae 03 	lds	r25, 0x03AE
    14ce:	60 91 9d 03 	lds	r22, 0x039D
    14d2:	70 91 9e 03 	lds	r23, 0x039E
    14d6:	6e 5f       	subi	r22, 0xFE	; 254
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    14de:	80 91 a0 03 	lds	r24, 0x03A0
    14e2:	90 91 a1 03 	lds	r25, 0x03A1
    14e6:	c8 17       	cp	r28, r24
    14e8:	d9 07       	cpc	r29, r25
    14ea:	20 f4       	brcc	.+8      	; 0x14f4 <prvAddCurrentTaskToDelayedList+0xa4>
				{
					xNextTaskUnblockTime = xTimeToWake;
    14ec:	d0 93 a1 03 	sts	0x03A1, r29
    14f0:	c0 93 a0 03 	sts	0x03A0, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	08 95       	ret

00001500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	ec 01       	movw	r28, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			vPortFree( pxTCB );
    150e:	ce 01       	movw	r24, r28
    1510:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    151a:	2f 92       	push	r2
    151c:	3f 92       	push	r3
    151e:	4f 92       	push	r4
    1520:	5f 92       	push	r5
    1522:	6f 92       	push	r6
    1524:	7f 92       	push	r7
    1526:	8f 92       	push	r8
    1528:	9f 92       	push	r9
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	3c 01       	movw	r6, r24
    153e:	5b 01       	movw	r10, r22
    1540:	ea 01       	movw	r28, r20
    1542:	29 01       	movw	r4, r18
    1544:	d0 2e       	mov	r13, r16
    1546:	47 01       	movw	r8, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1548:	ca 01       	movw	r24, r20
    154a:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    154e:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	09 f4       	brne	.+2      	; 0x1556 <xTaskCreate+0x3c>
    1554:	ed c0       	rjmp	.+474    	; 0x1730 <xTaskCreate+0x216>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1556:	8a e2       	ldi	r24, 0x2A	; 42
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 92 02 	call	0x524	; 0x524 <pvPortMalloc>
    155e:	8c 01       	movw	r16, r24

				if( pxNewTCB != NULL )
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	81 f0       	breq	.+32     	; 0x1584 <xTaskCreate+0x6a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1564:	fc 01       	movw	r30, r24
    1566:	f0 8e       	std	Z+24, r15	; 0x18
    1568:	e7 8a       	std	Z+23, r14	; 0x17
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    156a:	21 97       	sbiw	r28, 0x01	; 1
    156c:	17 01       	movw	r2, r14
    156e:	2c 0e       	add	r2, r28
    1570:	3d 1e       	adc	r3, r29
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1572:	f5 01       	movw	r30, r10
    1574:	80 81       	ld	r24, Z
    1576:	f8 01       	movw	r30, r16
    1578:	81 8f       	std	Z+25, r24	; 0x19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    157a:	f5 01       	movw	r30, r10
    157c:	80 81       	ld	r24, Z
    157e:	88 23       	and	r24, r24
    1580:	31 f4       	brne	.+12     	; 0x158e <xTaskCreate+0x74>
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <xTaskCreate+0x90>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 32 03 	call	0x664	; 0x664 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	d6 c0       	rjmp	.+428    	; 0x173a <xTaskCreate+0x220>
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    158e:	e8 01       	movw	r28, r16
    1590:	6a 96       	adiw	r28, 0x1a	; 26
    1592:	d5 01       	movw	r26, r10
    1594:	11 96       	adiw	r26, 0x01	; 1
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1596:	81 e0       	ldi	r24, 0x01	; 1
#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
    1598:	fd 01       	movw	r30, r26
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    159a:	9d 91       	ld	r25, X+
    159c:	99 93       	st	Y+, r25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    159e:	90 81       	ld	r25, Z
    15a0:	99 23       	and	r25, r25
    15a2:	19 f0       	breq	.+6      	; 0x15aa <xTaskCreate+0x90>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    15a4:	8f 5f       	subi	r24, 0xFF	; 255
    15a6:	8a 30       	cpi	r24, 0x0A	; 10
    15a8:	b9 f7       	brne	.-18     	; 0x1598 <xTaskCreate+0x7e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    15aa:	f8 01       	movw	r30, r16
    15ac:	12 a2       	lds	r17, 0x92
    15ae:	cd 2d       	mov	r28, r13
    15b0:	c5 30       	cpi	r28, 0x05	; 5
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <xTaskCreate+0x9c>
    15b4:	c4 e0       	ldi	r28, 0x04	; 4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    15b6:	f8 01       	movw	r30, r16
    15b8:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    15ba:	c3 a3       	lds	r28, 0x53
		pxNewTCB->uxMutexesHeld = 0;
    15bc:	14 a2       	lds	r17, 0x94
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    15be:	ee 24       	eor	r14, r14
    15c0:	ff 24       	eor	r15, r15
    15c2:	68 94       	set
    15c4:	e1 f8       	bld	r14, 1
    15c6:	e0 0e       	add	r14, r16
    15c8:	f1 1e       	adc	r15, r17
    15ca:	c7 01       	movw	r24, r14
    15cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    15d0:	c8 01       	movw	r24, r16
    15d2:	0c 96       	adiw	r24, 0x0c	; 12
    15d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    15d8:	f8 01       	movw	r30, r16
    15da:	11 87       	std	Z+9, r17	; 0x09
    15dc:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15de:	85 e0       	ldi	r24, 0x05	; 5
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	8c 1b       	sub	r24, r28
    15e4:	91 09       	sbc	r25, r1
    15e6:	95 87       	std	Z+13, r25	; 0x0d
    15e8:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    15ea:	13 8b       	std	Z+19, r17	; 0x13
    15ec:	02 8b       	std	Z+18, r16	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    15ee:	15 a2       	lds	r17, 0x95
    15f0:	16 a2       	lds	r17, 0x96
    15f2:	17 a2       	lds	r17, 0x97
    15f4:	10 a6       	lds	r17, 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    15f6:	11 a6       	lds	r17, 0xb1
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    15f8:	c1 01       	movw	r24, r2
    15fa:	b3 01       	movw	r22, r6
    15fc:	a2 01       	movw	r20, r4
    15fe:	0e 94 47 04 	call	0x88e	; 0x88e <pxPortInitialiseStack>
    1602:	f8 01       	movw	r30, r16
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    1608:	81 14       	cp	r8, r1
    160a:	91 04       	cpc	r9, r1
    160c:	19 f0       	breq	.+6      	; 0x1614 <xTaskCreate+0xfa>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    160e:	f4 01       	movw	r30, r8
    1610:	11 83       	std	Z+1, r17	; 0x01
    1612:	00 83       	st	Z, r16

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    161a:	80 91 a9 03 	lds	r24, 0x03A9
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	80 93 a9 03 	sts	0x03A9, r24
		if( pxCurrentTCB == NULL )
    1624:	80 91 9d 03 	lds	r24, 0x039D
    1628:	90 91 9e 03 	lds	r25, 0x039E
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	09 f0       	breq	.+2      	; 0x1632 <xTaskCreate+0x118>
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <xTaskCreate+0x196>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1632:	10 93 9e 03 	sts	0x039E, r17
    1636:	00 93 9d 03 	sts	0x039D, r16

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    163a:	80 91 a9 03 	lds	r24, 0x03A9
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	09 f0       	breq	.+2      	; 0x1644 <xTaskCreate+0x12a>
    1642:	47 c0       	rjmp	.+142    	; 0x16d2 <xTaskCreate+0x1b8>
    1644:	c0 e0       	ldi	r28, 0x00	; 0
    1646:	d0 e0       	ldi	r29, 0x00	; 0
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1648:	ce 01       	movw	r24, r28
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	8c 0f       	add	r24, r28
    1658:	9d 1f       	adc	r25, r29
    165a:	80 55       	subi	r24, 0x50	; 80
    165c:	9c 4f       	sbci	r25, 0xFC	; 252
    165e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
    1662:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1664:	c5 30       	cpi	r28, 0x05	; 5
    1666:	d1 05       	cpc	r29, r1
    1668:	79 f7       	brne	.-34     	; 0x1648 <xTaskCreate+0x12e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    166a:	cd ed       	ldi	r28, 0xDD	; 221
    166c:	d3 e0       	ldi	r29, 0x03	; 3
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1674:	0f 2e       	mov	r0, r31
    1676:	f6 ee       	ldi	r31, 0xE6	; 230
    1678:	af 2e       	mov	r10, r31
    167a:	f3 e0       	ldi	r31, 0x03	; 3
    167c:	bf 2e       	mov	r11, r31
    167e:	f0 2d       	mov	r31, r0
    1680:	c5 01       	movw	r24, r10
    1682:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1686:	8f ee       	ldi	r24, 0xEF	; 239
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    168e:	88 ef       	ldi	r24, 0xF8	; 248
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    169e:	d0 93 ae 03 	sts	0x03AE, r29
    16a2:	c0 93 ad 03 	sts	0x03AD, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    16a6:	b0 92 ac 03 	sts	0x03AC, r11
    16aa:	a0 92 ab 03 	sts	0x03AB, r10
    16ae:	11 c0       	rjmp	.+34     	; 0x16d2 <xTaskCreate+0x1b8>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    16b0:	80 91 a5 03 	lds	r24, 0x03A5
    16b4:	88 23       	and	r24, r24
    16b6:	69 f4       	brne	.+26     	; 0x16d2 <xTaskCreate+0x1b8>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    16b8:	e0 91 9d 03 	lds	r30, 0x039D
    16bc:	f0 91 9e 03 	lds	r31, 0x039E
    16c0:	96 89       	ldd	r25, Z+22	; 0x16
    16c2:	f8 01       	movw	r30, r16
    16c4:	86 89       	ldd	r24, Z+22	; 0x16
    16c6:	89 17       	cp	r24, r25
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <xTaskCreate+0x1b8>
				{
					pxCurrentTCB = pxNewTCB;
    16ca:	10 93 9e 03 	sts	0x039E, r17
    16ce:	00 93 9d 03 	sts	0x039D, r16
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    16d2:	80 91 af 03 	lds	r24, 0x03AF
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 af 03 	sts	0x03AF, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    16dc:	f8 01       	movw	r30, r16
    16de:	86 89       	ldd	r24, Z+22	; 0x16
    16e0:	90 91 a6 03 	lds	r25, 0x03A6
    16e4:	98 17       	cp	r25, r24
    16e6:	10 f4       	brcc	.+4      	; 0x16ec <xTaskCreate+0x1d2>
    16e8:	80 93 a6 03 	sts	0x03A6, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 01       	movw	r18, r24
    16f0:	22 0f       	add	r18, r18
    16f2:	33 1f       	adc	r19, r19
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	22 0f       	add	r18, r18
    16fa:	33 1f       	adc	r19, r19
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	80 55       	subi	r24, 0x50	; 80
    1702:	9c 4f       	sbci	r25, 0xFC	; 252
    1704:	b7 01       	movw	r22, r14
    1706:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    170e:	80 91 a5 03 	lds	r24, 0x03A5
    1712:	88 23       	and	r24, r24
    1714:	79 f0       	breq	.+30     	; 0x1734 <xTaskCreate+0x21a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1716:	e0 91 9d 03 	lds	r30, 0x039D
    171a:	f0 91 9e 03 	lds	r31, 0x039E
    171e:	96 89       	ldd	r25, Z+22	; 0x16
    1720:	f8 01       	movw	r30, r16
    1722:	86 89       	ldd	r24, Z+22	; 0x16
    1724:	98 17       	cp	r25, r24
    1726:	40 f4       	brcc	.+16     	; 0x1738 <xTaskCreate+0x21e>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1728:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	05 c0       	rjmp	.+10     	; 0x173a <xTaskCreate+0x220>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	03 c0       	rjmp	.+6      	; 0x173a <xTaskCreate+0x220>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	01 c0       	rjmp	.+2      	; 0x173a <xTaskCreate+0x220>
    1738:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	7f 90       	pop	r7
    1752:	6f 90       	pop	r6
    1754:	5f 90       	pop	r5
    1756:	4f 90       	pop	r4
    1758:	3f 90       	pop	r3
    175a:	2f 90       	pop	r2
    175c:	08 95       	ret

0000175e <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	29 f4       	brne	.+10     	; 0x177a <vTaskDelete+0x1c>
    1770:	c0 91 9d 03 	lds	r28, 0x039D
    1774:	d0 91 9e 03 	lds	r29, 0x039E
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vTaskDelete+0x1e>
    177a:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    177c:	8e 01       	movw	r16, r28
    177e:	0e 5f       	subi	r16, 0xFE	; 254
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	c8 01       	movw	r24, r16
    1784:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1788:	8c 89       	ldd	r24, Y+20	; 0x14
    178a:	9d 89       	ldd	r25, Y+21	; 0x15
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	21 f0       	breq	.+8      	; 0x1798 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1790:	ce 01       	movw	r24, r28
    1792:	0c 96       	adiw	r24, 0x0c	; 12
    1794:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1798:	80 91 af 03 	lds	r24, 0x03AF
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	80 93 af 03 	sts	0x03AF, r24

			if( pxTCB == pxCurrentTCB )
    17a2:	80 91 9d 03 	lds	r24, 0x039D
    17a6:	90 91 9e 03 	lds	r25, 0x039E
    17aa:	c8 17       	cp	r28, r24
    17ac:	d9 07       	cpc	r29, r25
    17ae:	59 f4       	brne	.+22     	; 0x17c6 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    17b0:	88 ef       	ldi	r24, 0xF8	; 248
    17b2:	93 e0       	ldi	r25, 0x03	; 3
    17b4:	b8 01       	movw	r22, r16
    17b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    17ba:	80 91 aa 03 	lds	r24, 0x03AA
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	80 93 aa 03 	sts	0x03AA, r24
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    17c6:	80 91 a9 03 	lds	r24, 0x03A9
    17ca:	81 50       	subi	r24, 0x01	; 1
    17cc:	80 93 a9 03 	sts	0x03A9, r24
				prvDeleteTCB( pxTCB );
    17d0:	ce 01       	movw	r24, r28
    17d2:	0e 94 80 0a 	call	0x1500	; 0x1500 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    17d6:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    17de:	80 91 a5 03 	lds	r24, 0x03A5
    17e2:	88 23       	and	r24, r24
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <vTaskDelete+0x9a>
		{
			if( pxTCB == pxCurrentTCB )
    17e6:	80 91 9d 03 	lds	r24, 0x039D
    17ea:	90 91 9e 03 	lds	r25, 0x039E
    17ee:	c8 17       	cp	r28, r24
    17f0:	d9 07       	cpc	r29, r25
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <vTaskDelete+0x9a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    17f4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <uxTaskPriorityGet>:
	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	29 f4       	brne	.+10     	; 0x1816 <uxTaskPriorityGet+0x14>
    180c:	e0 91 9d 03 	lds	r30, 0x039D
    1810:	f0 91 9e 03 	lds	r31, 0x039E
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <uxTaskPriorityGet+0x16>
    1816:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		taskEXIT_CRITICAL();
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
	}
    181c:	86 89       	ldd	r24, Z+22	; 0x16
    181e:	08 95       	ret

00001820 <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	29 f4       	brne	.+10     	; 0x182e <uxTaskPriorityGetFromISR+0xe>
    1824:	e0 91 9d 03 	lds	r30, 0x039D
    1828:	f0 91 9e 03 	lds	r31, 0x039E
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <uxTaskPriorityGetFromISR+0x10>
    182e:	fc 01       	movw	r30, r24
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    1830:	86 89       	ldd	r24, Z+22	; 0x16
    1832:	08 95       	ret

00001834 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    183e:	65 30       	cpi	r22, 0x05	; 5
    1840:	08 f0       	brcs	.+2      	; 0x1844 <vTaskPrioritySet+0x10>
    1842:	64 e0       	ldi	r22, 0x04	; 4
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	29 f4       	brne	.+10     	; 0x1858 <vTaskPrioritySet+0x24>
    184e:	c0 91 9d 03 	lds	r28, 0x039D
    1852:	d0 91 9e 03 	lds	r29, 0x039E
    1856:	01 c0       	rjmp	.+2      	; 0x185a <vTaskPrioritySet+0x26>
    1858:	ec 01       	movw	r28, r24

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    185a:	2b a1       	lds	r18, 0x4b
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    185c:	26 17       	cp	r18, r22
    185e:	09 f4       	brne	.+2      	; 0x1862 <vTaskPrioritySet+0x2e>
    1860:	61 c0       	rjmp	.+194    	; 0x1924 <vTaskPrioritySet+0xf0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    1862:	26 17       	cp	r18, r22
    1864:	88 f4       	brcc	.+34     	; 0x1888 <vTaskPrioritySet+0x54>
				{
					if( pxTCB != pxCurrentTCB )
    1866:	80 91 9d 03 	lds	r24, 0x039D
    186a:	90 91 9e 03 	lds	r25, 0x039E
    186e:	c8 17       	cp	r28, r24
    1870:	d9 07       	cpc	r29, r25
    1872:	a1 f0       	breq	.+40     	; 0x189c <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1874:	e0 91 9d 03 	lds	r30, 0x039D
    1878:	f0 91 9e 03 	lds	r31, 0x039E
						{
							xYieldRequired = pdTRUE;
    187c:	11 e0       	ldi	r17, 0x01	; 1
    187e:	86 89       	ldd	r24, Z+22	; 0x16
    1880:	68 17       	cp	r22, r24
    1882:	68 f4       	brcc	.+26     	; 0x189e <vTaskPrioritySet+0x6a>
    1884:	10 e0       	ldi	r17, 0x00	; 0
    1886:	0b c0       	rjmp	.+22     	; 0x189e <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    1888:	80 91 9d 03 	lds	r24, 0x039D
    188c:	90 91 9e 03 	lds	r25, 0x039E
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
    1890:	11 e0       	ldi	r17, 0x01	; 1
    1892:	c8 17       	cp	r28, r24
    1894:	d9 07       	cpc	r29, r25
    1896:	19 f0       	breq	.+6      	; 0x189e <vTaskPrioritySet+0x6a>
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	01 c0       	rjmp	.+2      	; 0x189e <vTaskPrioritySet+0x6a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    189c:	10 e0       	ldi	r17, 0x00	; 0
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    189e:	8e 89       	ldd	r24, Y+22	; 0x16

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    18a0:	28 17       	cp	r18, r24
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <vTaskPrioritySet+0x72>
					{
						pxTCB->uxPriority = uxNewPriority;
    18a4:	6e 8b       	std	Y+22, r22	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    18a6:	6b a3       	lds	r22, 0x5b
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    18a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    18ac:	33 23       	and	r19, r19
    18ae:	34 f0       	brlt	.+12     	; 0x18bc <vTaskPrioritySet+0x88>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18b0:	25 e0       	ldi	r18, 0x05	; 5
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	26 1b       	sub	r18, r22
    18b6:	31 09       	sbc	r19, r1
    18b8:	3d 87       	std	Y+13, r19	; 0x0d
    18ba:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9c 01       	movw	r18, r24
    18c0:	22 0f       	add	r18, r18
    18c2:	33 1f       	adc	r19, r19
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	22 0f       	add	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	80 55       	subi	r24, 0x50	; 80
    18d2:	9c 4f       	sbci	r25, 0xFC	; 252
    18d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    18d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    18d8:	28 17       	cp	r18, r24
    18da:	39 07       	cpc	r19, r25
    18dc:	f9 f4       	brne	.+62     	; 0x191c <vTaskPrioritySet+0xe8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    18de:	ee 24       	eor	r14, r14
    18e0:	ff 24       	eor	r15, r15
    18e2:	68 94       	set
    18e4:	e1 f8       	bld	r14, 1
    18e6:	ec 0e       	add	r14, r28
    18e8:	fd 1e       	adc	r15, r29
    18ea:	c7 01       	movw	r24, r14
    18ec:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    18f0:	8e 89       	ldd	r24, Y+22	; 0x16
    18f2:	90 91 a6 03 	lds	r25, 0x03A6
    18f6:	98 17       	cp	r25, r24
    18f8:	10 f4       	brcc	.+4      	; 0x18fe <vTaskPrioritySet+0xca>
    18fa:	80 93 a6 03 	sts	0x03A6, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9c 01       	movw	r18, r24
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	22 0f       	add	r18, r18
    190c:	33 1f       	adc	r19, r19
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
    1912:	80 55       	subi	r24, 0x50	; 80
    1914:	9c 4f       	sbci	r25, 0xFC	; 252
    1916:	b7 01       	movw	r22, r14
    1918:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    191c:	11 23       	and	r17, r17
    191e:	11 f0       	breq	.+4      	; 0x1924 <vTaskPrioritySet+0xf0>
				{
					taskYIELD_IF_USING_PREEMPTION();
    1920:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
	}
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ec 01       	movw	r28, r24
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	b9 f1       	breq	.+110    	; 0x19b0 <vTaskResume+0x7c>
    1942:	80 91 9d 03 	lds	r24, 0x039D
    1946:	90 91 9e 03 	lds	r25, 0x039E
    194a:	c8 17       	cp	r28, r24
    194c:	d9 07       	cpc	r29, r25
    194e:	81 f1       	breq	.+96     	; 0x19b0 <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1956:	ce 01       	movw	r24, r28
    1958:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <prvTaskIsTaskSuspended>
    195c:	88 23       	and	r24, r24
    195e:	31 f1       	breq	.+76     	; 0x19ac <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    1960:	8e 01       	movw	r16, r28
    1962:	0e 5f       	subi	r16, 0xFE	; 254
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    196c:	8e 89       	ldd	r24, Y+22	; 0x16
    196e:	90 91 a6 03 	lds	r25, 0x03A6
    1972:	98 17       	cp	r25, r24
    1974:	10 f4       	brcc	.+4      	; 0x197a <vTaskResume+0x46>
    1976:	80 93 a6 03 	sts	0x03A6, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 01       	movw	r18, r24
    197e:	22 0f       	add	r18, r18
    1980:	33 1f       	adc	r19, r19
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	82 0f       	add	r24, r18
    198c:	93 1f       	adc	r25, r19
    198e:	80 55       	subi	r24, 0x50	; 80
    1990:	9c 4f       	sbci	r25, 0xFC	; 252
    1992:	b8 01       	movw	r22, r16
    1994:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1998:	e0 91 9d 03 	lds	r30, 0x039D
    199c:	f0 91 9e 03 	lds	r31, 0x039E
    19a0:	9e 89       	ldd	r25, Y+22	; 0x16
    19a2:	86 89       	ldd	r24, Z+22	; 0x16
    19a4:	98 17       	cp	r25, r24
    19a6:	10 f0       	brcs	.+4      	; 0x19ac <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    19a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    19ac:	0f 90       	pop	r0
    19ae:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    19c6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <prvTaskIsTaskSuspended>
    19ca:	88 23       	and	r24, r24
    19cc:	b9 f1       	breq	.+110    	; 0x1a3c <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    19ce:	80 91 9f 03 	lds	r24, 0x039F
    19d2:	88 23       	and	r24, r24
    19d4:	51 f5       	brne	.+84     	; 0x1a2a <xTaskResumeFromISR+0x70>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    19d6:	e0 91 9d 03 	lds	r30, 0x039D
    19da:	f0 91 9e 03 	lds	r31, 0x039E

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    19de:	11 e0       	ldi	r17, 0x01	; 1
    19e0:	9e 89       	ldd	r25, Y+22	; 0x16
    19e2:	86 89       	ldd	r24, Z+22	; 0x16
    19e4:	98 17       	cp	r25, r24
    19e6:	08 f4       	brcc	.+2      	; 0x19ea <xTaskResumeFromISR+0x30>
    19e8:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19ea:	ee 24       	eor	r14, r14
    19ec:	ff 24       	eor	r15, r15
    19ee:	68 94       	set
    19f0:	e1 f8       	bld	r14, 1
    19f2:	ec 0e       	add	r14, r28
    19f4:	fd 1e       	adc	r15, r29
    19f6:	c7 01       	movw	r24, r14
    19f8:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    19fc:	8e 89       	ldd	r24, Y+22	; 0x16
    19fe:	90 91 a6 03 	lds	r25, 0x03A6
    1a02:	98 17       	cp	r25, r24
    1a04:	10 f4       	brcc	.+4      	; 0x1a0a <xTaskResumeFromISR+0x50>
    1a06:	80 93 a6 03 	sts	0x03A6, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c 01       	movw	r18, r24
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	80 55       	subi	r24, 0x50	; 80
    1a20:	9c 4f       	sbci	r25, 0xFC	; 252
    1a22:	b7 01       	movw	r22, r14
    1a24:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    1a28:	0a c0       	rjmp	.+20     	; 0x1a3e <xTaskResumeFromISR+0x84>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1a2a:	be 01       	movw	r22, r28
    1a2c:	64 5f       	subi	r22, 0xF4	; 244
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f ee       	ldi	r24, 0xEF	; 239
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <xTaskResumeFromISR+0x84>
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1a3e:	81 2f       	mov	r24, r17
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	08 95       	ret

00001a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1a52:	8b e9       	ldi	r24, 0x9B	; 155
    1a54:	9e e0       	ldi	r25, 0x0E	; 14
    1a56:	6c e6       	ldi	r22, 0x6C	; 108
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	48 ec       	ldi	r20, 0xC8	; 200
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	0f 2e       	mov	r0, r31
    1a66:	fa e0       	ldi	r31, 0x0A	; 10
    1a68:	ef 2e       	mov	r14, r31
    1a6a:	f4 e0       	ldi	r31, 0x04	; 4
    1a6c:	ff 2e       	mov	r15, r31
    1a6e:	f0 2d       	mov	r31, r0
    1a70:	0e 94 8d 0a 	call	0x151a	; 0x151a <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	81 f4       	brne	.+32     	; 0x1a98 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1a78:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	90 93 a1 03 	sts	0x03A1, r25
    1a82:	80 93 a0 03 	sts	0x03A0, r24
		xSchedulerRunning = pdTRUE;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	80 93 a5 03 	sts	0x03A5, r24
		xTickCount = ( TickType_t ) 0U;
    1a8c:	10 92 a8 03 	sts	0x03A8, r1
    1a90:	10 92 a7 03 	sts	0x03A7, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1a94:	0e 94 d7 04 	call	0x9ae	; 0x9ae <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	08 95       	ret

00001aa0 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1aa0:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1aa2:	10 92 a5 03 	sts	0x03A5, r1
	vPortEndScheduler();
    1aa6:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortEndScheduler>
}
    1aaa:	08 95       	ret

00001aac <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1aac:	80 91 9f 03 	lds	r24, 0x039F
    1ab0:	8f 5f       	subi	r24, 0xFF	; 255
    1ab2:	80 93 9f 03 	sts	0x039F, r24
}
    1ab6:	08 95       	ret

00001ab8 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1abe:	80 91 a7 03 	lds	r24, 0x03A7
    1ac2:	90 91 a8 03 	lds	r25, 0x03A8
	}
	portTICK_TYPE_EXIT_CRITICAL();
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1aca:	08 95       	ret

00001acc <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    1acc:	80 91 a7 03 	lds	r24, 0x03A7
    1ad0:	90 91 a8 03 	lds	r25, 0x03A8
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1ad4:	08 95       	ret

00001ad6 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1ad6:	80 91 a9 03 	lds	r24, 0x03A9
}
    1ada:	08 95       	ret

00001adc <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	21 f4       	brne	.+8      	; 0x1ae8 <pcTaskGetName+0xc>
    1ae0:	80 91 9d 03 	lds	r24, 0x039D
    1ae4:	90 91 9e 03 	lds	r25, 0x039E
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    1ae8:	49 96       	adiw	r24, 0x19	; 25
}
    1aea:	08 95       	ret

00001aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1afc:	80 91 9f 03 	lds	r24, 0x039F
    1b00:	88 23       	and	r24, r24
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <xTaskIncrementTick+0x1a>
    1b04:	82 c0       	rjmp	.+260    	; 0x1c0a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1b06:	c0 90 a7 03 	lds	r12, 0x03A7
    1b0a:	d0 90 a8 03 	lds	r13, 0x03A8
    1b0e:	08 94       	sec
    1b10:	c1 1c       	adc	r12, r1
    1b12:	d1 1c       	adc	r13, r1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1b14:	d0 92 a8 03 	sts	0x03A8, r13
    1b18:	c0 92 a7 03 	sts	0x03A7, r12

		if( xConstTickCount == ( TickType_t ) 0U )
    1b1c:	c1 14       	cp	r12, r1
    1b1e:	d1 04       	cpc	r13, r1
    1b20:	b9 f4       	brne	.+46     	; 0x1b50 <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
    1b22:	80 91 ad 03 	lds	r24, 0x03AD
    1b26:	90 91 ae 03 	lds	r25, 0x03AE
    1b2a:	20 91 ab 03 	lds	r18, 0x03AB
    1b2e:	30 91 ac 03 	lds	r19, 0x03AC
    1b32:	30 93 ae 03 	sts	0x03AE, r19
    1b36:	20 93 ad 03 	sts	0x03AD, r18
    1b3a:	90 93 ac 03 	sts	0x03AC, r25
    1b3e:	80 93 ab 03 	sts	0x03AB, r24
    1b42:	80 91 a2 03 	lds	r24, 0x03A2
    1b46:	8f 5f       	subi	r24, 0xFF	; 255
    1b48:	80 93 a2 03 	sts	0x03A2, r24
    1b4c:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b50:	80 91 a0 03 	lds	r24, 0x03A0
    1b54:	90 91 a1 03 	lds	r25, 0x03A1
    1b58:	c8 16       	cp	r12, r24
    1b5a:	d9 06       	cpc	r13, r25
    1b5c:	20 f4       	brcc	.+8      	; 0x1b66 <xTaskIncrementTick+0x7a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1b5e:	ff 24       	eor	r15, r15
    1b60:	5a c0       	rjmp	.+180    	; 0x1c16 <xTaskIncrementTick+0x12a>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b62:	fe 2c       	mov	r15, r14
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <xTaskIncrementTick+0x80>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1b66:	ff 24       	eor	r15, r15
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1b68:	ee 24       	eor	r14, r14
    1b6a:	e3 94       	inc	r14
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b6c:	e0 91 ad 03 	lds	r30, 0x03AD
    1b70:	f0 91 ae 03 	lds	r31, 0x03AE
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	39 f4       	brne	.+14     	; 0x1b88 <xTaskIncrementTick+0x9c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b7a:	8f ef       	ldi	r24, 0xFF	; 255
    1b7c:	9f ef       	ldi	r25, 0xFF	; 255
    1b7e:	90 93 a1 03 	sts	0x03A1, r25
    1b82:	80 93 a0 03 	sts	0x03A0, r24
					break;
    1b86:	47 c0       	rjmp	.+142    	; 0x1c16 <xTaskIncrementTick+0x12a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1b88:	e0 91 ad 03 	lds	r30, 0x03AD
    1b8c:	f0 91 ae 03 	lds	r31, 0x03AE
    1b90:	05 80       	ldd	r0, Z+5	; 0x05
    1b92:	f6 81       	ldd	r31, Z+6	; 0x06
    1b94:	e0 2d       	mov	r30, r0
    1b96:	c6 81       	ldd	r28, Z+6	; 0x06
    1b98:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    1b9e:	c8 16       	cp	r12, r24
    1ba0:	d9 06       	cpc	r13, r25
    1ba2:	28 f4       	brcc	.+10     	; 0x1bae <xTaskIncrementTick+0xc2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    1ba4:	90 93 a1 03 	sts	0x03A1, r25
    1ba8:	80 93 a0 03 	sts	0x03A0, r24
						break;
    1bac:	34 c0       	rjmp	.+104    	; 0x1c16 <xTaskIncrementTick+0x12a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1bae:	8e 01       	movw	r16, r28
    1bb0:	0e 5f       	subi	r16, 0xFE	; 254
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1bba:	8c 89       	ldd	r24, Y+20	; 0x14
    1bbc:	9d 89       	ldd	r25, Y+21	; 0x15
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <xTaskIncrementTick+0xde>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	0c 96       	adiw	r24, 0x0c	; 12
    1bc6:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    1bca:	8e 89       	ldd	r24, Y+22	; 0x16
    1bcc:	90 91 a6 03 	lds	r25, 0x03A6
    1bd0:	98 17       	cp	r25, r24
    1bd2:	10 f4       	brcc	.+4      	; 0x1bd8 <xTaskIncrementTick+0xec>
    1bd4:	80 93 a6 03 	sts	0x03A6, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 01       	movw	r18, r24
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	22 0f       	add	r18, r18
    1be6:	33 1f       	adc	r19, r19
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	80 55       	subi	r24, 0x50	; 80
    1bee:	9c 4f       	sbci	r25, 0xFC	; 252
    1bf0:	b8 01       	movw	r22, r16
    1bf2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1bf6:	e0 91 9d 03 	lds	r30, 0x039D
    1bfa:	f0 91 9e 03 	lds	r31, 0x039E
    1bfe:	9e 89       	ldd	r25, Y+22	; 0x16
    1c00:	86 89       	ldd	r24, Z+22	; 0x16
    1c02:	98 17       	cp	r25, r24
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <xTaskIncrementTick+0x11c>
    1c06:	ad cf       	rjmp	.-166    	; 0x1b62 <xTaskIncrementTick+0x76>
    1c08:	b1 cf       	rjmp	.-158    	; 0x1b6c <xTaskIncrementTick+0x80>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1c0a:	80 91 a4 03 	lds	r24, 0x03A4
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 93 a4 03 	sts	0x03A4, r24

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1c14:	ff 24       	eor	r15, r15
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1c16:	80 91 a3 03 	lds	r24, 0x03A3
    1c1a:	88 23       	and	r24, r24
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
    1c1e:	ff 24       	eor	r15, r15
    1c20:	f3 94       	inc	r15
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1c22:	8f 2d       	mov	r24, r15
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	08 95       	ret

00001c36 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1c4a:	80 91 9f 03 	lds	r24, 0x039F
    1c4e:	81 50       	subi	r24, 0x01	; 1
    1c50:	80 93 9f 03 	sts	0x039F, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c54:	80 91 9f 03 	lds	r24, 0x039F
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <xTaskResumeAll+0x28>
    1c5c:	5f c0       	rjmp	.+190    	; 0x1d1c <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1c5e:	80 91 a9 03 	lds	r24, 0x03A9
    1c62:	88 23       	and	r24, r24
    1c64:	91 f5       	brne	.+100    	; 0x1cca <xTaskResumeAll+0x94>
    1c66:	5d c0       	rjmp	.+186    	; 0x1d22 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1c68:	e0 91 f4 03 	lds	r30, 0x03F4
    1c6c:	f0 91 f5 03 	lds	r31, 0x03F5
    1c70:	c6 81       	ldd	r28, Z+6	; 0x06
    1c72:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c74:	ce 01       	movw	r24, r28
    1c76:	0c 96       	adiw	r24, 0x0c	; 12
    1c78:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	0e 5f       	subi	r16, 0xFE	; 254
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	c8 01       	movw	r24, r16
    1c84:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1c88:	8e 89       	ldd	r24, Y+22	; 0x16
    1c8a:	90 91 a6 03 	lds	r25, 0x03A6
    1c8e:	98 17       	cp	r25, r24
    1c90:	10 f4       	brcc	.+4      	; 0x1c96 <xTaskResumeAll+0x60>
    1c92:	80 93 a6 03 	sts	0x03A6, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9c 01       	movw	r18, r24
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	80 55       	subi	r24, 0x50	; 80
    1cac:	9c 4f       	sbci	r25, 0xFC	; 252
    1cae:	b8 01       	movw	r22, r16
    1cb0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1cb4:	e0 91 9d 03 	lds	r30, 0x039D
    1cb8:	f0 91 9e 03 	lds	r31, 0x039E
    1cbc:	9e 89       	ldd	r25, Y+22	; 0x16
    1cbe:	86 89       	ldd	r24, Z+22	; 0x16
    1cc0:	98 17       	cp	r25, r24
    1cc2:	68 f0       	brcs	.+26     	; 0x1cde <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
    1cc4:	d0 92 a3 03 	sts	0x03A3, r13
    1cc8:	0a c0       	rjmp	.+20     	; 0x1cde <xTaskResumeAll+0xa8>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1cca:	c0 e0       	ldi	r28, 0x00	; 0
    1ccc:	d0 e0       	ldi	r29, 0x00	; 0
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	ff ee       	ldi	r31, 0xEF	; 239
    1cd2:	ef 2e       	mov	r14, r31
    1cd4:	f3 e0       	ldi	r31, 0x03	; 3
    1cd6:	ff 2e       	mov	r15, r31
    1cd8:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    1cda:	dd 24       	eor	r13, r13
    1cdc:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1cde:	f7 01       	movw	r30, r14
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 23       	and	r24, r24
    1ce4:	09 f6       	brne	.-126    	; 0x1c68 <xTaskResumeAll+0x32>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1ce6:	20 97       	sbiw	r28, 0x00	; 0
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1cea:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1cee:	c0 91 a4 03 	lds	r28, 0x03A4

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1cf2:	cc 23       	and	r28, r28
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
    1cf6:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1cf8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <xTaskIncrementTick>
    1cfc:	88 23       	and	r24, r24
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
    1d00:	00 93 a3 03 	sts	0x03A3, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1d04:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1d06:	c1 f7       	brne	.-16     	; 0x1cf8 <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
    1d08:	10 92 a4 03 	sts	0x03A4, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1d0c:	80 91 a3 03 	lds	r24, 0x03A3
    1d10:	88 23       	and	r24, r24
    1d12:	31 f0       	breq	.+12     	; 0x1d20 <xTaskResumeAll+0xea>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1d14:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <xTaskResumeAll+0xec>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <xTaskResumeAll+0xec>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	08 95       	ret

00001d36 <prvIdleTask>:
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d36:	08 ef       	ldi	r16, 0xF8	; 248
    1d38:	13 e0       	ldi	r17, 0x03	; 3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d3a:	0f 2e       	mov	r0, r31
    1d3c:	f0 eb       	ldi	r31, 0xB0	; 176
    1d3e:	ef 2e       	mov	r14, r31
    1d40:	f3 e0       	ldi	r31, 0x03	; 3
    1d42:	ff 2e       	mov	r15, r31
    1d44:	f0 2d       	mov	r31, r0
    1d46:	24 c0       	rjmp	.+72     	; 0x1d90 <prvIdleTask+0x5a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1d48:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	c0 81       	ld	r28, Z
			}
			( void ) xTaskResumeAll();
    1d50:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1d54:	cc 23       	and	r28, r28
    1d56:	e1 f0       	breq	.+56     	; 0x1d90 <prvIdleTask+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1d5e:	e0 91 fd 03 	lds	r30, 0x03FD
    1d62:	f0 91 fe 03 	lds	r31, 0x03FE
    1d66:	c6 81       	ldd	r28, Z+6	; 0x06
    1d68:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	02 96       	adiw	r24, 0x02	; 2
    1d6e:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					--uxCurrentNumberOfTasks;
    1d72:	80 91 a9 03 	lds	r24, 0x03A9
    1d76:	81 50       	subi	r24, 0x01	; 1
    1d78:	80 93 a9 03 	sts	0x03A9, r24
					--uxDeletedTasksWaitingCleanUp;
    1d7c:	80 91 aa 03 	lds	r24, 0x03AA
    1d80:	81 50       	subi	r24, 0x01	; 1
    1d82:	80 93 aa 03 	sts	0x03AA, r24
				}
				taskEXIT_CRITICAL();
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	0e 94 80 0a 	call	0x1500	; 0x1500 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1d90:	80 91 aa 03 	lds	r24, 0x03AA
    1d94:	88 23       	and	r24, r24
    1d96:	c1 f6       	brne	.-80     	; 0x1d48 <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1d98:	f7 01       	movw	r30, r14
    1d9a:	80 81       	ld	r24, Z
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	c0 f3       	brcs	.-16     	; 0x1d90 <prvIdleTask+0x5a>
			{
				taskYIELD();
    1da0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    1da4:	f5 cf       	rjmp	.-22     	; 0x1d90 <prvIdleTask+0x5a>

00001da6 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	51 f0       	breq	.+20     	; 0x1dc4 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1db0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1db4:	ce 01       	movw	r24, r28
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1dbc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
    1dc4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    1dda:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1dde:	80 91 a7 03 	lds	r24, 0x03A7
    1de2:	90 91 a8 03 	lds	r25, 0x03A8

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1de6:	f8 01       	movw	r30, r16
    1de8:	20 81       	ld	r18, Z
    1dea:	31 81       	ldd	r19, Z+1	; 0x01
    1dec:	c2 0f       	add	r28, r18
    1dee:	d3 1f       	adc	r29, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1df0:	82 17       	cp	r24, r18
    1df2:	93 07       	cpc	r25, r19
    1df4:	48 f4       	brcc	.+18     	; 0x1e08 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1df6:	c2 17       	cp	r28, r18
    1df8:	d3 07       	cpc	r29, r19
    1dfa:	f8 f4       	brcc	.+62     	; 0x1e3a <vTaskDelayUntil+0x6c>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1dfc:	d1 83       	std	Z+1, r29	; 0x01
    1dfe:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    1e00:	8c 17       	cp	r24, r28
    1e02:	9d 07       	cpc	r25, r29
    1e04:	78 f4       	brcc	.+30     	; 0x1e24 <vTaskDelayUntil+0x56>
    1e06:	07 c0       	rjmp	.+14     	; 0x1e16 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1e08:	c2 17       	cp	r28, r18
    1e0a:	d3 07       	cpc	r29, r19
    1e0c:	90 f0       	brcs	.+36     	; 0x1e32 <vTaskDelayUntil+0x64>
    1e0e:	8c 17       	cp	r24, r28
    1e10:	9d 07       	cpc	r25, r29
    1e12:	78 f0       	brcs	.+30     	; 0x1e32 <vTaskDelayUntil+0x64>
    1e14:	12 c0       	rjmp	.+36     	; 0x1e3a <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1e16:	9e 01       	movw	r18, r28
    1e18:	28 1b       	sub	r18, r24
    1e1a:	39 0b       	sbc	r19, r25
    1e1c:	c9 01       	movw	r24, r18
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1e24:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e28:	88 23       	and	r24, r24
    1e2a:	59 f4       	brne	.+22     	; 0x1e42 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    1e2c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <vTaskDelayUntil+0x74>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1e32:	f8 01       	movw	r30, r16
    1e34:	d1 83       	std	Z+1, r29	; 0x01
    1e36:	c0 83       	st	Z, r28
    1e38:	ee cf       	rjmp	.-36     	; 0x1e16 <vTaskDelayUntil+0x48>
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	d1 83       	std	Z+1, r29	; 0x01
    1e3e:	c0 83       	st	Z, r28
    1e40:	f1 cf       	rjmp	.-30     	; 0x1e24 <vTaskDelayUntil+0x56>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1e4c:	80 91 9f 03 	lds	r24, 0x039F
    1e50:	88 23       	and	r24, r24
    1e52:	21 f0       	breq	.+8      	; 0x1e5c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	80 93 a3 03 	sts	0x03A3, r24
    1e5a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1e5c:	10 92 a3 03 	sts	0x03A3, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1e60:	20 91 a6 03 	lds	r18, 0x03A6
    1e64:	82 2f       	mov	r24, r18
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	ee 0f       	add	r30, r30
    1e70:	ff 1f       	adc	r31, r31
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	e8 0f       	add	r30, r24
    1e78:	f9 1f       	adc	r31, r25
    1e7a:	e0 55       	subi	r30, 0x50	; 80
    1e7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e7e:	30 81       	ld	r19, Z
    1e80:	33 23       	and	r19, r19
    1e82:	89 f4       	brne	.+34     	; 0x1ea6 <vTaskSwitchContext+0x5a>
    1e84:	21 50       	subi	r18, 0x01	; 1
    1e86:	82 2f       	mov	r24, r18
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	e8 0f       	add	r30, r24
    1e9a:	f9 1f       	adc	r31, r25
    1e9c:	e0 55       	subi	r30, 0x50	; 80
    1e9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea0:	30 81       	ld	r19, Z
    1ea2:	33 23       	and	r19, r19
    1ea4:	79 f3       	breq	.-34     	; 0x1e84 <vTaskSwitchContext+0x38>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	aa 0f       	add	r26, r26
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	aa 0f       	add	r26, r26
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	aa 0f       	add	r26, r26
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	8a 0f       	add	r24, r26
    1eb6:	9b 1f       	adc	r25, r27
    1eb8:	dc 01       	movw	r26, r24
    1eba:	a0 55       	subi	r26, 0x50	; 80
    1ebc:	bc 4f       	sbci	r27, 0xFC	; 252
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	ed 91       	ld	r30, X+
    1ec2:	fc 91       	ld	r31, X
    1ec4:	12 97       	sbiw	r26, 0x02	; 2
    1ec6:	02 80       	ldd	r0, Z+2	; 0x02
    1ec8:	f3 81       	ldd	r31, Z+3	; 0x03
    1eca:	e0 2d       	mov	r30, r0
    1ecc:	12 96       	adiw	r26, 0x02	; 2
    1ece:	fc 93       	st	X, r31
    1ed0:	ee 93       	st	-X, r30
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	03 96       	adiw	r24, 0x03	; 3
    1ed8:	e8 17       	cp	r30, r24
    1eda:	f9 07       	cpc	r31, r25
    1edc:	31 f4       	brne	.+12     	; 0x1eea <vTaskSwitchContext+0x9e>
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	12 96       	adiw	r26, 0x02	; 2
    1ee4:	9c 93       	st	X, r25
    1ee6:	8e 93       	st	-X, r24
    1ee8:	11 97       	sbiw	r26, 0x01	; 1
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	ed 91       	ld	r30, X+
    1eee:	fc 91       	ld	r31, X
    1ef0:	12 97       	sbiw	r26, 0x02	; 2
    1ef2:	86 81       	ldd	r24, Z+6	; 0x06
    1ef4:	97 81       	ldd	r25, Z+7	; 0x07
    1ef6:	90 93 9e 03 	sts	0x039E, r25
    1efa:	80 93 9d 03 	sts	0x039D, r24
    1efe:	20 93 a6 03 	sts	0x03A6, r18
    1f02:	08 95       	ret

00001f04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <vTaskSuspend+0x1c>
    1f16:	00 91 9d 03 	lds	r16, 0x039D
    1f1a:	10 91 9e 03 	lds	r17, 0x039E
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <vTaskSuspend+0x1e>
    1f20:	8c 01       	movw	r16, r24

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f22:	e8 01       	movw	r28, r16
    1f24:	22 96       	adiw	r28, 0x02	; 2
    1f26:	ce 01       	movw	r24, r28
    1f28:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	84 89       	ldd	r24, Z+20	; 0x14
    1f30:	95 89       	ldd	r25, Z+21	; 0x15
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	21 f0       	breq	.+8      	; 0x1f3e <vTaskSuspend+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1f36:	c8 01       	movw	r24, r16
    1f38:	0c 96       	adiw	r24, 0x0c	; 12
    1f3a:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	94 e0       	ldi	r25, 0x04	; 4
    1f42:	be 01       	movw	r22, r28
    1f44:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    1f4c:	80 91 a5 03 	lds	r24, 0x03A5
    1f50:	88 23       	and	r24, r24
    1f52:	39 f0       	breq	.+14     	; 0x1f62 <vTaskSuspend+0x5e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    1f5a:	0e 94 09 0a 	call	0x1412	; 0x1412 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    1f62:	80 91 9d 03 	lds	r24, 0x039D
    1f66:	90 91 9e 03 	lds	r25, 0x039E
    1f6a:	08 17       	cp	r16, r24
    1f6c:	19 07       	cpc	r17, r25
    1f6e:	a1 f4       	brne	.+40     	; 0x1f98 <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    1f70:	80 91 a5 03 	lds	r24, 0x03A5
    1f74:	88 23       	and	r24, r24
    1f76:	19 f0       	breq	.+6      	; 0x1f7e <vTaskSuspend+0x7a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1f78:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1f7e:	80 91 a9 03 	lds	r24, 0x03A9
    1f82:	90 91 01 04 	lds	r25, 0x0401
    1f86:	98 17       	cp	r25, r24
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1f8a:	10 92 9e 03 	sts	0x039E, r1
    1f8e:	10 92 9d 03 	sts	0x039D, r1
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    1f94:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fa8:	60 91 9d 03 	lds	r22, 0x039D
    1fac:	70 91 9e 03 	lds	r23, 0x039E
    1fb0:	64 5f       	subi	r22, 0xF4	; 244
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	0e 94 9c 03 	call	0x738	; 0x738 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fb8:	ce 01       	movw	r24, r28
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>
}
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1fcc:	e0 91 9d 03 	lds	r30, 0x039D
    1fd0:	f0 91 9e 03 	lds	r31, 0x039E
    1fd4:	70 68       	ori	r23, 0x80	; 128
    1fd6:	75 87       	std	Z+13, r23	; 0x0d
    1fd8:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1fda:	60 91 9d 03 	lds	r22, 0x039D
    1fde:	70 91 9e 03 	lds	r23, 0x039E
    1fe2:	64 5f       	subi	r22, 0xF4	; 244
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fea:	ce 01       	movw	r24, r28
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>
}
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2000:	dc 01       	movw	r26, r24
    2002:	15 96       	adiw	r26, 0x05	; 5
    2004:	ed 91       	ld	r30, X+
    2006:	fc 91       	ld	r31, X
    2008:	16 97       	sbiw	r26, 0x06	; 6
    200a:	06 81       	ldd	r16, Z+6	; 0x06
    200c:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    200e:	e8 01       	movw	r28, r16
    2010:	2c 96       	adiw	r28, 0x0c	; 12
    2012:	ce 01       	movw	r24, r28
    2014:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2018:	80 91 9f 03 	lds	r24, 0x039F
    201c:	88 23       	and	r24, r24
    201e:	e9 f4       	brne	.+58     	; 0x205a <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    2020:	e8 01       	movw	r28, r16
    2022:	22 96       	adiw	r28, 0x02	; 2
    2024:	ce 01       	movw	r24, r28
    2026:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    202a:	f8 01       	movw	r30, r16
    202c:	86 89       	ldd	r24, Z+22	; 0x16
    202e:	90 91 a6 03 	lds	r25, 0x03A6
    2032:	98 17       	cp	r25, r24
    2034:	10 f4       	brcc	.+4      	; 0x203a <xTaskRemoveFromEventList+0x42>
    2036:	80 93 a6 03 	sts	0x03A6, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 01       	movw	r18, r24
    203e:	22 0f       	add	r18, r18
    2040:	33 1f       	adc	r19, r19
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	22 0f       	add	r18, r18
    2048:	33 1f       	adc	r19, r19
    204a:	82 0f       	add	r24, r18
    204c:	93 1f       	adc	r25, r19
    204e:	80 55       	subi	r24, 0x50	; 80
    2050:	9c 4f       	sbci	r25, 0xFC	; 252
    2052:	be 01       	movw	r22, r28
    2054:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    205a:	8f ee       	ldi	r24, 0xEF	; 239
    205c:	93 e0       	ldi	r25, 0x03	; 3
    205e:	be 01       	movw	r22, r28
    2060:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2064:	e0 91 9d 03 	lds	r30, 0x039D
    2068:	f0 91 9e 03 	lds	r31, 0x039E
    206c:	d8 01       	movw	r26, r16
    206e:	56 96       	adiw	r26, 0x16	; 22
    2070:	9c 91       	ld	r25, X
    2072:	56 97       	sbiw	r26, 0x16	; 22
    2074:	86 89       	ldd	r24, Z+22	; 0x16
    2076:	89 17       	cp	r24, r25
    2078:	20 f4       	brcc	.+8      	; 0x2082 <xTaskRemoveFromEventList+0x8a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 a3 03 	sts	0x03A3, r24
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		xReturn = pdFALSE;
    2082:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2096:	70 68       	ori	r23, 0x80	; 128
    2098:	fc 01       	movw	r30, r24
    209a:	71 83       	std	Z+1, r23	; 0x01
    209c:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    209e:	c6 81       	ldd	r28, Z+6	; 0x06
    20a0:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    20a2:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    20a6:	8e 01       	movw	r16, r28
    20a8:	0e 5f       	subi	r16, 0xFE	; 254
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
    20ac:	c8 01       	movw	r24, r16
    20ae:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    20b2:	8e 89       	ldd	r24, Y+22	; 0x16
    20b4:	90 91 a6 03 	lds	r25, 0x03A6
    20b8:	98 17       	cp	r25, r24
    20ba:	10 f4       	brcc	.+4      	; 0x20c0 <xTaskRemoveFromUnorderedEventList+0x32>
    20bc:	80 93 a6 03 	sts	0x03A6, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	80 55       	subi	r24, 0x50	; 80
    20d6:	9c 4f       	sbci	r25, 0xFC	; 252
    20d8:	b8 01       	movw	r22, r16
    20da:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    20de:	e0 91 9d 03 	lds	r30, 0x039D
    20e2:	f0 91 9e 03 	lds	r31, 0x039E
    20e6:	9e 89       	ldd	r25, Y+22	; 0x16
    20e8:	86 89       	ldd	r24, Z+22	; 0x16
    20ea:	89 17       	cp	r24, r25
    20ec:	20 f4       	brcc	.+8      	; 0x20f6 <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 a3 03 	sts	0x03A3, r24
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    20f6:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    2102:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2104:	80 91 a2 03 	lds	r24, 0x03A2
    2108:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    210a:	80 91 a7 03 	lds	r24, 0x03A7
    210e:	90 91 a8 03 	lds	r25, 0x03A8
    2112:	92 83       	std	Z+2, r25	; 0x02
    2114:	81 83       	std	Z+1, r24	; 0x01
}
    2116:	08 95       	ret

00002118 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2118:	fc 01       	movw	r30, r24
    211a:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2122:	60 91 a7 03 	lds	r22, 0x03A7
    2126:	70 91 a8 03 	lds	r23, 0x03A8
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    212a:	4d 91       	ld	r20, X+
    212c:	5c 91       	ld	r21, X
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	4f 3f       	cpi	r20, 0xFF	; 255
    2134:	58 07       	cpc	r21, r24
    2136:	e9 f0       	breq	.+58     	; 0x2172 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2138:	80 91 a2 03 	lds	r24, 0x03A2
    213c:	90 81       	ld	r25, Z
    213e:	98 17       	cp	r25, r24
    2140:	29 f0       	breq	.+10     	; 0x214c <xTaskCheckForTimeOut+0x34>
    2142:	81 81       	ldd	r24, Z+1	; 0x01
    2144:	92 81       	ldd	r25, Z+2	; 0x02
    2146:	68 17       	cp	r22, r24
    2148:	79 07       	cpc	r23, r25
    214a:	a8 f4       	brcc	.+42     	; 0x2176 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    214c:	81 81       	ldd	r24, Z+1	; 0x01
    214e:	92 81       	ldd	r25, Z+2	; 0x02
    2150:	9b 01       	movw	r18, r22
    2152:	28 1b       	sub	r18, r24
    2154:	39 0b       	sbc	r19, r25
    2156:	24 17       	cp	r18, r20
    2158:	35 07       	cpc	r19, r21
    215a:	78 f4       	brcc	.+30     	; 0x217a <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    215c:	86 1b       	sub	r24, r22
    215e:	97 0b       	sbc	r25, r23
    2160:	84 0f       	add	r24, r20
    2162:	95 1f       	adc	r25, r21
    2164:	8d 93       	st	X+, r24
    2166:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    2168:	cf 01       	movw	r24, r30
    216a:	0e 94 81 10 	call	0x2102	; 0x2102 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	05 c0       	rjmp	.+10     	; 0x217c <xTaskCheckForTimeOut+0x64>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	03 c0       	rjmp	.+6      	; 0x217c <xTaskCheckForTimeOut+0x64>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	01 c0       	rjmp	.+2      	; 0x217c <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    217a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    217c:	0f 90       	pop	r0
    217e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    2180:	08 95       	ret

00002182 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	80 93 a3 03 	sts	0x03A3, r24
}
    2188:	08 95       	ret

0000218a <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    218a:	80 91 9d 03 	lds	r24, 0x039D
    218e:	90 91 9e 03 	lds	r25, 0x039E

		return xReturn;
	}
    2192:	08 95       	ret

00002194 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <vTaskPriorityInherit+0x10>
    21a2:	51 c0       	rjmp	.+162    	; 0x2246 <vTaskPriorityInherit+0xb2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    21a4:	8e 89       	ldd	r24, Y+22	; 0x16
    21a6:	e0 91 9d 03 	lds	r30, 0x039D
    21aa:	f0 91 9e 03 	lds	r31, 0x039E
    21ae:	96 89       	ldd	r25, Z+22	; 0x16
    21b0:	89 17       	cp	r24, r25
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <vTaskPriorityInherit+0x22>
    21b4:	48 c0       	rjmp	.+144    	; 0x2246 <vTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    21b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    21b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    21ba:	33 23       	and	r19, r19
    21bc:	5c f0       	brlt	.+22     	; 0x21d4 <vTaskPriorityInherit+0x40>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    21be:	e0 91 9d 03 	lds	r30, 0x039D
    21c2:	f0 91 9e 03 	lds	r31, 0x039E
    21c6:	96 89       	ldd	r25, Z+22	; 0x16
    21c8:	25 e0       	ldi	r18, 0x05	; 5
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	29 1b       	sub	r18, r25
    21ce:	31 09       	sbc	r19, r1
    21d0:	3d 87       	std	Y+13, r19	; 0x0d
    21d2:	2c 87       	std	Y+12, r18	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9c 01       	movw	r18, r24
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	22 0f       	add	r18, r18
    21de:	33 1f       	adc	r19, r19
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	80 55       	subi	r24, 0x50	; 80
    21ea:	9c 4f       	sbci	r25, 0xFC	; 252
    21ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    21ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    21f0:	28 17       	cp	r18, r24
    21f2:	39 07       	cpc	r19, r25
    21f4:	11 f5       	brne	.+68     	; 0x223a <vTaskPriorityInherit+0xa6>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    21f6:	8e 01       	movw	r16, r28
    21f8:	0e 5f       	subi	r16, 0xFE	; 254
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	c8 01       	movw	r24, r16
    21fe:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2202:	e0 91 9d 03 	lds	r30, 0x039D
    2206:	f0 91 9e 03 	lds	r31, 0x039E
    220a:	86 89       	ldd	r24, Z+22	; 0x16
    220c:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    220e:	90 91 a6 03 	lds	r25, 0x03A6
    2212:	98 17       	cp	r25, r24
    2214:	10 f4       	brcc	.+4      	; 0x221a <vTaskPriorityInherit+0x86>
    2216:	80 93 a6 03 	sts	0x03A6, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 01       	movw	r18, r24
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	22 0f       	add	r18, r18
    2224:	33 1f       	adc	r19, r19
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	80 55       	subi	r24, 0x50	; 80
    2230:	9c 4f       	sbci	r25, 0xFC	; 252
    2232:	b8 01       	movw	r22, r16
    2234:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <vTaskPriorityInherit+0xb2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    223a:	e0 91 9d 03 	lds	r30, 0x039D
    223e:	f0 91 9e 03 	lds	r31, 0x039E
    2242:	86 89       	ldd	r24, Z+22	; 0x16
    2244:	8e 8b       	std	Y+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	08 95       	ret

00002250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	ec 01       	movw	r28, r24
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	81 f1       	breq	.+96     	; 0x22be <xTaskPriorityDisinherit+0x6e>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    225e:	8c a1       	lds	r24, 0x4c
    2260:	81 50       	subi	r24, 0x01	; 1
    2262:	8c a3       	lds	r24, 0x5c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2264:	2e 89       	ldd	r18, Y+22	; 0x16
    2266:	9b a1       	lds	r25, 0x4b
    2268:	29 17       	cp	r18, r25
    226a:	59 f1       	breq	.+86     	; 0x22c2 <xTaskPriorityDisinherit+0x72>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    226c:	88 23       	and	r24, r24
    226e:	59 f5       	brne	.+86     	; 0x22c6 <xTaskPriorityDisinherit+0x76>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2270:	8e 01       	movw	r16, r28
    2272:	0e 5f       	subi	r16, 0xFE	; 254
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	c8 01       	movw	r24, r16
    2278:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    227c:	4b a1       	lds	r20, 0x4b
    227e:	4e 8b       	std	Y+22, r20	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2280:	24 2f       	mov	r18, r20
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	85 e0       	ldi	r24, 0x05	; 5
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	82 1b       	sub	r24, r18
    228a:	93 0b       	sbc	r25, r19
    228c:	9d 87       	std	Y+13, r25	; 0x0d
    228e:	8c 87       	std	Y+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    2290:	80 91 a6 03 	lds	r24, 0x03A6
    2294:	84 17       	cp	r24, r20
    2296:	10 f4       	brcc	.+4      	; 0x229c <xTaskPriorityDisinherit+0x4c>
    2298:	40 93 a6 03 	sts	0x03A6, r20
    229c:	c9 01       	movw	r24, r18
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	28 0f       	add	r18, r24
    22ac:	39 1f       	adc	r19, r25
    22ae:	c9 01       	movw	r24, r18
    22b0:	80 55       	subi	r24, 0x50	; 80
    22b2:	9c 4f       	sbci	r25, 0xFC	; 252
    22b4:	b8 01       	movw	r22, r16
    22b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <xTaskPriorityDisinherit+0x78>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <xTaskPriorityDisinherit+0x78>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <xTaskPriorityDisinherit+0x78>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	08 95       	ret

000022d2 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    22d2:	e0 91 9d 03 	lds	r30, 0x039D
    22d6:	f0 91 9e 03 	lds	r31, 0x039E
    22da:	84 85       	ldd	r24, Z+12	; 0x0c
    22dc:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22de:	e0 91 9d 03 	lds	r30, 0x039D
    22e2:	f0 91 9e 03 	lds	r31, 0x039E
    22e6:	a0 91 9d 03 	lds	r26, 0x039D
    22ea:	b0 91 9e 03 	lds	r27, 0x039E
    22ee:	56 96       	adiw	r26, 0x16	; 22
    22f0:	4c 91       	ld	r20, X
    22f2:	56 97       	sbiw	r26, 0x16	; 22
    22f4:	25 e0       	ldi	r18, 0x05	; 5
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	24 1b       	sub	r18, r20
    22fa:	31 09       	sbc	r19, r1
    22fc:	35 87       	std	Z+13, r19	; 0x0d
    22fe:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    2300:	08 95       	ret

00002302 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2302:	80 91 9d 03 	lds	r24, 0x039D
    2306:	90 91 9e 03 	lds	r25, 0x039E
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	39 f0       	breq	.+14     	; 0x231c <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    230e:	e0 91 9d 03 	lds	r30, 0x039D
    2312:	f0 91 9e 03 	lds	r31, 0x039E
    2316:	84 a1       	lds	r24, 0x44
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	84 a3       	lds	r24, 0x54
		}

		return pxCurrentTCB;
    231c:	80 91 9d 03 	lds	r24, 0x039D
    2320:	90 91 9e 03 	lds	r25, 0x039E
	}
    2324:	08 95       	ret

00002326 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	c8 2f       	mov	r28, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    2334:	e0 91 9d 03 	lds	r30, 0x039D
    2338:	f0 91 9e 03 	lds	r31, 0x039E
    233c:	85 a1       	lds	r24, 0x45
    233e:	96 a1       	lds	r25, 0x46
    2340:	a7 a1       	lds	r26, 0x47
    2342:	b0 a5       	lds	r27, 0x60
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	a1 05       	cpc	r26, r1
    2348:	b1 05       	cpc	r27, r1
    234a:	79 f4       	brne	.+30     	; 0x236a <ulTaskNotifyTake+0x44>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    234c:	e0 91 9d 03 	lds	r30, 0x039D
    2350:	f0 91 9e 03 	lds	r31, 0x039E
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    2358:	61 15       	cp	r22, r1
    235a:	71 05       	cpc	r23, r1
    235c:	31 f0       	breq	.+12     	; 0x236a <ulTaskNotifyTake+0x44>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    235e:	cb 01       	movw	r24, r22
    2360:	61 e0       	ldi	r22, 0x01	; 1
    2362:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2366:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    236a:	0f 90       	pop	r0
    236c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    2374:	e0 91 9d 03 	lds	r30, 0x039D
    2378:	f0 91 9e 03 	lds	r31, 0x039E
    237c:	05 a1       	lds	r16, 0x45
    237e:	16 a1       	lds	r17, 0x46
    2380:	27 a1       	lds	r18, 0x47
    2382:	30 a5       	lds	r19, 0x60

			if( ulReturn != 0UL )
    2384:	01 15       	cp	r16, r1
    2386:	11 05       	cpc	r17, r1
    2388:	21 05       	cpc	r18, r1
    238a:	31 05       	cpc	r19, r1
    238c:	c1 f0       	breq	.+48     	; 0x23be <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    238e:	cc 23       	and	r28, r28
    2390:	49 f0       	breq	.+18     	; 0x23a4 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    2392:	e0 91 9d 03 	lds	r30, 0x039D
    2396:	f0 91 9e 03 	lds	r31, 0x039E
    239a:	15 a2       	lds	r17, 0x95
    239c:	16 a2       	lds	r17, 0x96
    239e:	17 a2       	lds	r17, 0x97
    23a0:	10 a6       	lds	r17, 0xb0
    23a2:	0d c0       	rjmp	.+26     	; 0x23be <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    23a4:	e0 91 9d 03 	lds	r30, 0x039D
    23a8:	f0 91 9e 03 	lds	r31, 0x039E
    23ac:	d9 01       	movw	r26, r18
    23ae:	c8 01       	movw	r24, r16
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	a1 09       	sbc	r26, r1
    23b4:	b1 09       	sbc	r27, r1
    23b6:	85 a3       	lds	r24, 0x55
    23b8:	96 a3       	lds	r25, 0x56
    23ba:	a7 a3       	lds	r26, 0x57
    23bc:	b0 a7       	lds	r27, 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    23be:	e0 91 9d 03 	lds	r30, 0x039D
    23c2:	f0 91 9e 03 	lds	r31, 0x039E
    23c6:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    23c8:	0f 90       	pop	r0
    23ca:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    23cc:	60 2f       	mov	r22, r16
    23ce:	71 2f       	mov	r23, r17
    23d0:	82 2f       	mov	r24, r18
    23d2:	93 2f       	mov	r25, r19
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    23dc:	8f 92       	push	r8
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	49 01       	movw	r8, r18
    23f2:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    23fa:	e0 91 9d 03 	lds	r30, 0x039D
    23fe:	f0 91 9e 03 	lds	r31, 0x039E
    2402:	21 a5       	lds	r18, 0x61
    2404:	22 30       	cpi	r18, 0x02	; 2
    2406:	19 f1       	breq	.+70     	; 0x244e <xTaskNotifyWait+0x72>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    2408:	e0 91 9d 03 	lds	r30, 0x039D
    240c:	f0 91 9e 03 	lds	r31, 0x039E
    2410:	45 a1       	lds	r20, 0x45
    2412:	56 a1       	lds	r21, 0x46
    2414:	67 a1       	lds	r22, 0x47
    2416:	70 a5       	lds	r23, 0x60
    2418:	80 95       	com	r24
    241a:	90 95       	com	r25
    241c:	a0 95       	com	r26
    241e:	b0 95       	com	r27
    2420:	84 23       	and	r24, r20
    2422:	95 23       	and	r25, r21
    2424:	a6 23       	and	r26, r22
    2426:	b7 23       	and	r27, r23
    2428:	85 a3       	lds	r24, 0x55
    242a:	96 a3       	lds	r25, 0x56
    242c:	a7 a3       	lds	r26, 0x57
    242e:	b0 a7       	lds	r27, 0x70

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    2430:	e0 91 9d 03 	lds	r30, 0x039D
    2434:	f0 91 9e 03 	lds	r31, 0x039E
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	81 a7       	lds	r24, 0x71

				if( xTicksToWait > ( TickType_t ) 0 )
    243c:	e1 14       	cp	r14, r1
    243e:	f1 04       	cpc	r15, r1
    2440:	31 f0       	breq	.+12     	; 0x244e <xTaskNotifyWait+0x72>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2442:	c7 01       	movw	r24, r14
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	0e 94 28 0a 	call	0x1450	; 0x1450 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    244a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    244e:	0f 90       	pop	r0
    2450:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    2458:	01 15       	cp	r16, r1
    245a:	11 05       	cpc	r17, r1
    245c:	69 f0       	breq	.+26     	; 0x2478 <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    245e:	e0 91 9d 03 	lds	r30, 0x039D
    2462:	f0 91 9e 03 	lds	r31, 0x039E
    2466:	85 a1       	lds	r24, 0x45
    2468:	96 a1       	lds	r25, 0x46
    246a:	a7 a1       	lds	r26, 0x47
    246c:	b0 a5       	lds	r27, 0x60
    246e:	f8 01       	movw	r30, r16
    2470:	80 83       	st	Z, r24
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	a2 83       	std	Z+2, r26	; 0x02
    2476:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    2478:	e0 91 9d 03 	lds	r30, 0x039D
    247c:	f0 91 9e 03 	lds	r31, 0x039E
    2480:	81 a5       	lds	r24, 0x61
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	b1 f0       	breq	.+44     	; 0x24b2 <xTaskNotifyWait+0xd6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2486:	e0 91 9d 03 	lds	r30, 0x039D
    248a:	f0 91 9e 03 	lds	r31, 0x039E
    248e:	85 a1       	lds	r24, 0x45
    2490:	96 a1       	lds	r25, 0x46
    2492:	a7 a1       	lds	r26, 0x47
    2494:	b0 a5       	lds	r27, 0x60
    2496:	80 94       	com	r8
    2498:	90 94       	com	r9
    249a:	a0 94       	com	r10
    249c:	b0 94       	com	r11
    249e:	88 22       	and	r8, r24
    24a0:	99 22       	and	r9, r25
    24a2:	aa 22       	and	r10, r26
    24a4:	bb 22       	and	r11, r27
    24a6:	85 a2       	lds	r24, 0x95
    24a8:	96 a2       	lds	r25, 0x96
    24aa:	a7 a2       	lds	r26, 0x97
    24ac:	b0 a6       	lds	r27, 0xb0
				xReturn = pdTRUE;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <xTaskNotifyWait+0xd8>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    24b2:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    24b4:	e0 91 9d 03 	lds	r30, 0x039D
    24b8:	f0 91 9e 03 	lds	r31, 0x039E
    24bc:	11 a6       	lds	r17, 0xb1
		}
		taskEXIT_CRITICAL();
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	bf 90       	pop	r11
    24cc:	af 90       	pop	r10
    24ce:	9f 90       	pop	r9
    24d0:	8f 90       	pop	r8
    24d2:	08 95       	ret

000024d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	ec 01       	movw	r28, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    24e4:	01 15       	cp	r16, r1
    24e6:	11 05       	cpc	r17, r1
    24e8:	49 f0       	breq	.+18     	; 0x24fc <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    24ea:	8d a1       	lds	r24, 0x4d
    24ec:	9e a1       	lds	r25, 0x4e
    24ee:	af a1       	lds	r26, 0x4f
    24f0:	b8 a5       	lds	r27, 0x68
    24f2:	f8 01       	movw	r30, r16
    24f4:	80 83       	st	Z, r24
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	a2 83       	std	Z+2, r26	; 0x02
    24fa:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    24fc:	39 a5       	lds	r19, 0x69

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	89 a7       	lds	r24, 0x79

			switch( eAction )
    2502:	22 30       	cpi	r18, 0x02	; 2
    2504:	b9 f0       	breq	.+46     	; 0x2534 <xTaskGenericNotify+0x60>
    2506:	23 30       	cpi	r18, 0x03	; 3
    2508:	18 f4       	brcc	.+6      	; 0x2510 <xTaskGenericNotify+0x3c>
    250a:	21 30       	cpi	r18, 0x01	; 1
    250c:	51 f5       	brne	.+84     	; 0x2562 <xTaskGenericNotify+0x8e>
    250e:	05 c0       	rjmp	.+10     	; 0x251a <xTaskGenericNotify+0x46>
    2510:	23 30       	cpi	r18, 0x03	; 3
    2512:	e1 f0       	breq	.+56     	; 0x254c <xTaskGenericNotify+0x78>
    2514:	24 30       	cpi	r18, 0x04	; 4
    2516:	29 f5       	brne	.+74     	; 0x2562 <xTaskGenericNotify+0x8e>
    2518:	1e c0       	rjmp	.+60     	; 0x2556 <xTaskGenericNotify+0x82>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    251a:	8d a1       	lds	r24, 0x4d
    251c:	9e a1       	lds	r25, 0x4e
    251e:	af a1       	lds	r26, 0x4f
    2520:	b8 a5       	lds	r27, 0x68
    2522:	48 2b       	or	r20, r24
    2524:	59 2b       	or	r21, r25
    2526:	6a 2b       	or	r22, r26
    2528:	7b 2b       	or	r23, r27
    252a:	4d a3       	lds	r20, 0x5d
    252c:	5e a3       	lds	r21, 0x5e
    252e:	6f a3       	lds	r22, 0x5f
    2530:	78 a7       	lds	r23, 0x78
					break;
    2532:	17 c0       	rjmp	.+46     	; 0x2562 <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2534:	8d a1       	lds	r24, 0x4d
    2536:	9e a1       	lds	r25, 0x4e
    2538:	af a1       	lds	r26, 0x4f
    253a:	b8 a5       	lds	r27, 0x68
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	a1 1d       	adc	r26, r1
    2540:	b1 1d       	adc	r27, r1
    2542:	8d a3       	lds	r24, 0x5d
    2544:	9e a3       	lds	r25, 0x5e
    2546:	af a3       	lds	r26, 0x5f
    2548:	b8 a7       	lds	r27, 0x78
					break;
    254a:	0b c0       	rjmp	.+22     	; 0x2562 <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    254c:	4d a3       	lds	r20, 0x5d
    254e:	5e a3       	lds	r21, 0x5e
    2550:	6f a3       	lds	r22, 0x5f
    2552:	78 a7       	lds	r23, 0x78
					break;
    2554:	06 c0       	rjmp	.+12     	; 0x2562 <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2556:	32 30       	cpi	r19, 0x02	; 2
    2558:	71 f1       	breq	.+92     	; 0x25b6 <xTaskGenericNotify+0xe2>
					{
						pxTCB->ulNotifiedValue = ulValue;
    255a:	4d a3       	lds	r20, 0x5d
    255c:	5e a3       	lds	r21, 0x5e
    255e:	6f a3       	lds	r22, 0x5f
    2560:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2562:	31 30       	cpi	r19, 0x01	; 1
    2564:	51 f5       	brne	.+84     	; 0x25ba <xTaskGenericNotify+0xe6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2566:	8e 01       	movw	r16, r28
    2568:	0e 5f       	subi	r16, 0xFE	; 254
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	c8 01       	movw	r24, r16
    256e:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2572:	8e 89       	ldd	r24, Y+22	; 0x16
    2574:	90 91 a6 03 	lds	r25, 0x03A6
    2578:	98 17       	cp	r25, r24
    257a:	10 f4       	brcc	.+4      	; 0x2580 <xTaskGenericNotify+0xac>
    257c:	80 93 a6 03 	sts	0x03A6, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 01       	movw	r18, r24
    2584:	22 0f       	add	r18, r18
    2586:	33 1f       	adc	r19, r19
    2588:	22 0f       	add	r18, r18
    258a:	33 1f       	adc	r19, r19
    258c:	22 0f       	add	r18, r18
    258e:	33 1f       	adc	r19, r19
    2590:	82 0f       	add	r24, r18
    2592:	93 1f       	adc	r25, r19
    2594:	80 55       	subi	r24, 0x50	; 80
    2596:	9c 4f       	sbci	r25, 0xFC	; 252
    2598:	b8 01       	movw	r22, r16
    259a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    259e:	e0 91 9d 03 	lds	r30, 0x039D
    25a2:	f0 91 9e 03 	lds	r31, 0x039E
    25a6:	9e 89       	ldd	r25, Y+22	; 0x16
    25a8:	86 89       	ldd	r24, Z+22	; 0x16
    25aa:	89 17       	cp	r24, r25
    25ac:	40 f4       	brcc	.+16     	; 0x25be <xTaskGenericNotify+0xea>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    25ae:	0e 94 0d 05 	call	0xa1a	; 0xa1a <vPortYield>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	05 c0       	rjmp	.+10     	; 0x25c0 <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <xTaskGenericNotify+0xec>

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <xTaskGenericNotify+0xec>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    25be:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    25c0:	0f 90       	pop	r0
    25c2:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	ec 01       	movw	r28, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    25dc:	01 15       	cp	r16, r1
    25de:	11 05       	cpc	r17, r1
    25e0:	49 f0       	breq	.+18     	; 0x25f4 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    25e2:	8d a1       	lds	r24, 0x4d
    25e4:	9e a1       	lds	r25, 0x4e
    25e6:	af a1       	lds	r26, 0x4f
    25e8:	b8 a5       	lds	r27, 0x68
    25ea:	f8 01       	movw	r30, r16
    25ec:	80 83       	st	Z, r24
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	a2 83       	std	Z+2, r26	; 0x02
    25f2:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    25f4:	39 a5       	lds	r19, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	89 a7       	lds	r24, 0x79

			switch( eAction )
    25fa:	22 30       	cpi	r18, 0x02	; 2
    25fc:	b9 f0       	breq	.+46     	; 0x262c <xTaskGenericNotifyFromISR+0x5e>
    25fe:	23 30       	cpi	r18, 0x03	; 3
    2600:	18 f4       	brcc	.+6      	; 0x2608 <xTaskGenericNotifyFromISR+0x3a>
    2602:	21 30       	cpi	r18, 0x01	; 1
    2604:	59 f5       	brne	.+86     	; 0x265c <xTaskGenericNotifyFromISR+0x8e>
    2606:	05 c0       	rjmp	.+10     	; 0x2612 <xTaskGenericNotifyFromISR+0x44>
    2608:	23 30       	cpi	r18, 0x03	; 3
    260a:	e1 f0       	breq	.+56     	; 0x2644 <xTaskGenericNotifyFromISR+0x76>
    260c:	24 30       	cpi	r18, 0x04	; 4
    260e:	31 f5       	brne	.+76     	; 0x265c <xTaskGenericNotifyFromISR+0x8e>
    2610:	1e c0       	rjmp	.+60     	; 0x264e <xTaskGenericNotifyFromISR+0x80>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2612:	8d a1       	lds	r24, 0x4d
    2614:	9e a1       	lds	r25, 0x4e
    2616:	af a1       	lds	r26, 0x4f
    2618:	b8 a5       	lds	r27, 0x68
    261a:	84 2b       	or	r24, r20
    261c:	95 2b       	or	r25, r21
    261e:	a6 2b       	or	r26, r22
    2620:	b7 2b       	or	r27, r23
    2622:	8d a3       	lds	r24, 0x5d
    2624:	9e a3       	lds	r25, 0x5e
    2626:	af a3       	lds	r26, 0x5f
    2628:	b8 a7       	lds	r27, 0x78
					break;
    262a:	18 c0       	rjmp	.+48     	; 0x265c <xTaskGenericNotifyFromISR+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    262c:	8d a1       	lds	r24, 0x4d
    262e:	9e a1       	lds	r25, 0x4e
    2630:	af a1       	lds	r26, 0x4f
    2632:	b8 a5       	lds	r27, 0x68
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	a1 1d       	adc	r26, r1
    2638:	b1 1d       	adc	r27, r1
    263a:	8d a3       	lds	r24, 0x5d
    263c:	9e a3       	lds	r25, 0x5e
    263e:	af a3       	lds	r26, 0x5f
    2640:	b8 a7       	lds	r27, 0x78
					break;
    2642:	0c c0       	rjmp	.+24     	; 0x265c <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    2644:	4d a3       	lds	r20, 0x5d
    2646:	5e a3       	lds	r21, 0x5e
    2648:	6f a3       	lds	r22, 0x5f
    264a:	78 a7       	lds	r23, 0x78
					break;
    264c:	07 c0       	rjmp	.+14     	; 0x265c <xTaskGenericNotifyFromISR+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    264e:	32 30       	cpi	r19, 0x02	; 2
    2650:	09 f4       	brne	.+2      	; 0x2654 <xTaskGenericNotifyFromISR+0x86>
    2652:	41 c0       	rjmp	.+130    	; 0x26d6 <xTaskGenericNotifyFromISR+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2654:	4d a3       	lds	r20, 0x5d
    2656:	5e a3       	lds	r21, 0x5e
    2658:	6f a3       	lds	r22, 0x5f
    265a:	78 a7       	lds	r23, 0x78

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    265c:	31 30       	cpi	r19, 0x01	; 1
    265e:	e9 f5       	brne	.+122    	; 0x26da <xTaskGenericNotifyFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2660:	80 91 9f 03 	lds	r24, 0x039F
    2664:	88 23       	and	r24, r24
    2666:	e9 f4       	brne	.+58     	; 0x26a2 <xTaskGenericNotifyFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2668:	8e 01       	movw	r16, r28
    266a:	0e 5f       	subi	r16, 0xFE	; 254
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	c8 01       	movw	r24, r16
    2670:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2674:	8e 89       	ldd	r24, Y+22	; 0x16
    2676:	90 91 a6 03 	lds	r25, 0x03A6
    267a:	98 17       	cp	r25, r24
    267c:	10 f4       	brcc	.+4      	; 0x2682 <xTaskGenericNotifyFromISR+0xb4>
    267e:	80 93 a6 03 	sts	0x03A6, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 01       	movw	r18, r24
    2686:	22 0f       	add	r18, r18
    2688:	33 1f       	adc	r19, r19
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	22 0f       	add	r18, r18
    2690:	33 1f       	adc	r19, r19
    2692:	82 0f       	add	r24, r18
    2694:	93 1f       	adc	r25, r19
    2696:	80 55       	subi	r24, 0x50	; 80
    2698:	9c 4f       	sbci	r25, 0xFC	; 252
    269a:	b8 01       	movw	r22, r16
    269c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    26a0:	07 c0       	rjmp	.+14     	; 0x26b0 <xTaskGenericNotifyFromISR+0xe2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    26a2:	be 01       	movw	r22, r28
    26a4:	64 5f       	subi	r22, 0xF4	; 244
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f ee       	ldi	r24, 0xEF	; 239
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26b0:	e0 91 9d 03 	lds	r30, 0x039D
    26b4:	f0 91 9e 03 	lds	r31, 0x039E
    26b8:	9e 89       	ldd	r25, Y+22	; 0x16
    26ba:	86 89       	ldd	r24, Z+22	; 0x16
    26bc:	89 17       	cp	r24, r25
    26be:	78 f4       	brcc	.+30     	; 0x26de <xTaskGenericNotifyFromISR+0x110>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    26c0:	e1 14       	cp	r14, r1
    26c2:	f1 04       	cpc	r15, r1
    26c4:	21 f0       	breq	.+8      	; 0x26ce <xTaskGenericNotifyFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	f7 01       	movw	r30, r14
    26ca:	80 83       	st	Z, r24
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <xTaskGenericNotifyFromISR+0x112>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 a3 03 	sts	0x03A3, r24
    26d4:	05 c0       	rjmp	.+10     	; 0x26e0 <xTaskGenericNotifyFromISR+0x112>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <xTaskGenericNotifyFromISR+0x112>

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <xTaskGenericNotifyFromISR+0x112>
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26de:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	08 95       	ret

000026ee <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	ec 01       	movw	r28, r24
    26fc:	8b 01       	movw	r16, r22

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    26fe:	29 a5       	lds	r18, 0x69
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	89 a7       	lds	r24, 0x79

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    2704:	8d a1       	lds	r24, 0x4d
    2706:	9e a1       	lds	r25, 0x4e
    2708:	af a1       	lds	r26, 0x4f
    270a:	b8 a5       	lds	r27, 0x68
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	a1 1d       	adc	r26, r1
    2710:	b1 1d       	adc	r27, r1
    2712:	8d a3       	lds	r24, 0x5d
    2714:	9e a3       	lds	r25, 0x5e
    2716:	af a3       	lds	r26, 0x5f
    2718:	b8 a7       	lds	r27, 0x78

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    271a:	21 30       	cpi	r18, 0x01	; 1
    271c:	e9 f5       	brne	.+122    	; 0x2798 <vTaskNotifyGiveFromISR+0xaa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    271e:	80 91 9f 03 	lds	r24, 0x039F
    2722:	88 23       	and	r24, r24
    2724:	01 f5       	brne	.+64     	; 0x2766 <vTaskNotifyGiveFromISR+0x78>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2726:	ee 24       	eor	r14, r14
    2728:	ff 24       	eor	r15, r15
    272a:	68 94       	set
    272c:	e1 f8       	bld	r14, 1
    272e:	ec 0e       	add	r14, r28
    2730:	fd 1e       	adc	r15, r29
    2732:	c7 01       	movw	r24, r14
    2734:	0e 94 ce 03 	call	0x79c	; 0x79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2738:	8e 89       	ldd	r24, Y+22	; 0x16
    273a:	90 91 a6 03 	lds	r25, 0x03A6
    273e:	98 17       	cp	r25, r24
    2740:	10 f4       	brcc	.+4      	; 0x2746 <vTaskNotifyGiveFromISR+0x58>
    2742:	80 93 a6 03 	sts	0x03A6, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9c 01       	movw	r18, r24
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	22 0f       	add	r18, r18
    2754:	33 1f       	adc	r19, r19
    2756:	82 0f       	add	r24, r18
    2758:	93 1f       	adc	r25, r19
    275a:	80 55       	subi	r24, 0x50	; 80
    275c:	9c 4f       	sbci	r25, 0xFC	; 252
    275e:	b7 01       	movw	r22, r14
    2760:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
    2764:	07 c0       	rjmp	.+14     	; 0x2774 <vTaskNotifyGiveFromISR+0x86>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2766:	be 01       	movw	r22, r28
    2768:	64 5f       	subi	r22, 0xF4	; 244
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	8f ee       	ldi	r24, 0xEF	; 239
    276e:	93 e0       	ldi	r25, 0x03	; 3
    2770:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2774:	e0 91 9d 03 	lds	r30, 0x039D
    2778:	f0 91 9e 03 	lds	r31, 0x039E
    277c:	9e 89       	ldd	r25, Y+22	; 0x16
    277e:	86 89       	ldd	r24, Z+22	; 0x16
    2780:	89 17       	cp	r24, r25
    2782:	50 f4       	brcc	.+20     	; 0x2798 <vTaskNotifyGiveFromISR+0xaa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2784:	01 15       	cp	r16, r1
    2786:	11 05       	cpc	r17, r1
    2788:	21 f0       	breq	.+8      	; 0x2792 <vTaskNotifyGiveFromISR+0xa4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	f8 01       	movw	r30, r16
    278e:	80 83       	st	Z, r24
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <vTaskNotifyGiveFromISR+0xaa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	80 93 a3 03 	sts	0x03A3, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	08 95       	ret

000027a6 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	29 f4       	brne	.+10     	; 0x27b4 <xTaskNotifyStateClear+0xe>
    27aa:	e0 91 9d 03 	lds	r30, 0x039D
    27ae:	f0 91 9e 03 	lds	r31, 0x039E
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <xTaskNotifyStateClear+0x10>
    27b4:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27bc:	81 a5       	lds	r24, 0x61
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	19 f4       	brne	.+6      	; 0x27c8 <xTaskNotifyStateClear+0x22>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27c2:	11 a6       	lds	r17, 0xb1
				xReturn = pdPASS;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <xTaskNotifyStateClear+0x24>
			}
			else
			{
				xReturn = pdFAIL;
    27c8:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    27ce:	08 95       	ret

000027d0 <memcpy>:
    27d0:	fb 01       	movw	r30, r22
    27d2:	dc 01       	movw	r26, r24
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <memcpy+0xa>
    27d6:	01 90       	ld	r0, Z+
    27d8:	0d 92       	st	X+, r0
    27da:	41 50       	subi	r20, 0x01	; 1
    27dc:	50 40       	sbci	r21, 0x00	; 0
    27de:	d8 f7       	brcc	.-10     	; 0x27d6 <memcpy+0x6>
    27e0:	08 95       	ret

000027e2 <_exit>:
    27e2:	f8 94       	cli

000027e4 <__stop_program>:
    27e4:	ff cf       	rjmp	.-2      	; 0x27e4 <__stop_program>
