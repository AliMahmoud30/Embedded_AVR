
Hello_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000696  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000696  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b52  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000384  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d8  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c5  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064c  00000000  00000000  000028f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  8a:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <Send_Val_to_LCD>:
	  	//_delay_ms(100);
    }
}

void Send_Val_to_LCD(u16 u16_Value)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	 if (u16_Value<10)
 1dc:	8a 30       	cpi	r24, 0x0A	; 10
 1de:	91 05       	cpc	r25, r1
 1e0:	70 f4       	brcc	.+28     	; 0x1fe <Send_Val_to_LCD+0x2c>
	 {
		 LCD_send_char(48);
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(48);
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(48);
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(u16_Value+48);
 1f4:	8c 2f       	mov	r24, r28
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
 1fc:	62 c0       	rjmp	.+196    	; 0x2c2 <Send_Val_to_LCD+0xf0>
	 }
	 else if(u16_Value<100)
 1fe:	84 36       	cpi	r24, 0x64	; 100
 200:	91 05       	cpc	r25, r1
 202:	a8 f4       	brcc	.+42     	; 0x22e <Send_Val_to_LCD+0x5c>
	 {
		 LCD_send_char(48);
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(48);
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char((u16_Value/10)+48);
 210:	ce 01       	movw	r24, r28
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 21a:	c8 2f       	mov	r28, r24
 21c:	86 2f       	mov	r24, r22
 21e:	80 5d       	subi	r24, 0xD0	; 208
 220:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char((u16_Value%10)+48);
 224:	8c 2f       	mov	r24, r28
 226:	80 5d       	subi	r24, 0xD0	; 208
 228:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
 22c:	4a c0       	rjmp	.+148    	; 0x2c2 <Send_Val_to_LCD+0xf0>
	 }
	 else if(u16_Value<1000)
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	c8 3e       	cpi	r28, 0xE8	; 232
 232:	d8 07       	cpc	r29, r24
 234:	f8 f4       	brcc	.+62     	; 0x274 <Send_Val_to_LCD+0xa2>
	 {
		 LCD_send_char(48);
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char((u16_Value/100)+48);
 23c:	ce 01       	movw	r24, r28
 23e:	64 e6       	ldi	r22, 0x64	; 100
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 246:	86 2f       	mov	r24, r22
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(((u16_Value/10)%10)+48);
 24e:	2a e0       	ldi	r18, 0x0A	; 10
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	ce 01       	movw	r24, r28
 254:	b9 01       	movw	r22, r18
 256:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 25a:	c8 2f       	mov	r28, r24
 25c:	cb 01       	movw	r24, r22
 25e:	b9 01       	movw	r22, r18
 260:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char((u16_Value%10)+48);
 26a:	8c 2f       	mov	r24, r28
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
 272:	27 c0       	rjmp	.+78     	; 0x2c2 <Send_Val_to_LCD+0xf0>
	 }
	 else 
	 {
		 LCD_send_char((u16_Value/1000)+48);
 274:	ce 01       	movw	r24, r28
 276:	68 ee       	ldi	r22, 0xE8	; 232
 278:	73 e0       	ldi	r23, 0x03	; 3
 27a:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 27e:	86 2f       	mov	r24, r22
 280:	80 5d       	subi	r24, 0xD0	; 208
 282:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(((u16_Value/100)%10)+48);
 286:	ce 01       	movw	r24, r28
 288:	64 e6       	ldi	r22, 0x64	; 100
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 290:	cb 01       	movw	r24, r22
 292:	0a e0       	ldi	r16, 0x0A	; 10
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	b8 01       	movw	r22, r16
 298:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char(((u16_Value/10)%10)+48);
 2a2:	ce 01       	movw	r24, r28
 2a4:	b8 01       	movw	r22, r16
 2a6:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 2aa:	c8 2f       	mov	r28, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	b8 01       	movw	r22, r16
 2b0:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodhi4>
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		 LCD_send_char((u16_Value%10)+48);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
	 }

 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <main>:
void Send_Val_to_LCD(u16 u16_Value);

int main(void)
{
	/* LCD Initialization	*/
	LCD_inti(); 
 2cc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
	
	LCD_send_string("A1=");
 2d6:	80 e6       	ldi	r24, 0x60	; 96
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_send_string>
	LCD_move_cursor(1,10);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	6a e0       	ldi	r22, 0x0A	; 10
 2e2:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
	LCD_send_string("A2=");
 2e6:	84 e6       	ldi	r24, 0x64	; 100
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_send_string>
	LCD_move_cursor(2,1);
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
	LCD_send_string("A3=");
 2f6:	88 e6       	ldi	r24, 0x68	; 104
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_send_string>
	LCD_move_cursor(2,10);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	6a e0       	ldi	r22, 0x0A	; 10
 302:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
	LCD_send_string("A4=");
 306:	8c e6       	ldi	r24, 0x6C	; 108
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_send_string>
	
	/* ADC Initialization */
	MADC_Init();  
 30e:	0e 94 1a 03 	call	0x634	; 0x634 <MADC_Init>
	
	u16 Analog_val;
	
    while(1)
    {
        Analog_val=MADC_Read(0);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 22 03 	call	0x644	; 0x644 <MADC_Read>
 318:	ec 01       	movw	r28, r24
	    LCD_move_cursor(1,4);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	64 e0       	ldi	r22, 0x04	; 4
 31e:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
		Send_Val_to_LCD(Analog_val);
 322:	ce 01       	movw	r24, r28
 324:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Send_Val_to_LCD>
		Analog_val=MADC_Read(1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 22 03 	call	0x644	; 0x644 <MADC_Read>
 32e:	ec 01       	movw	r28, r24
		LCD_move_cursor(1,13);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	6d e0       	ldi	r22, 0x0D	; 13
 334:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
		Send_Val_to_LCD(Analog_val);
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Send_Val_to_LCD>
		Analog_val=MADC_Read(2);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 22 03 	call	0x644	; 0x644 <MADC_Read>
 344:	ec 01       	movw	r28, r24
		LCD_move_cursor(2,4);
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
		Send_Val_to_LCD(Analog_val);
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Send_Val_to_LCD>
		Analog_val=MADC_Read(3);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 22 03 	call	0x644	; 0x644 <MADC_Read>
 35a:	ec 01       	movw	r28, r24
		LCD_move_cursor(2,13);
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	6d e0       	ldi	r22, 0x0D	; 13
 360:	0e 94 df 02 	call	0x5be	; 0x5be <LCD_move_cursor>
		Send_Val_to_LCD(Analog_val);		
 364:	ce 01       	movw	r24, r28
 366:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Send_Val_to_LCD>
 36a:	d3 cf       	rjmp	.-90     	; 0x312 <main+0x46>

0000036c <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	8f e9       	ldi	r24, 0x9F	; 159
 378:	9f e0       	ldi	r25, 0x0F	; 15
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_Enable+0xe>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_Enable+0x14>
 380:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 382:	80 e3       	ldi	r24, 0x30	; 48
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 38c:	08 95       	ret

0000038e <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 392:	48 2f       	mov	r20, r24
 394:	42 95       	swap	r20
 396:	4f 70       	andi	r20, 0x0F	; 15
 398:	41 70       	andi	r20, 0x01	; 1
 39a:	83 e3       	ldi	r24, 0x33	; 51
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 3a2:	4c 2f       	mov	r20, r28
 3a4:	42 95       	swap	r20
 3a6:	46 95       	lsr	r20
 3a8:	47 70       	andi	r20, 0x07	; 7
 3aa:	41 70       	andi	r20, 0x01	; 1
 3ac:	83 e3       	ldi	r24, 0x33	; 51
 3ae:	65 e0       	ldi	r22, 0x05	; 5
 3b0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 3b4:	4c 2f       	mov	r20, r28
 3b6:	42 95       	swap	r20
 3b8:	46 95       	lsr	r20
 3ba:	46 95       	lsr	r20
 3bc:	43 70       	andi	r20, 0x03	; 3
 3be:	41 70       	andi	r20, 0x01	; 1
 3c0:	83 e3       	ldi	r24, 0x33	; 51
 3c2:	66 e0       	ldi	r22, 0x06	; 6
 3c4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 3c8:	4c 2f       	mov	r20, r28
 3ca:	44 1f       	adc	r20, r20
 3cc:	44 27       	eor	r20, r20
 3ce:	44 1f       	adc	r20, r20
 3d0:	83 e3       	ldi	r24, 0x33	; 51
 3d2:	67 e0       	ldi	r22, 0x07	; 7
 3d4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 3e2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 3e6:	4c 2f       	mov	r20, r28
 3e8:	41 70       	andi	r20, 0x01	; 1
 3ea:	83 e3       	ldi	r24, 0x33	; 51
 3ec:	64 e0       	ldi	r22, 0x04	; 4
 3ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 3f2:	4c 2f       	mov	r20, r28
 3f4:	46 95       	lsr	r20
 3f6:	41 70       	andi	r20, 0x01	; 1
 3f8:	83 e3       	ldi	r24, 0x33	; 51
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 400:	4c 2f       	mov	r20, r28
 402:	46 95       	lsr	r20
 404:	46 95       	lsr	r20
 406:	41 70       	andi	r20, 0x01	; 1
 408:	83 e3       	ldi	r24, 0x33	; 51
 40a:	66 e0       	ldi	r22, 0x06	; 6
 40c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 410:	c6 95       	lsr	r28
 412:	c6 95       	lsr	r28
 414:	c6 95       	lsr	r28
 416:	4c 2f       	mov	r20, r28
 418:	41 70       	andi	r20, 0x01	; 1
 41a:	83 e3       	ldi	r24, 0x33	; 51
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 422:	80 e3       	ldi	r24, 0x30	; 48
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 42c:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_Enable>
		
	 #endif
}
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <LCD_send_string>:

void LCD_send_string(char *data)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 43a:	88 81       	ld	r24, Y
 43c:	88 23       	and	r24, r24
 43e:	31 f0       	breq	.+12     	; 0x44c <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 440:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 442:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 446:	89 91       	ld	r24, Y+
 448:	88 23       	and	r24, r24
 44a:	d9 f7       	brne	.-10     	; 0x442 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 452:	cf 93       	push	r28
 454:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 456:	48 2f       	mov	r20, r24
 458:	42 95       	swap	r20
 45a:	4f 70       	andi	r20, 0x0F	; 15
 45c:	41 70       	andi	r20, 0x01	; 1
 45e:	83 e3       	ldi	r24, 0x33	; 51
 460:	64 e0       	ldi	r22, 0x04	; 4
 462:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 466:	4c 2f       	mov	r20, r28
 468:	42 95       	swap	r20
 46a:	46 95       	lsr	r20
 46c:	47 70       	andi	r20, 0x07	; 7
 46e:	41 70       	andi	r20, 0x01	; 1
 470:	83 e3       	ldi	r24, 0x33	; 51
 472:	65 e0       	ldi	r22, 0x05	; 5
 474:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 478:	4c 2f       	mov	r20, r28
 47a:	42 95       	swap	r20
 47c:	46 95       	lsr	r20
 47e:	46 95       	lsr	r20
 480:	43 70       	andi	r20, 0x03	; 3
 482:	41 70       	andi	r20, 0x01	; 1
 484:	83 e3       	ldi	r24, 0x33	; 51
 486:	66 e0       	ldi	r22, 0x06	; 6
 488:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 48c:	4c 2f       	mov	r20, r28
 48e:	44 1f       	adc	r20, r20
 490:	44 27       	eor	r20, r20
 492:	44 1f       	adc	r20, r20
 494:	83 e3       	ldi	r24, 0x33	; 51
 496:	67 e0       	ldi	r22, 0x07	; 7
 498:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 49c:	80 e3       	ldi	r24, 0x30	; 48
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 4a6:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 4aa:	4c 2f       	mov	r20, r28
 4ac:	41 70       	andi	r20, 0x01	; 1
 4ae:	83 e3       	ldi	r24, 0x33	; 51
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 4b6:	4c 2f       	mov	r20, r28
 4b8:	46 95       	lsr	r20
 4ba:	41 70       	andi	r20, 0x01	; 1
 4bc:	83 e3       	ldi	r24, 0x33	; 51
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 4c4:	4c 2f       	mov	r20, r28
 4c6:	46 95       	lsr	r20
 4c8:	46 95       	lsr	r20
 4ca:	41 70       	andi	r20, 0x01	; 1
 4cc:	83 e3       	ldi	r24, 0x33	; 51
 4ce:	66 e0       	ldi	r22, 0x06	; 6
 4d0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 4d4:	c6 95       	lsr	r28
 4d6:	c6 95       	lsr	r28
 4d8:	c6 95       	lsr	r28
 4da:	4c 2f       	mov	r20, r28
 4dc:	41 70       	andi	r20, 0x01	; 1
 4de:	83 e3       	ldi	r24, 0x33	; 51
 4e0:	67 e0       	ldi	r22, 0x07	; 7
 4e2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 4e6:	80 e3       	ldi	r24, 0x30	; 48
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 4f0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_Enable>
	
	#endif

}
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <LCD_inti>:
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	91 ee       	ldi	r25, 0xE1	; 225
 4fc:	a4 e0       	ldi	r26, 0x04	; 4
 4fe:	81 50       	subi	r24, 0x01	; 1
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	a0 40       	sbci	r26, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <LCD_inti+0x6>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_inti+0x10>
 508:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 50a:	83 e3       	ldi	r24, 0x33	; 51
 50c:	64 e0       	ldi	r22, 0x04	; 4
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 514:	83 e3       	ldi	r24, 0x33	; 51
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 51e:	83 e3       	ldi	r24, 0x33	; 51
 520:	66 e0       	ldi	r22, 0x06	; 6
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 528:	83 e3       	ldi	r24, 0x33	; 51
 52a:	67 e0       	ldi	r22, 0x07	; 7
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 532:	80 e3       	ldi	r24, 0x30	; 48
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 546:	80 e3       	ldi	r24, 0x30	; 48
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 550:	80 e3       	ldi	r24, 0x30	; 48
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 560:	af e1       	ldi	r26, 0x1F	; 31
 562:	be e4       	ldi	r27, 0x4E	; 78
 564:	11 97       	sbiw	r26, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <LCD_inti+0x6c>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_inti+0x72>
 56a:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 56c:	88 e2       	ldi	r24, 0x28	; 40
 56e:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 572:	8f ec       	ldi	r24, 0xCF	; 207
 574:	97 e0       	ldi	r25, 0x07	; 7
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCD_inti+0x7e>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <LCD_inti+0x84>
 57c:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 57e:	8e e0       	ldi	r24, 0x0E	; 14
 580:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 584:	af ec       	ldi	r26, 0xCF	; 207
 586:	b7 e0       	ldi	r27, 0x07	; 7
 588:	11 97       	sbiw	r26, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_inti+0x90>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_inti+0x96>
 58e:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 596:	8f e1       	ldi	r24, 0x1F	; 31
 598:	9e e4       	ldi	r25, 0x4E	; 78
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_inti+0xa2>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_inti+0xa8>
 5a0:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 5a8:	af ec       	ldi	r26, 0xCF	; 207
 5aa:	b7 e0       	ldi	r27, 0x07	; 7
 5ac:	11 97       	sbiw	r26, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <LCD_inti+0xb4>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <LCD_inti+0xba>
 5b2:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 5b4:	08 95       	ret

000005b6 <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
	
}
 5bc:	08 95       	ret

000005be <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	0f 92       	push	r0
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	19 f4       	brne	.+6      	; 0x5d2 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 5cc:	61 58       	subi	r22, 0x81	; 129
 5ce:	69 83       	std	Y+1, r22	; 0x01
 5d0:	0e c0       	rjmp	.+28     	; 0x5ee <LCD_move_cursor+0x30>
	}
	else if (row==2)
 5d2:	82 30       	cpi	r24, 0x02	; 2
 5d4:	19 f4       	brne	.+6      	; 0x5dc <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 5d6:	61 54       	subi	r22, 0x41	; 65
 5d8:	69 83       	std	Y+1, r22	; 0x01
 5da:	09 c0       	rjmp	.+18     	; 0x5ee <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 5dc:	81 50       	subi	r24, 0x01	; 1
 5de:	82 30       	cpi	r24, 0x02	; 2
 5e0:	20 f4       	brcc	.+8      	; 0x5ea <LCD_move_cursor+0x2c>
 5e2:	61 31       	cpi	r22, 0x11	; 17
 5e4:	10 f4       	brcc	.+4      	; 0x5ea <LCD_move_cursor+0x2c>
 5e6:	66 23       	and	r22, r22
 5e8:	11 f4       	brne	.+4      	; 0x5ee <LCD_move_cursor+0x30>
	{
		data=0x80;
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	0e 94 29 02 	call	0x452	; 0x452 <LCD_send_cmd>
 5f4:	8f ec       	ldi	r24, 0xCF	; 207
 5f6:	97 e0       	ldi	r25, 0x07	; 7
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_move_cursor+0x3a>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_move_cursor+0x40>
 5fe:	00 00       	nop
	_delay_ms(1);
}
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <lcd_print>:

void lcd_print(char *str)
{
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 610:	fc 01       	movw	r30, r24
 612:	80 81       	ld	r24, Z
 614:	88 23       	and	r24, r24
 616:	51 f0       	breq	.+20     	; 0x62c <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 618:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 61a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_send_char>
		i++;
 61e:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 620:	f8 01       	movw	r30, r16
 622:	ec 0f       	add	r30, r28
 624:	f1 1d       	adc	r31, r1
 626:	80 81       	ld	r24, Z
 628:	88 23       	and	r24, r24
 62a:	b9 f7       	brne	.-18     	; 0x61a <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <MADC_Init>:
	/*
	REFS0 =0 , REFS0 =0 ------- AREF, Internal Vref turned off
	REFS0 =0 , REFS0 =1	-------AVCC with external capacitor at AREF pin
	REFS0 =1 , REFS0 =1 ------Internal 2.56V Voltage Reference with external capacitor at AREF pin
	*/
	CLR_BIT(ADMUX,REFS0);
 634:	3e 98       	cbi	0x07, 6	; 7
	CLR_BIT(ADMUX,REFS1);
 636:	3f 98       	cbi	0x07, 7	; 7
	/* Set ADC Right Adjusted */
	CLR_BIT(ADMUX,ADLAR);
 638:	3d 98       	cbi	0x07, 5	; 7
	/* Enable ADC  */
	SET_BIT(ADCSRA,ADEN);
 63a:	37 9a       	sbi	0x06, 7	; 6
	/* Set Prescaler 64 */
	CLR_BIT(ADMUX,ADPS0);
 63c:	38 98       	cbi	0x07, 0	; 7
	SET_BIT(ADCSRA,ADPS1);
 63e:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
 640:	32 9a       	sbi	0x06, 2	; 6
}
 642:	08 95       	ret

00000644 <MADC_Read>:
u16  MADC_Read(u8 Channel_Num)
{
	u16 ADC_Value;
	/* Set Channel to MUX*/
	ADMUX &= 0xE0;              // Clear BITs (MUX0 to MUX4) before Writing
 644:	97 b1       	in	r25, 0x07	; 7
 646:	90 7e       	andi	r25, 0xE0	; 224
 648:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (Channel_Num);    // Set Channel Number  appear (0x01)
 64a:	97 b1       	in	r25, 0x07	; 7
 64c:	89 2b       	or	r24, r25
 64e:	87 b9       	out	0x07, r24	; 7
	ADMUX|=GET_BIT(Channel_Num,0)<<0;
	ADMUX|=GET_BIT(Channel_Num,1)<<1;
	ADMUX|=GET_BIT(Channel_Num,2)<<2;
	*/
	/*Start Conversion */
	SET_BIT(ADCSRA,ADSC);
 650:	36 9a       	sbi	0x06, 6	; 6
	/* wait until Conversion is completed */
	while(GET_BIT(ADCSRA,ADIF)==0);
 652:	86 b1       	in	r24, 0x06	; 6
 654:	84 ff       	sbrs	r24, 4
 656:	fd cf       	rjmp	.-6      	; 0x652 <MADC_Read+0xe>
	/* Reset ADIF Flag*/
	SET_BIT(ADCSRA,ADIF);
 658:	34 9a       	sbi	0x06, 4	; 6
	/*Read ADCL and ADC High Data Register */
	ADC_Value=ADCL;
 65a:	84 b1       	in	r24, 0x04	; 4
 65c:	90 e0       	ldi	r25, 0x00	; 0
	ADC_Value|=(ADCH<<8);	//Read Value from ADCH Register without Effect on First Value(From ADCL)
 65e:	45 b1       	in	r20, 0x05	; 5
 660:	34 2f       	mov	r19, r20
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	82 2b       	or	r24, r18
 666:	93 2b       	or	r25, r19
	/* Return ADC Value*/
	return ADC_Value;	
 668:	08 95       	ret

0000066a <__udivmodhi4>:
 66a:	aa 1b       	sub	r26, r26
 66c:	bb 1b       	sub	r27, r27
 66e:	51 e1       	ldi	r21, 0x11	; 17
 670:	07 c0       	rjmp	.+14     	; 0x680 <__udivmodhi4_ep>

00000672 <__udivmodhi4_loop>:
 672:	aa 1f       	adc	r26, r26
 674:	bb 1f       	adc	r27, r27
 676:	a6 17       	cp	r26, r22
 678:	b7 07       	cpc	r27, r23
 67a:	10 f0       	brcs	.+4      	; 0x680 <__udivmodhi4_ep>
 67c:	a6 1b       	sub	r26, r22
 67e:	b7 0b       	sbc	r27, r23

00000680 <__udivmodhi4_ep>:
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	5a 95       	dec	r21
 686:	a9 f7       	brne	.-22     	; 0x672 <__udivmodhi4_loop>
 688:	80 95       	com	r24
 68a:	90 95       	com	r25
 68c:	bc 01       	movw	r22, r24
 68e:	cd 01       	movw	r24, r26
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
