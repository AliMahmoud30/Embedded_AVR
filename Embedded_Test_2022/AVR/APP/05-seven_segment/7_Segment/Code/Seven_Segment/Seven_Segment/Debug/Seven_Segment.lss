
Seven_Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002ae  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cc  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000272  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041a  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000232  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e1  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 40 01 	call	0x280	; 0x280 <main>
  8a:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	82 81       	ldd	r24, Z+2	; 0x02
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 194:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 196:	62 95       	swap	r22
 198:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 19a:	68 27       	eor	r22, r24
 19c:	62 83       	std	Z+2, r22	; 0x02
	
} 
 19e:	08 95       	ret

000001a0 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1a0:	e8 2f       	mov	r30, r24
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	82 81       	ldd	r24, Z+2	; 0x02
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1aa:	82 81       	ldd	r24, Z+2	; 0x02
 1ac:	6f 70       	andi	r22, 0x0F	; 15
 1ae:	68 27       	eor	r22, r24
 1b0:	62 83       	std	Z+2, r22	; 0x02
	
}
 1b2:	08 95       	ret

000001b4 <Seven_Segment_Init>:
 
 #include "GPIO.h"
 u8 Seg_num[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 void Seven_Segment_Init(void)
 {
	 DIO_Set_Pin_Direction(A_Seg,OUTPUT);
 1b4:	83 e3       	ldi	r24, 0x33	; 51
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(B_Seg,OUTPUT);
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(C_Seg,OUTPUT);
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(D_Seg,OUTPUT);
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(E_Seg,OUTPUT);
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	64 e0       	ldi	r22, 0x04	; 4
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(F_Seg,OUTPUT);
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	65 e0       	ldi	r22, 0x05	; 5
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(G_Seg,OUTPUT);
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	66 e0       	ldi	r22, 0x06	; 6
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	 
 }
 1fa:	08 95       	ret

000001fc <Seven_Segment_write>:
 
 void Seven_Segment_write(u8 number)
 {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	 
	DIO_Set_Pin_Value(A_Seg,GET_BIT(Seg_num[number],0));
 200:	c0 e6       	ldi	r28, 0x60	; 96
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	c8 0f       	add	r28, r24
 206:	d1 1d       	adc	r29, r1
 208:	48 81       	ld	r20, Y
 20a:	41 70       	andi	r20, 0x01	; 1
 20c:	83 e3       	ldi	r24, 0x33	; 51
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(B_Seg,GET_BIT(Seg_num[number],1));
 214:	48 81       	ld	r20, Y
 216:	46 95       	lsr	r20
 218:	41 70       	andi	r20, 0x01	; 1
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(C_Seg,GET_BIT(Seg_num[number],2));
 222:	48 81       	ld	r20, Y
 224:	46 95       	lsr	r20
 226:	46 95       	lsr	r20
 228:	41 70       	andi	r20, 0x01	; 1
 22a:	83 e3       	ldi	r24, 0x33	; 51
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,GET_BIT(Seg_num[number],3));
 232:	48 81       	ld	r20, Y
 234:	46 95       	lsr	r20
 236:	46 95       	lsr	r20
 238:	46 95       	lsr	r20
 23a:	41 70       	andi	r20, 0x01	; 1
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(E_Seg,GET_BIT(Seg_num[number],4));
 244:	48 81       	ld	r20, Y
 246:	42 95       	swap	r20
 248:	4f 70       	andi	r20, 0x0F	; 15
 24a:	41 70       	andi	r20, 0x01	; 1
 24c:	83 e3       	ldi	r24, 0x33	; 51
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(F_Seg,GET_BIT(Seg_num[number],5));
 254:	48 81       	ld	r20, Y
 256:	42 95       	swap	r20
 258:	46 95       	lsr	r20
 25a:	47 70       	andi	r20, 0x07	; 7
 25c:	41 70       	andi	r20, 0x01	; 1
 25e:	83 e3       	ldi	r24, 0x33	; 51
 260:	65 e0       	ldi	r22, 0x05	; 5
 262:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(G_Seg,GET_BIT(Seg_num[number],6));
 266:	48 81       	ld	r20, Y
 268:	42 95       	swap	r20
 26a:	46 95       	lsr	r20
 26c:	46 95       	lsr	r20
 26e:	43 70       	andi	r20, 0x03	; 3
 270:	41 70       	andi	r20, 0x01	; 1
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	66 e0       	ldi	r22, 0x06	; 6
 276:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,1);
	DIO_Set_Pin_Value(E_Seg,1);
	DIO_Set_Pin_Value(F_Seg,0);
	DIO_Set_Pin_Value(G_Seg,1);
	*/
 }
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <main>:


int main(void)
{
	u8 i=0;
	Seven_Segment_Init();
 280:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Seven_Segment_Init>
	
    while(1)
    {
       
	   for (i=0;i<=9;i++)
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
	   {
		   Seven_Segment_write(i);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Seven_Segment_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	94 e3       	ldi	r25, 0x34	; 52
 292:	ac e0       	ldi	r26, 0x0C	; 12
 294:	81 50       	subi	r24, 0x01	; 1
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	a0 40       	sbci	r26, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x14>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x1e>
 29e:	00 00       	nop
	Seven_Segment_Init();
	
    while(1)
    {
       
	   for (i=0;i<=9;i++)
 2a0:	cf 5f       	subi	r28, 0xFF	; 255
 2a2:	ca 30       	cpi	r28, 0x0A	; 10
 2a4:	88 f3       	brcs	.-30     	; 0x288 <main+0x8>
 2a6:	cd 2f       	mov	r28, r29
 2a8:	ef cf       	rjmp	.-34     	; 0x288 <main+0x8>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
