
BCD_to_seven_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000031e  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000310  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047a  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002af  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d8  00000000  00000000  00001f7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "H7_Segment.h"

int main(void)
{
	Seven_Segment_Init();
  92:	0e 94 ef 00 	call	0x1de	; 0x1de <Seven_Segment_Init>
	u8 i;
    while(1)
    {
		for (i=0;i<=9;i++)
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
		{
			Seven_Segment_write_BCD(i);
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 55 01 	call	0x2aa	; 0x2aa <Seven_Segment_write_BCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	99 e6       	ldi	r25, 0x69	; 105
  a4:	a8 e1       	ldi	r26, 0x18	; 24
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	a0 40       	sbci	r26, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
{
	Seven_Segment_Init();
	u8 i;
    while(1)
    {
		for (i=0;i<=9;i++)
  b2:	cf 5f       	subi	r28, 0xFF	; 255
  b4:	ca 30       	cpi	r28, 0x0A	; 10
  b6:	88 f3       	brcs	.-30     	; 0x9a <main+0x8>
  b8:	cd 2f       	mov	r28, r29
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x8>

000000bc <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  bc:	61 30       	cpi	r22, 0x01	; 1
  be:	29 f4       	brne	.+10     	; 0xca <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	81 83       	std	Z+1, r24	; 0x01
  c8:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  ca:	66 23       	and	r22, r22
  cc:	19 f4       	brne	.+6      	; 0xd4 <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  ce:	e8 2f       	mov	r30, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	11 82       	std	Z+1, r1	; 0x01
  d4:	08 95       	ret

000000d6 <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	79 f4       	brne	.+30     	; 0xf8 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  da:	e8 2f       	mov	r30, r24
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	21 81       	ldd	r18, Z+1	; 0x01
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	ac 01       	movw	r20, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_Set_Pin_Direction+0x16>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_Set_Pin_Direction+0x12>
  f0:	ba 01       	movw	r22, r20
  f2:	62 2b       	or	r22, r18
  f4:	61 83       	std	Z+1, r22	; 0x01
  f6:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  f8:	44 23       	and	r20, r20
  fa:	79 f4       	brne	.+30     	; 0x11a <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  fc:	e8 2f       	mov	r30, r24
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	21 81       	ldd	r18, Z+1	; 0x01
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_Set_Pin_Direction+0x38>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_Set_Pin_Direction+0x34>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	61 83       	std	Z+1, r22	; 0x01
 11a:	08 95       	ret

0000011c <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	62 83       	std	Z+2, r22	; 0x02
}
 122:	08 95       	ret

00000124 <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	79 f4       	brne	.+30     	; 0x146 <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	22 81       	ldd	r18, Z+2	; 0x02
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_Set_Pin_Value+0x16>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_Set_Pin_Value+0x12>
 13e:	ba 01       	movw	r22, r20
 140:	62 2b       	or	r22, r18
 142:	62 83       	std	Z+2, r22	; 0x02
 144:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 146:	44 23       	and	r20, r20
 148:	79 f4       	brne	.+30     	; 0x168 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	22 81       	ldd	r18, Z+2	; 0x02
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_Set_Pin_Value+0x38>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_Set_Pin_Value+0x34>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	62 83       	std	Z+2, r22	; 0x02
 168:	08 95       	ret

0000016a <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 174:	e8 2f       	mov	r30, r24
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
}
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	0f 92       	push	r0
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9c 01       	movw	r18, r24
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_Get_Pin_value+0x1a>
 19c:	35 95       	asr	r19
 19e:	27 95       	ror	r18
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_Get_Pin_value+0x16>
 1a4:	b9 01       	movw	r22, r18
 1a6:	61 70       	andi	r22, 0x01	; 1
 1a8:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1b4:	e8 2f       	mov	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1be:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1c0:	62 95       	swap	r22
 1c2:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1c4:	68 27       	eor	r22, r24
 1c6:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1c8:	08 95       	ret

000001ca <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1ca:	e8 2f       	mov	r30, r24
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1d4:	82 81       	ldd	r24, Z+2	; 0x02
 1d6:	6f 70       	andi	r22, 0x0F	; 15
 1d8:	68 27       	eor	r22, r24
 1da:	62 83       	std	Z+2, r22	; 0x02
	
}
 1dc:	08 95       	ret

000001de <Seven_Segment_Init>:
 u8 Seg_num[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	 
	 
 void Seven_Segment_Init(void)
 {
	 DIO_Set_Pin_Direction(A_Seg,OUTPUT);
 1de:	83 e3       	ldi	r24, 0x33	; 51
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(B_Seg,OUTPUT);
 1e8:	83 e3       	ldi	r24, 0x33	; 51
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(C_Seg,OUTPUT);
 1f2:	83 e3       	ldi	r24, 0x33	; 51
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(D_Seg,OUTPUT);
 1fc:	83 e3       	ldi	r24, 0x33	; 51
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(E_Seg,OUTPUT);
 206:	83 e3       	ldi	r24, 0x33	; 51
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(F_Seg,OUTPUT);
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	65 e0       	ldi	r22, 0x05	; 5
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(G_Seg,OUTPUT);
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	66 e0       	ldi	r22, 0x06	; 6
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	 
 }
 224:	08 95       	ret

00000226 <Seven_Segment_write>:
 
 void Seven_Segment_write(u8 number)
 {
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
	 
	DIO_Set_Pin_Value(A_Seg,GET_BIT(Seg_num[number],0));
 22a:	c0 e6       	ldi	r28, 0x60	; 96
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	c8 0f       	add	r28, r24
 230:	d1 1d       	adc	r29, r1
 232:	48 81       	ld	r20, Y
 234:	41 70       	andi	r20, 0x01	; 1
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(B_Seg,GET_BIT(Seg_num[number],1));
 23e:	48 81       	ld	r20, Y
 240:	46 95       	lsr	r20
 242:	41 70       	andi	r20, 0x01	; 1
 244:	83 e3       	ldi	r24, 0x33	; 51
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(C_Seg,GET_BIT(Seg_num[number],2));
 24c:	48 81       	ld	r20, Y
 24e:	46 95       	lsr	r20
 250:	46 95       	lsr	r20
 252:	41 70       	andi	r20, 0x01	; 1
 254:	83 e3       	ldi	r24, 0x33	; 51
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,GET_BIT(Seg_num[number],3));
 25c:	48 81       	ld	r20, Y
 25e:	46 95       	lsr	r20
 260:	46 95       	lsr	r20
 262:	46 95       	lsr	r20
 264:	41 70       	andi	r20, 0x01	; 1
 266:	83 e3       	ldi	r24, 0x33	; 51
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(E_Seg,GET_BIT(Seg_num[number],4));
 26e:	48 81       	ld	r20, Y
 270:	42 95       	swap	r20
 272:	4f 70       	andi	r20, 0x0F	; 15
 274:	41 70       	andi	r20, 0x01	; 1
 276:	83 e3       	ldi	r24, 0x33	; 51
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(F_Seg,GET_BIT(Seg_num[number],5));
 27e:	48 81       	ld	r20, Y
 280:	42 95       	swap	r20
 282:	46 95       	lsr	r20
 284:	47 70       	andi	r20, 0x07	; 7
 286:	41 70       	andi	r20, 0x01	; 1
 288:	83 e3       	ldi	r24, 0x33	; 51
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(G_Seg,GET_BIT(Seg_num[number],6));
 290:	48 81       	ld	r20, Y
 292:	42 95       	swap	r20
 294:	46 95       	lsr	r20
 296:	46 95       	lsr	r20
 298:	43 70       	andi	r20, 0x03	; 3
 29a:	41 70       	andi	r20, 0x01	; 1
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	66 e0       	ldi	r22, 0x06	; 6
 2a0:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,1);
	DIO_Set_Pin_Value(E_Seg,1);
	DIO_Set_Pin_Value(F_Seg,0);
	DIO_Set_Pin_Value(G_Seg,1);
	*/
 }
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <Seven_Segment_write_BCD>:
 
  void Seven_Segment_write_BCD(u8 number)
  {
 2aa:	cf 93       	push	r28
 2ac:	c8 2f       	mov	r28, r24
	  DIO_Set_Pin_Value(A_Seg,GET_BIT(number,0));
 2ae:	48 2f       	mov	r20, r24
 2b0:	41 70       	andi	r20, 0x01	; 1
 2b2:	83 e3       	ldi	r24, 0x33	; 51
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	  DIO_Set_Pin_Value(B_Seg,GET_BIT(number,1));
 2ba:	4c 2f       	mov	r20, r28
 2bc:	46 95       	lsr	r20
 2be:	41 70       	andi	r20, 0x01	; 1
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	  DIO_Set_Pin_Value(C_Seg,GET_BIT(number,2));
 2c8:	4c 2f       	mov	r20, r28
 2ca:	46 95       	lsr	r20
 2cc:	46 95       	lsr	r20
 2ce:	41 70       	andi	r20, 0x01	; 1
 2d0:	83 e3       	ldi	r24, 0x33	; 51
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
	  DIO_Set_Pin_Value(D_Seg,GET_BIT(number,3));
 2d8:	c6 95       	lsr	r28
 2da:	c6 95       	lsr	r28
 2dc:	c6 95       	lsr	r28
 2de:	4c 2f       	mov	r20, r28
 2e0:	41 70       	andi	r20, 0x01	; 1
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <Button_init>:
 */ 
#include "HButton.h"

void Button_init(u8 PORT,u8 PIN)
{
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
}
 2f4:	08 95       	ret

000002f6 <Button_init_Pull_UP>:

void Button_init_Pull_UP(u8 PORT,u8 PIN)
{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	d8 2f       	mov	r29, r24
 2fc:	c6 2f       	mov	r28, r22
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(PORT,PIN,HIGH);
 304:	8d 2f       	mov	r24, r29
 306:	6c 2f       	mov	r22, r28
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	0e 94 92 00 	call	0x124	; 0x124 <DIO_Set_Pin_Value>
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <Button_Read>:

u8 Button_Read(u8 PORT,u8 PIN)
{
	u8 Button_state;
	Button_state=DIO_Get_Pin_value(PORT,PIN);
 314:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Get_Pin_value>
	return Button_state;
}
 318:	08 95       	ret

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
