
7_segment_with switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000306  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000266  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040f  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "H7_Segment.h"
#include "HButton.h"
int main(void)
{
	Seven_Segment_Init();
  92:	0e 94 05 01 	call	0x20a	; 0x20a <Seven_Segment_Init>
	Seven_Segment_write(0);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 29 01 	call	0x252	; 0x252 <Seven_Segment_write>
	Button_init(A,0);
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Button_init>
	u8 sw_state=0;
	u8 counter=0;
	u8 flag=0;
  a4:	c0 e0       	ldi	r28, 0x00	; 0
{
	Seven_Segment_Init();
	Seven_Segment_write(0);
	Button_init(A,0);
	u8 sw_state=0;
	u8 counter=0;
  a6:	d0 e0       	ldi	r29, 0x00	; 0
		if ((sw_state==1)&& (flag==0))
		{
			//_delay_ms(150);
			//if(Button_Read(A,0)==1)
			//{
				flag=1;
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x26>
  ac:	c1 2f       	mov	r28, r17
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <main+0x26>
  b0:	c1 2f       	mov	r28, r17
				counter++;
				Seven_Segment_write(counter);
				if (counter==9)
				{
					counter=0;
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x26>
			//}
			
		}
		else if((Button_Read(A,0)==0) && (flag==1))
		{
			flag=0;
  b6:	c0 e0       	ldi	r28, 0x00	; 0
	u8 sw_state=0;
	u8 counter=0;
	u8 flag=0;
    while(1)	
    {
		sw_state=Button_Read(A,0);
  b8:	89 e3       	ldi	r24, 0x39	; 57
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Button_Read>
		if ((sw_state==1)&& (flag==0))
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	49 f4       	brne	.+18     	; 0xd6 <main+0x44>
  c4:	cc 23       	and	r28, r28
  c6:	39 f4       	brne	.+14     	; 0xd6 <main+0x44>
		{
			//_delay_ms(150);
			//if(Button_Read(A,0)==1)
			//{
				flag=1;
				counter++;
  c8:	df 5f       	subi	r29, 0xFF	; 255
				Seven_Segment_write(counter);
  ca:	8d 2f       	mov	r24, r29
  cc:	0e 94 29 01 	call	0x252	; 0x252 <Seven_Segment_write>
				if (counter==9)
  d0:	d9 30       	cpi	r29, 0x09	; 9
  d2:	61 f7       	brne	.-40     	; 0xac <main+0x1a>
  d4:	ed cf       	rjmp	.-38     	; 0xb0 <main+0x1e>
				}
						
			//}
			
		}
		else if((Button_Read(A,0)==0) && (flag==1))
  d6:	89 e3       	ldi	r24, 0x39	; 57
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Button_Read>
  de:	88 23       	and	r24, r24
  e0:	59 f7       	brne	.-42     	; 0xb8 <main+0x26>
  e2:	c1 30       	cpi	r28, 0x01	; 1
  e4:	49 f7       	brne	.-46     	; 0xb8 <main+0x26>
  e6:	e7 cf       	rjmp	.-50     	; 0xb6 <main+0x24>

000000e8 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	29 f4       	brne	.+10     	; 0xf6 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  ec:	e8 2f       	mov	r30, r24
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	81 83       	std	Z+1, r24	; 0x01
  f4:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  f6:	66 23       	and	r22, r22
  f8:	19 f4       	brne	.+6      	; 0x100 <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	11 82       	std	Z+1, r1	; 0x01
 100:	08 95       	ret

00000102 <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	79 f4       	brne	.+30     	; 0x124 <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	21 81       	ldd	r18, Z+1	; 0x01
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_Set_Pin_Direction+0x16>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_Set_Pin_Direction+0x12>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	61 83       	std	Z+1, r22	; 0x01
 122:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
 124:	44 23       	and	r20, r20
 126:	79 f4       	brne	.+30     	; 0x146 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	21 81       	ldd	r18, Z+1	; 0x01
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_Set_Pin_Direction+0x38>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_Set_Pin_Direction+0x34>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	61 83       	std	Z+1, r22	; 0x01
 146:	08 95       	ret

00000148 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
 148:	e8 2f       	mov	r30, r24
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	62 83       	std	Z+2, r22	; 0x02
}
 14e:	08 95       	ret

00000150 <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	79 f4       	brne	.+30     	; 0x172 <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
 154:	e8 2f       	mov	r30, r24
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	22 81       	ldd	r18, Z+2	; 0x02
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	ac 01       	movw	r20, r24
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_Set_Pin_Value+0x16>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_Set_Pin_Value+0x12>
 16a:	ba 01       	movw	r22, r20
 16c:	62 2b       	or	r22, r18
 16e:	62 83       	std	Z+2, r22	; 0x02
 170:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 172:	44 23       	and	r20, r20
 174:	79 f4       	brne	.+30     	; 0x194 <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 176:	e8 2f       	mov	r30, r24
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	22 81       	ldd	r18, Z+2	; 0x02
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	ac 01       	movw	r20, r24
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_Set_Pin_Value+0x38>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_Set_Pin_Value+0x34>
 18c:	ba 01       	movw	r22, r20
 18e:	60 95       	com	r22
 190:	62 23       	and	r22, r18
 192:	62 83       	std	Z+2, r22	; 0x02
 194:	08 95       	ret

00000196 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	0f 92       	push	r0
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 1a0:	e8 2f       	mov	r30, r24
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	0f 92       	push	r0
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	9c 01       	movw	r18, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Get_Pin_value+0x1a>
 1c8:	35 95       	asr	r19
 1ca:	27 95       	ror	r18
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Get_Pin_value+0x16>
 1d0:	b9 01       	movw	r22, r18
 1d2:	61 70       	andi	r22, 0x01	; 1
 1d4:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1e0:	e8 2f       	mov	r30, r24
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	82 81       	ldd	r24, Z+2	; 0x02
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1ea:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1ec:	62 95       	swap	r22
 1ee:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1f0:	68 27       	eor	r22, r24
 1f2:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1f4:	08 95       	ret

000001f6 <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1f6:	e8 2f       	mov	r30, r24
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	82 81       	ldd	r24, Z+2	; 0x02
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 200:	82 81       	ldd	r24, Z+2	; 0x02
 202:	6f 70       	andi	r22, 0x0F	; 15
 204:	68 27       	eor	r22, r24
 206:	62 83       	std	Z+2, r22	; 0x02
	
}
 208:	08 95       	ret

0000020a <Seven_Segment_Init>:
 u8 Seg_num[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
	 
	 
 void Seven_Segment_Init(void)
 {
	 DIO_Set_Pin_Direction(A_Seg,OUTPUT);
 20a:	83 e3       	ldi	r24, 0x33	; 51
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(B_Seg,OUTPUT);
 214:	83 e3       	ldi	r24, 0x33	; 51
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(C_Seg,OUTPUT);
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(D_Seg,OUTPUT);
 228:	83 e3       	ldi	r24, 0x33	; 51
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(E_Seg,OUTPUT);
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	64 e0       	ldi	r22, 0x04	; 4
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(F_Seg,OUTPUT);
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 DIO_Set_Pin_Direction(G_Seg,OUTPUT);
 246:	83 e3       	ldi	r24, 0x33	; 51
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	 
 }
 250:	08 95       	ret

00000252 <Seven_Segment_write>:
 
 void Seven_Segment_write(u8 number)
 {
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	 
	DIO_Set_Pin_Value(A_Seg,GET_BIT(Seg_num[number],0));
 256:	c0 e6       	ldi	r28, 0x60	; 96
 258:	d0 e0       	ldi	r29, 0x00	; 0
 25a:	c8 0f       	add	r28, r24
 25c:	d1 1d       	adc	r29, r1
 25e:	48 81       	ld	r20, Y
 260:	41 70       	andi	r20, 0x01	; 1
 262:	83 e3       	ldi	r24, 0x33	; 51
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(B_Seg,GET_BIT(Seg_num[number],1));
 26a:	48 81       	ld	r20, Y
 26c:	46 95       	lsr	r20
 26e:	41 70       	andi	r20, 0x01	; 1
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(C_Seg,GET_BIT(Seg_num[number],2));
 278:	48 81       	ld	r20, Y
 27a:	46 95       	lsr	r20
 27c:	46 95       	lsr	r20
 27e:	41 70       	andi	r20, 0x01	; 1
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,GET_BIT(Seg_num[number],3));
 288:	48 81       	ld	r20, Y
 28a:	46 95       	lsr	r20
 28c:	46 95       	lsr	r20
 28e:	46 95       	lsr	r20
 290:	41 70       	andi	r20, 0x01	; 1
 292:	83 e3       	ldi	r24, 0x33	; 51
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(E_Seg,GET_BIT(Seg_num[number],4));
 29a:	48 81       	ld	r20, Y
 29c:	42 95       	swap	r20
 29e:	4f 70       	andi	r20, 0x0F	; 15
 2a0:	41 70       	andi	r20, 0x01	; 1
 2a2:	83 e3       	ldi	r24, 0x33	; 51
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(F_Seg,GET_BIT(Seg_num[number],5));
 2aa:	48 81       	ld	r20, Y
 2ac:	42 95       	swap	r20
 2ae:	46 95       	lsr	r20
 2b0:	47 70       	andi	r20, 0x07	; 7
 2b2:	41 70       	andi	r20, 0x01	; 1
 2b4:	83 e3       	ldi	r24, 0x33	; 51
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(G_Seg,GET_BIT(Seg_num[number],6));
 2bc:	48 81       	ld	r20, Y
 2be:	42 95       	swap	r20
 2c0:	46 95       	lsr	r20
 2c2:	46 95       	lsr	r20
 2c4:	43 70       	andi	r20, 0x03	; 3
 2c6:	41 70       	andi	r20, 0x01	; 1
 2c8:	83 e3       	ldi	r24, 0x33	; 51
 2ca:	66 e0       	ldi	r22, 0x06	; 6
 2cc:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(D_Seg,1);
	DIO_Set_Pin_Value(E_Seg,1);
	DIO_Set_Pin_Value(F_Seg,0);
	DIO_Set_Pin_Value(G_Seg,1);
	*/
 }
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <Button_init>:
 */ 
#include "HButton.h"

void Button_init(u8 PORT,u8 PIN)
{
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
}
 2dc:	08 95       	ret

000002de <Button_init_Pull_UP>:

void Button_init_Pull_UP(u8 PORT,u8 PIN)
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	d8 2f       	mov	r29, r24
 2e4:	c6 2f       	mov	r28, r22
	DIO_Set_Pin_Direction(PORT,PIN,INPUT);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	0e 94 81 00 	call	0x102	; 0x102 <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(PORT,PIN,HIGH);
 2ec:	8d 2f       	mov	r24, r29
 2ee:	6c 2f       	mov	r22, r28
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	0e 94 a8 00 	call	0x150	; 0x150 <DIO_Set_Pin_Value>
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <Button_Read>:

u8 Button_Read(u8 PORT,u8 PIN)
{
	u8 Button_state;
	Button_state=DIO_Get_Pin_value(PORT,PIN);
 2fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_Get_Pin_value>
	return Button_state;
}
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
