
UART_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ca  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024e  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000583  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b6  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010a  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:

#define	F_CPU	8000000ul
#include <util/delay.h>

void UART_init(u32 Baud_Rate,u8 Stop_Bit,u8 Parity)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c4 2f       	mov	r28, r20
  98:	d2 2f       	mov	r29, r18
	u16 UBRR;
	/*calculate UBRR Value >> UBRR=(Fco/16Baud_Rate)-1 */
	UBRR=(F_CPU/(16*Baud_Rate))-1;
  9a:	dc 01       	movw	r26, r24
  9c:	cb 01       	movw	r24, r22
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	aa 1f       	adc	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	aa 1f       	adc	r26, r26
  ac:	bb 1f       	adc	r27, r27
  ae:	9c 01       	movw	r18, r24
  b0:	ad 01       	movw	r20, r26
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	44 1f       	adc	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	72 e1       	ldi	r23, 0x12	; 18
  c6:	8a e7       	ldi	r24, 0x7A	; 122
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 c1 00 	call	0x182	; 0x182 <__udivmodsi4>
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(u8)(UBRR>>8);
  d2:	30 bd       	out	0x20, r19	; 32
	UBRRL=(u8)UBRR;
  d4:	29 b9       	out	0x09, r18	; 9
	/*Set Parity */
	if (Parity==2)
  d6:	d2 30       	cpi	r29, 0x02	; 2
  d8:	21 f4       	brne	.+8      	; 0xe2 <UART_init+0x50>
	{
		/* EVEN PARITY  */
		UCSRC|=(1<<UPM1)|(1<<URSEL);
  da:	80 b5       	in	r24, 0x20	; 32
  dc:	80 6a       	ori	r24, 0xA0	; 160
  de:	80 bd       	out	0x20, r24	; 32
  e0:	05 c0       	rjmp	.+10     	; 0xec <UART_init+0x5a>
	}
	else if (Parity==3)
  e2:	d3 30       	cpi	r29, 0x03	; 3
  e4:	19 f4       	brne	.+6      	; 0xec <UART_init+0x5a>
	{
		/* Odd PARITY  */
		UCSRC|=(1<<UPM1)|(1<<UPM0)|(1<<URSEL);		
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	80 6b       	ori	r24, 0xB0	; 176
  ea:	80 bd       	out	0x20, r24	; 32
	}
	/*Set Stop bit and Data size */
	if(Stop_Bit==1)
  ec:	c1 30       	cpi	r28, 0x01	; 1
  ee:	21 f4       	brne	.+8      	; 0xf8 <UART_init+0x66>
	{
		/* Set Bit size 8 bit data and 1 stop */
		UCSRC|=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	86 68       	ori	r24, 0x86	; 134
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	05 c0       	rjmp	.+10     	; 0x102 <UART_init+0x70>
	}
	else if (Stop_Bit==2)
  f8:	c2 30       	cpi	r28, 0x02	; 2
  fa:	19 f4       	brne	.+6      	; 0x102 <UART_init+0x70>
	{
		/* Set Bit size 8 bit data and 2 stop */
		UCSRC|=(1<<UCSZ0)|(1<<UCSZ1)|(1<<USBS)|(1<<URSEL);
  fc:	80 b5       	in	r24, 0x20	; 32
  fe:	8e 68       	ori	r24, 0x8E	; 142
 100:	80 bd       	out	0x20, r24	; 32
	}

	/* Enable Transmitter & receiver in UCSRB Register */
	UCSRB|=(1<<TXEN)|(1<<RXEN);
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	88 61       	ori	r24, 0x18	; 24
 106:	8a b9       	out	0x0a, r24	; 10
	
	
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <UART_Send_Data>:

void UART_Send_Data(u8 Data)
{
	/* wait for UDR Transmitter buffer to be Empty*/
	while(((UCSRA>>UDRE)&1)==0);
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <UART_Send_Data>
	/*Load data in UDRR */
	UDR=Data;
 114:	8c b9       	out	0x0c, r24	; 12
}
 116:	08 95       	ret

00000118 <UART_Send_String>:


void UART_Send_String(u8* string)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec 01       	movw	r28, r24
	while(*string!='\0')
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <UART_Send_String+0x2a>
	/*Load data in UDRR */
	UDR=Data;
}


void UART_Send_String(u8* string)
 124:	21 96       	adiw	r28, 0x01	; 1
{
	while(*string!='\0')
	{
		UART_Send_Data(*string);
 126:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Send_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	98 e3       	ldi	r25, 0x38	; 56
 12e:	a1 e0       	ldi	r26, 0x01	; 1
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	a0 40       	sbci	r26, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <UART_Send_String+0x18>
 138:	00 c0       	rjmp	.+0      	; 0x13a <UART_Send_String+0x22>
 13a:	00 00       	nop
}


void UART_Send_String(u8* string)
{
	while(*string!='\0')
 13c:	89 91       	ld	r24, Y+
 13e:	88 23       	and	r24, r24
 140:	91 f7       	brne	.-28     	; 0x126 <UART_Send_String+0xe>
	{
		UART_Send_Data(*string);
		string++;
		_delay_ms(50);
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <UART_Receive_Data>:

u8 UART_Receive_Data(void)
{
	/* wait for UDR Transmitter buffer to be Empty*/
	while(((UCSRA>>RXC)&1)==0);
 148:	5f 9b       	sbis	0x0b, 7	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <UART_Receive_Data>
	/*receive data from UDRR Receive Buffer */
	return UDR;
 14c:	8c b1       	in	r24, 0x0c	; 12
}
 14e:	08 95       	ret

00000150 <main>:
#include "UART.h"

int main(void)
{
	
	UART_init(9600,1,NONE);    /*UART init*/ 
 150:	60 e8       	ldi	r22, 0x80	; 128
 152:	75 e2       	ldi	r23, 0x25	; 37
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	94 e3       	ldi	r25, 0x34	; 52
 164:	ac e0       	ldi	r26, 0x0C	; 12
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x16>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x20>
 170:	00 00       	nop
	_delay_ms(500);
	
	UART_Send_Data('A');
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Send_Data>
	UART_Send_String(" Ali Morsy");
 178:	80 e6       	ldi	r24, 0x60	; 96
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 8c 00 	call	0x118	; 0x118 <UART_Send_String>
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0x30>

00000182 <__udivmodsi4>:
 182:	a1 e2       	ldi	r26, 0x21	; 33
 184:	1a 2e       	mov	r1, r26
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	fd 01       	movw	r30, r26
 18c:	0d c0       	rjmp	.+26     	; 0x1a8 <__udivmodsi4_ep>

0000018e <__udivmodsi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	ee 1f       	adc	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	a2 17       	cp	r26, r18
 198:	b3 07       	cpc	r27, r19
 19a:	e4 07       	cpc	r30, r20
 19c:	f5 07       	cpc	r31, r21
 19e:	20 f0       	brcs	.+8      	; 0x1a8 <__udivmodsi4_ep>
 1a0:	a2 1b       	sub	r26, r18
 1a2:	b3 0b       	sbc	r27, r19
 1a4:	e4 0b       	sbc	r30, r20
 1a6:	f5 0b       	sbc	r31, r21

000001a8 <__udivmodsi4_ep>:
 1a8:	66 1f       	adc	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	1a 94       	dec	r1
 1b2:	69 f7       	brne	.-38     	; 0x18e <__udivmodsi4_loop>
 1b4:	60 95       	com	r22
 1b6:	70 95       	com	r23
 1b8:	80 95       	com	r24
 1ba:	90 95       	com	r25
 1bc:	9b 01       	movw	r18, r22
 1be:	ac 01       	movw	r20, r24
 1c0:	bd 01       	movw	r22, r26
 1c2:	cf 01       	movw	r24, r30
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
