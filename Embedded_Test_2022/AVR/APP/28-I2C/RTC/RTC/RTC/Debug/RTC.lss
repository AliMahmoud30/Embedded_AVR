
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000089e  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00001070  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f0a  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000500  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e6  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000318  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000925  00000000  00000000  000034a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 03 	call	0x6de	; 0x6de <main>
  8a:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <HRTC_voidReadClock>:


#include "HRTC.h"

void HRTC_voidReadClock(u8* copy_u8Seconds, u8* copy_u8Minutes, u8* copy_u8Hours)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
 1e0:	8b 01       	movw	r16, r22
 1e2:	7a 01       	movw	r14, r20
	
	MI2C_voidStart();
 1e4:	0e 94 b3 02 	call	0x566	; 0x566 <MI2C_voidStart>
	MI2C_u8WriteAddress(RTC_ADDRESS_WRITE);
 1e8:	80 ed       	ldi	r24, 0xD0	; 208
 1ea:	0e 94 ba 02 	call	0x574	; 0x574 <MI2C_u8WriteAddress>
	MI2C_u8WriteData(RTC_ADDRESS_OF_SECONDS);  //Addresses Are Incremental
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 cc 02 	call	0x598	; 0x598 <MI2C_u8WriteData>
	MI2C_u8RepeatedStart(RTC_ADDRESS_READ);
 1f4:	81 ed       	ldi	r24, 0xD1	; 209
 1f6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <MI2C_u8RepeatedStart>
	*copy_u8Seconds  = MI2C_u8ReadAck();
 1fa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MI2C_u8ReadAck>
 1fe:	88 83       	st	Y, r24
	*copy_u8Minutes  = MI2C_u8ReadAck();
 200:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MI2C_u8ReadAck>
 204:	f8 01       	movw	r30, r16
 206:	80 83       	st	Z, r24
	*copy_u8Hours    = MI2C_u8ReadNAck();
 208:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <MI2C_u8ReadNAck>
 20c:	f7 01       	movw	r30, r14
 20e:	80 83       	st	Z, r24
	MI2C_voidStop();
 210:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MI2C_voidStop>
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <HRTC_voidReadCalender>:

void HRTC_voidReadCalender(u8* copy_u8Day, u8* copy_u8Date, u8* copy_u8Month, u8* copy_u8Year)
{
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ec 01       	movw	r28, r24
 234:	8b 01       	movw	r16, r22
 236:	7a 01       	movw	r14, r20
 238:	69 01       	movw	r12, r18
	
	MI2C_voidStart();
 23a:	0e 94 b3 02 	call	0x566	; 0x566 <MI2C_voidStart>
	MI2C_u8WriteAddress(RTC_ADDRESS_WRITE);
 23e:	80 ed       	ldi	r24, 0xD0	; 208
 240:	0e 94 ba 02 	call	0x574	; 0x574 <MI2C_u8WriteAddress>
	MI2C_u8WriteData(RTC_ADDRESS_OF_DAY);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	0e 94 cc 02 	call	0x598	; 0x598 <MI2C_u8WriteData>
	MI2C_u8RepeatedStart(RTC_ADDRESS_READ);
 24a:	81 ed       	ldi	r24, 0xD1	; 209
 24c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <MI2C_u8RepeatedStart>
	*copy_u8Day	     = MI2C_u8ReadAck();
 250:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MI2C_u8ReadAck>
 254:	88 83       	st	Y, r24
	*copy_u8Date     = MI2C_u8ReadAck();
 256:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MI2C_u8ReadAck>
 25a:	f8 01       	movw	r30, r16
 25c:	80 83       	st	Z, r24
	*copy_u8Month    = MI2C_u8ReadAck();
 25e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MI2C_u8ReadAck>
 262:	f7 01       	movw	r30, r14
 264:	80 83       	st	Z, r24
	*copy_u8Year	 = MI2C_u8ReadNAck();
 266:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <MI2C_u8ReadNAck>
 26a:	f6 01       	movw	r30, r12
 26c:	80 83       	st	Z, r24
	MI2C_voidStop();
 26e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MI2C_voidStop>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	08 95       	ret

00000284 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 284:	89 e3       	ldi	r24, 0x39	; 57
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Enable+0xe>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Enable+0x14>
 298:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 29a:	89 e3       	ldi	r24, 0x39	; 57
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 2a4:	08 95       	ret

000002a6 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 2aa:	48 2f       	mov	r20, r24
 2ac:	42 95       	swap	r20
 2ae:	4f 70       	andi	r20, 0x0F	; 15
 2b0:	41 70       	andi	r20, 0x01	; 1
 2b2:	89 e3       	ldi	r24, 0x39	; 57
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 2ba:	4c 2f       	mov	r20, r28
 2bc:	42 95       	swap	r20
 2be:	46 95       	lsr	r20
 2c0:	47 70       	andi	r20, 0x07	; 7
 2c2:	41 70       	andi	r20, 0x01	; 1
 2c4:	89 e3       	ldi	r24, 0x39	; 57
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 2cc:	4c 2f       	mov	r20, r28
 2ce:	42 95       	swap	r20
 2d0:	46 95       	lsr	r20
 2d2:	46 95       	lsr	r20
 2d4:	43 70       	andi	r20, 0x03	; 3
 2d6:	41 70       	andi	r20, 0x01	; 1
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 2e0:	4c 2f       	mov	r20, r28
 2e2:	44 1f       	adc	r20, r20
 2e4:	44 27       	eor	r20, r20
 2e6:	44 1f       	adc	r20, r20
 2e8:	89 e3       	ldi	r24, 0x39	; 57
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 2f0:	89 e3       	ldi	r24, 0x39	; 57
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 2fa:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 2fe:	4c 2f       	mov	r20, r28
 300:	41 70       	andi	r20, 0x01	; 1
 302:	89 e3       	ldi	r24, 0x39	; 57
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 30a:	4c 2f       	mov	r20, r28
 30c:	46 95       	lsr	r20
 30e:	41 70       	andi	r20, 0x01	; 1
 310:	89 e3       	ldi	r24, 0x39	; 57
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 318:	4c 2f       	mov	r20, r28
 31a:	46 95       	lsr	r20
 31c:	46 95       	lsr	r20
 31e:	41 70       	andi	r20, 0x01	; 1
 320:	89 e3       	ldi	r24, 0x39	; 57
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 328:	c6 95       	lsr	r28
 32a:	c6 95       	lsr	r28
 32c:	c6 95       	lsr	r28
 32e:	4c 2f       	mov	r20, r28
 330:	41 70       	andi	r20, 0x01	; 1
 332:	89 e3       	ldi	r24, 0x39	; 57
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 33a:	89 e3       	ldi	r24, 0x39	; 57
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 344:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Enable>
		
	 #endif
}
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_send_string>:

void LCD_send_string(char *data)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 352:	88 81       	ld	r24, Y
 354:	88 23       	and	r24, r24
 356:	31 f0       	breq	.+12     	; 0x364 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 358:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 35a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 35e:	89 91       	ld	r24, Y+
 360:	88 23       	and	r24, r24
 362:	d9 f7       	brne	.-10     	; 0x35a <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 36e:	48 2f       	mov	r20, r24
 370:	42 95       	swap	r20
 372:	4f 70       	andi	r20, 0x0F	; 15
 374:	41 70       	andi	r20, 0x01	; 1
 376:	89 e3       	ldi	r24, 0x39	; 57
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 37e:	4c 2f       	mov	r20, r28
 380:	42 95       	swap	r20
 382:	46 95       	lsr	r20
 384:	47 70       	andi	r20, 0x07	; 7
 386:	41 70       	andi	r20, 0x01	; 1
 388:	89 e3       	ldi	r24, 0x39	; 57
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 390:	4c 2f       	mov	r20, r28
 392:	42 95       	swap	r20
 394:	46 95       	lsr	r20
 396:	46 95       	lsr	r20
 398:	43 70       	andi	r20, 0x03	; 3
 39a:	41 70       	andi	r20, 0x01	; 1
 39c:	89 e3       	ldi	r24, 0x39	; 57
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 3a4:	4c 2f       	mov	r20, r28
 3a6:	44 1f       	adc	r20, r20
 3a8:	44 27       	eor	r20, r20
 3aa:	44 1f       	adc	r20, r20
 3ac:	89 e3       	ldi	r24, 0x39	; 57
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 3b4:	89 e3       	ldi	r24, 0x39	; 57
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 3be:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 3c2:	4c 2f       	mov	r20, r28
 3c4:	41 70       	andi	r20, 0x01	; 1
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 3ce:	4c 2f       	mov	r20, r28
 3d0:	46 95       	lsr	r20
 3d2:	41 70       	andi	r20, 0x01	; 1
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 3dc:	4c 2f       	mov	r20, r28
 3de:	46 95       	lsr	r20
 3e0:	46 95       	lsr	r20
 3e2:	41 70       	andi	r20, 0x01	; 1
 3e4:	89 e3       	ldi	r24, 0x39	; 57
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 3ec:	c6 95       	lsr	r28
 3ee:	c6 95       	lsr	r28
 3f0:	c6 95       	lsr	r28
 3f2:	4c 2f       	mov	r20, r28
 3f4:	41 70       	andi	r20, 0x01	; 1
 3f6:	89 e3       	ldi	r24, 0x39	; 57
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 3fe:	89 e3       	ldi	r24, 0x39	; 57
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 408:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Enable>
	
	#endif

}
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <LCD_inti>:
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	91 ee       	ldi	r25, 0xE1	; 225
 414:	a4 e0       	ldi	r26, 0x04	; 4
 416:	81 50       	subi	r24, 0x01	; 1
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	a0 40       	sbci	r26, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <LCD_inti+0x6>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <LCD_inti+0x10>
 420:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 422:	89 e3       	ldi	r24, 0x39	; 57
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 42c:	89 e3       	ldi	r24, 0x39	; 57
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 436:	89 e3       	ldi	r24, 0x39	; 57
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 440:	89 e3       	ldi	r24, 0x39	; 57
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 44a:	89 e3       	ldi	r24, 0x39	; 57
 44c:	65 e0       	ldi	r22, 0x05	; 5
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 454:	89 e3       	ldi	r24, 0x39	; 57
 456:	64 e0       	ldi	r22, 0x04	; 4
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 45e:	89 e3       	ldi	r24, 0x39	; 57
 460:	66 e0       	ldi	r22, 0x06	; 6
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 468:	89 e3       	ldi	r24, 0x39	; 57
 46a:	66 e0       	ldi	r22, 0x06	; 6
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 478:	af e1       	ldi	r26, 0x1F	; 31
 47a:	be e4       	ldi	r27, 0x4E	; 78
 47c:	11 97       	sbiw	r26, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_inti+0x6c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_inti+0x72>
 482:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 484:	88 e2       	ldi	r24, 0x28	; 40
 486:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 48a:	8f ec       	ldi	r24, 0xCF	; 207
 48c:	97 e0       	ldi	r25, 0x07	; 7
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_inti+0x7e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_inti+0x84>
 494:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 496:	8e e0       	ldi	r24, 0x0E	; 14
 498:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 49c:	af ec       	ldi	r26, 0xCF	; 207
 49e:	b7 e0       	ldi	r27, 0x07	; 7
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_inti+0x90>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_inti+0x96>
 4a6:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 4ae:	8f e1       	ldi	r24, 0x1F	; 31
 4b0:	9e e4       	ldi	r25, 0x4E	; 78
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_inti+0xa2>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_inti+0xa8>
 4b8:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 4c0:	af ec       	ldi	r26, 0xCF	; 207
 4c2:	b7 e0       	ldi	r27, 0x07	; 7
 4c4:	11 97       	sbiw	r26, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_inti+0xb4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_inti+0xba>
 4ca:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 4cc:	08 95       	ret

000004ce <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
	
}
 4d4:	08 95       	ret

000004d6 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	0f 92       	push	r0
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	19 f4       	brne	.+6      	; 0x4ea <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 4e4:	61 58       	subi	r22, 0x81	; 129
 4e6:	69 83       	std	Y+1, r22	; 0x01
 4e8:	0e c0       	rjmp	.+28     	; 0x506 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 4ea:	82 30       	cpi	r24, 0x02	; 2
 4ec:	19 f4       	brne	.+6      	; 0x4f4 <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 4ee:	61 54       	subi	r22, 0x41	; 65
 4f0:	69 83       	std	Y+1, r22	; 0x01
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	20 f4       	brcc	.+8      	; 0x502 <LCD_move_cursor+0x2c>
 4fa:	61 31       	cpi	r22, 0x11	; 17
 4fc:	10 f4       	brcc	.+4      	; 0x502 <LCD_move_cursor+0x2c>
 4fe:	66 23       	and	r22, r22
 500:	11 f4       	brne	.+4      	; 0x506 <LCD_move_cursor+0x30>
	{
		data=0x80;
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
 50c:	8f ec       	ldi	r24, 0xCF	; 207
 50e:	97 e0       	ldi	r25, 0x07	; 7
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_move_cursor+0x3a>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_move_cursor+0x40>
 516:	00 00       	nop
	_delay_ms(1);
}
 518:	0f 90       	pop	r0
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <lcd_print>:

void lcd_print(char *str)
{
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 528:	fc 01       	movw	r30, r24
 52a:	80 81       	ld	r24, Z
 52c:	88 23       	and	r24, r24
 52e:	51 f0       	breq	.+20     	; 0x544 <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 530:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 532:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		i++;
 536:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 538:	f8 01       	movw	r30, r16
 53a:	ec 0f       	add	r30, r28
 53c:	f1 1d       	adc	r31, r1
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	b9 f7       	brne	.-18     	; 0x532 <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	08 95       	ret

0000054c <MI2C_u8voidInit>:

#define F_CPU 8000000ul

void MI2C_u8voidInit(void)
{
	I2C_TWBR=(u8)(((F_CPU/I2C_CLOCK)-16)/(2*I2C_Prescaler));
 54c:	60 e9       	ldi	r22, 0x90	; 144
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	a9 01       	movw	r20, r18
 55a:	0e 94 2b 04 	call	0x856	; 0x856 <__udivmodsi4>
 55e:	20 b9       	out	0x00, r18	; 0
	//I2C_TWBR=72;
	switch (I2C_Prescaler)
	{
		case DIV_1 : CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
 560:	08 98       	cbi	0x01, 0	; 1
 562:	09 98       	cbi	0x01, 1	; 1
		case DIV_16: CLR_BIT(I2C_TWSR,0);SET_BIT(I2C_TWSR,1); break;
		case DIV_64: CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
		default:
		break;
	}
}
 564:	08 95       	ret

00000566 <MI2C_voidStart>:

void MI2C_voidStart(void)
{
	u8 status;
	u8 ReturnVal=1;
	I2C_TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);  /* Enable TWI, Generate Start Condition, Clear TWI Flag  */
 566:	84 ea       	ldi	r24, 0xA4	; 164
 568:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);		   /* Wait until TWI finish its current job */
 56a:	06 b6       	in	r0, 0x36	; 54
 56c:	07 fe       	sbrs	r0, 7
 56e:	fd cf       	rjmp	.-6      	; 0x56a <MI2C_voidStart+0x4>
	status=I2C_TWSR & 0xF8;
 570:	81 b1       	in	r24, 0x01	; 1
	else
	{
		ReturnVal=0;
	}
	return ReturnVal;
}
 572:	08 95       	ret

00000574 <MI2C_u8WriteAddress>:

u8 MI2C_u8WriteAddress(u8 copy_u8WriteAddress)
{	
	u8 status;
	u8 ReturnVal;
	I2C_TWDR=copy_u8WriteAddress;
 574:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
 576:	84 e8       	ldi	r24, 0x84	; 132
 578:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
 57a:	06 b6       	in	r0, 0x36	; 54
 57c:	07 fe       	sbrs	r0, 7
 57e:	fd cf       	rjmp	.-6      	; 0x57a <MI2C_u8WriteAddress+0x6>
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
 580:	81 b1       	in	r24, 0x01	; 1
 582:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
 584:	88 31       	cpi	r24, 0x18	; 24
 586:	19 f0       	breq	.+6      	; 0x58e <MI2C_u8WriteAddress+0x1a>
	{
		ReturnVal=1;
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
 588:	80 32       	cpi	r24, 0x20	; 32
 58a:	21 f4       	brne	.+8      	; 0x594 <MI2C_u8WriteAddress+0x20>
 58c:	02 c0       	rjmp	.+4      	; 0x592 <MI2C_u8WriteAddress+0x1e>
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
	{
		ReturnVal=1;
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	01 c0       	rjmp	.+2      	; 0x594 <MI2C_u8WriteAddress+0x20>
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
	{
		ReturnVal=0;
 592:	90 e0       	ldi	r25, 0x00	; 0
	}
	return ReturnVal;
}
 594:	89 2f       	mov	r24, r25
 596:	08 95       	ret

00000598 <MI2C_u8WriteData>:
u8 MI2C_u8WriteData(u8 copy_u8Data)
{
	u8 status;
	u8 ReturnVal;
	
	I2C_TWDR=copy_u8Data;					/* Copy data in TWI data register */
 598:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);			/* Enable TWI and clear interrupt flag */
 59a:	84 e8       	ldi	r24, 0x84	; 132
 59c:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		/* Wait until TWI finish its current job */
 59e:	06 b6       	in	r0, 0x36	; 54
 5a0:	07 fe       	sbrs	r0, 7
 5a2:	fd cf       	rjmp	.-6      	; 0x59e <MI2C_u8WriteData+0x6>
	status=I2C_TWSR & 0xF8;					/* Read TWI status register */
 5a4:	81 b1       	in	r24, 0x01	; 1
	}
	else if (status==0x30)					/* Check for Data transmitted &nack received */
	{
		ReturnVal=0;
	}
}
 5a6:	08 95       	ret

000005a8 <MI2C_u8RepeatedStart>:

/* I2C repeated start function */
u8 MI2C_u8RepeatedStart(u8 copy_u8WriteAddress) 
{
	u8 status;									/* Declare variable */
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
 5a8:	94 ea       	ldi	r25, 0xA4	; 164
 5aa:	96 bf       	out	0x36, r25	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 5ac:	06 b6       	in	r0, 0x36	; 54
 5ae:	07 fe       	sbrs	r0, 7
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <MI2C_u8RepeatedStart+0x4>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 5b2:	91 b1       	in	r25, 0x01	; 1
 5b4:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x10)							/* Check for repeated start transmitted */
 5b6:	90 31       	cpi	r25, 0x10	; 16
 5b8:	71 f4       	brne	.+28     	; 0x5d6 <MI2C_u8RepeatedStart+0x2e>
	{
		return 0;								/* Return 0 for repeated start condition fail */
	}		
	I2C_TWDR=copy_u8WriteAddress;					/* Write SLA+R in TWI data register */
 5ba:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
 5bc:	84 e8       	ldi	r24, 0x84	; 132
 5be:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 5c0:	06 b6       	in	r0, 0x36	; 54
 5c2:	07 fe       	sbrs	r0, 7
 5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <MI2C_u8RepeatedStart+0x18>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 5c6:	81 b1       	in	r24, 0x01	; 1
 5c8:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
 5ca:	80 34       	cpi	r24, 0x40	; 64
 5cc:	31 f0       	breq	.+12     	; 0x5da <MI2C_u8RepeatedStart+0x32>
	{
	return 1;									/* Return 1 to indicate ack received */
	}	
	if(status==0x48)							/* Check for SLA+R transmitted &nack received */
 5ce:	88 34       	cpi	r24, 0x48	; 72
 5d0:	31 f4       	brne	.+12     	; 0x5de <MI2C_u8RepeatedStart+0x36>
	{
	return 2;									/* Return 2 to indicate nack received */
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	08 95       	ret
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status!=0x10)							/* Check for repeated start transmitted */
	{
		return 0;								/* Return 0 for repeated start condition fail */
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
	{
	return 1;									/* Return 1 to indicate ack received */
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret
	{
	return 2;									/* Return 2 to indicate nack received */
	}	
	else
	{
	return 3;									/* Else return 3 to indicate SLA+W failed */
 5de:	83 e0       	ldi	r24, 0x03	; 3
	}	
}
 5e0:	08 95       	ret

000005e2 <MI2C_u8ReadAck>:


u8 MI2C_u8ReadAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
 5e2:	84 ec       	ldi	r24, 0xC4	; 196
 5e4:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 5e6:	06 b6       	in	r0, 0x36	; 54
 5e8:	07 fe       	sbrs	r0, 7
 5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <MI2C_u8ReadAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 5ec:	83 b1       	in	r24, 0x03	; 3
}
 5ee:	08 95       	ret

000005f0 <MI2C_u8ReadNAck>:

u8 MI2C_u8ReadNAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);			 /* Enable TWI and clear interrupt flag */
 5f0:	84 e8       	ldi	r24, 0x84	; 132
 5f2:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 5f4:	06 b6       	in	r0, 0x36	; 54
 5f6:	07 fe       	sbrs	r0, 7
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <MI2C_u8ReadNAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 5fa:	83 b1       	in	r24, 0x03	; 3
}
 5fc:	08 95       	ret

000005fe <MI2C_voidStop>:


void MI2C_voidStop(void)
{
	SET_BIT(I2C_TWCR,TWSTO);				 /* Enable TWI, generate stop */
 5fe:	86 b7       	in	r24, 0x36	; 54
 600:	80 61       	ori	r24, 0x10	; 16
 602:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWSTO)==1);		 /* Wait until stop condition execution */
 604:	86 b7       	in	r24, 0x36	; 54
 606:	84 fd       	sbrc	r24, 4
 608:	fd cf       	rjmp	.-6      	; 0x604 <MI2C_voidStop+0x6>
}
 60a:	08 95       	ret

0000060c <MI2C_voidSlaveInit>:


void MI2C_voidSlaveInit(u8 copy_u8SlaveAddress)
{
	I2C_TWAR=copy_u8SlaveAddress;
 60c:	82 b9       	out	0x02, r24	; 2
	SET_BIT(I2C_TWCR,TWEN);					/* Enable TWI     */
 60e:	86 b7       	in	r24, 0x36	; 54
 610:	84 60       	ori	r24, 0x04	; 4
 612:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWEA);					/* Enable Generation for Ack */
 614:	86 b7       	in	r24, 0x36	; 54
 616:	80 64       	ori	r24, 0x40	; 64
 618:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWINT);				/* Clear TWI Flag */
 61a:	86 b7       	in	r24, 0x36	; 54
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	86 bf       	out	0x36, r24	; 54
}
 620:	08 95       	ret

00000622 <MI2C_u8SlaveListen>:
u8 MI2C_u8SlaveListen(void)
{
	u8 status;
	while(1)
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 622:	86 b7       	in	r24, 0x36	; 54
 624:	80 68       	ori	r24, 0x80	; 128
 626:	86 bf       	out	0x36, r24	; 54
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
 628:	06 b6       	in	r0, 0x36	; 54
 62a:	07 fe       	sbrs	r0, 7
 62c:	fd cf       	rjmp	.-6      	; 0x628 <MI2C_u8SlaveListen+0x6>
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 62e:	81 b1       	in	r24, 0x01	; 1
 630:	88 7f       	andi	r24, 0xF8	; 248
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
 632:	80 36       	cpi	r24, 0x60	; 96
 634:	61 f0       	breq	.+24     	; 0x64e <MI2C_u8SlaveListen+0x2c>
 636:	88 36       	cpi	r24, 0x68	; 104
 638:	61 f0       	breq	.+24     	; 0x652 <MI2C_u8SlaveListen+0x30>
			return 0;								/* Return 0 to indicate ack returned */
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
 63a:	88 3a       	cpi	r24, 0xA8	; 168
 63c:	61 f0       	breq	.+24     	; 0x656 <MI2C_u8SlaveListen+0x34>
 63e:	80 3b       	cpi	r24, 0xB0	; 176
 640:	61 f0       	breq	.+24     	; 0x65a <MI2C_u8SlaveListen+0x38>
			return 1;								/* Return 1 to indicate ack returned */
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
 642:	80 37       	cpi	r24, 0x70	; 112
 644:	61 f0       	breq	.+24     	; 0x65e <MI2C_u8SlaveListen+0x3c>
 646:	88 37       	cpi	r24, 0x78	; 120
 648:	61 f7       	brne	.-40     	; 0x622 <MI2C_u8SlaveListen>
			return 2;								/* Return 2 to indicate ack returned */
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	08 95       	ret
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
			return 0;								/* Return 0 to indicate ack returned */
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
			return 1;								/* Return 1 to indicate ack returned */
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
			return 2;								/* Return 2 to indicate ack returned */
 65e:	82 e0       	ldi	r24, 0x02	; 2
		else
			continue;								/* Else continue */
	}
}
 660:	08 95       	ret

00000662 <I2C_Slave_Transmit>:

s8 I2C_Slave_Transmit(u8 copy_u8Data)
{
	u8 status;
	I2C_TWDR=copy_u8Data;						/* Write data to TWDR to be transmitted */
 662:	83 b9       	out	0x03, r24	; 3
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 664:	86 b7       	in	r24, 0x36	; 54
 666:	80 68       	ori	r24, 0x80	; 128
 668:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 66a:	06 b6       	in	r0, 0x36	; 54
 66c:	07 fe       	sbrs	r0, 7
 66e:	fd cf       	rjmp	.-6      	; 0x66a <I2C_Slave_Transmit+0x8>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 670:	81 b1       	in	r24, 0x01	; 1
 672:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0xA0)							/* Check for STOP/REPEATED START received */
 674:	80 3a       	cpi	r24, 0xA0	; 160
 676:	29 f4       	brne	.+10     	; 0x682 <I2C_Slave_Transmit+0x20>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
 678:	86 b7       	in	r24, 0x36	; 54
 67a:	80 68       	ori	r24, 0x80	; 128
 67c:	86 bf       	out	0x36, r24	; 54
		return -1;
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	08 95       	ret
	}
	if(status==0xB8)							/* Check for data transmitted & ack received */
 682:	88 3b       	cpi	r24, 0xB8	; 184
 684:	59 f0       	breq	.+22     	; 0x69c <I2C_Slave_Transmit+0x3a>
	{
		return 0;								/* If yes then return 0 */
	}
	if(status==0xC0)							/* Check for data transmitted & nack received */
 686:	80 3c       	cpi	r24, 0xC0	; 192
 688:	29 f4       	brne	.+10     	; 0x694 <I2C_Slave_Transmit+0x32>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -2 */
 68a:	86 b7       	in	r24, 0x36	; 54
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	86 bf       	out	0x36, r24	; 54
		return -2;
 690:	8e ef       	ldi	r24, 0xFE	; 254
 692:	08 95       	ret
	}
	if(status==0xC8)							/* Last byte transmitted with ack received */
 694:	88 3c       	cpi	r24, 0xC8	; 200
 696:	21 f4       	brne	.+8      	; 0x6a0 <I2C_Slave_Transmit+0x3e>
	{
		return -3;								/* If yes then return -3 */
 698:	8d ef       	ldi	r24, 0xFD	; 253
 69a:	08 95       	ret
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
		return -1;
	}
	if(status==0xB8)							/* Check for data transmitted & ack received */
	{
		return 0;								/* If yes then return 0 */
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	08 95       	ret
	{
		return -3;								/* If yes then return -3 */
	}
	else										/* else return -4 */
	{
		return -4;
 6a0:	8c ef       	ldi	r24, 0xFC	; 252
	}
	
}
 6a2:	08 95       	ret

000006a4 <MI2C_u8Slave_Receive>:

s8 MI2C_u8Slave_Receive(void)
{
	u8 status;									/* Declare variable */
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 6a4:	86 b7       	in	r24, 0x36	; 54
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 6aa:	06 b6       	in	r0, 0x36	; 54
 6ac:	07 fe       	sbrs	r0, 7
 6ae:	fd cf       	rjmp	.-6      	; 0x6aa <MI2C_u8Slave_Receive+0x6>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 6b0:	81 b1       	in	r24, 0x01	; 1
 6b2:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x80||status==0x90)				/* Check for data received &ack returned */
 6b4:	80 38       	cpi	r24, 0x80	; 128
 6b6:	11 f0       	breq	.+4      	; 0x6bc <MI2C_u8Slave_Receive+0x18>
 6b8:	80 39       	cpi	r24, 0x90	; 144
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <MI2C_u8Slave_Receive+0x1c>
	{
		return I2C_TWDR;						/* If yes then return received data */
 6bc:	83 b1       	in	r24, 0x03	; 3
 6be:	08 95       	ret
	}
	
	/* Check for data received, nack returned & switched to not addressed slave mode */
	if(status==0x88||status==0x98)
 6c0:	88 38       	cpi	r24, 0x88	; 136
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <MI2C_u8Slave_Receive+0x24>
 6c4:	88 39       	cpi	r24, 0x98	; 152
 6c6:	11 f4       	brne	.+4      	; 0x6cc <MI2C_u8Slave_Receive+0x28>
	{
		return I2C_TWDR;						/* If yes then return received data */
 6c8:	83 b1       	in	r24, 0x03	; 3
 6ca:	08 95       	ret
	}
	if(status==0xA0)							/* Check wether STOP/REPEATED START */
 6cc:	80 3a       	cpi	r24, 0xA0	; 160
 6ce:	29 f4       	brne	.+10     	; 0x6da <MI2C_u8Slave_Receive+0x36>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
 6d0:	86 b7       	in	r24, 0x36	; 54
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	86 bf       	out	0x36, r24	; 54
		return -1;
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	08 95       	ret
	}
	else
	{
		return -2;			/* Else return -2 */
 6da:	8e ef       	ldi	r24, 0xFE	; 254
	}
 6dc:	08 95       	ret

000006de <main>:
#include "MI2C.h"



int main(void)
{
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
 6e6:	27 97       	sbiw	r28, 0x07	; 7
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
	/**********   Variables   *********************/
	u8 Second=0, Minutes=0, Hours=0, AM_PM;
 6f2:	19 82       	std	Y+1, r1	; 0x01
 6f4:	1a 82       	std	Y+2, r1	; 0x02
 6f6:	1b 82       	std	Y+3, r1	; 0x03
	u8 Day   =0, Date=0,    Month=0, Year=0;
 6f8:	1c 82       	std	Y+4, r1	; 0x04
 6fa:	1d 82       	std	Y+5, r1	; 0x05
 6fc:	1e 82       	std	Y+6, r1	; 0x06
 6fe:	1f 82       	std	Y+7, r1	; 0x07
	
	/********** Initialization ********************/
	LCD_inti();
 700:	0e 94 08 02 	call	0x410	; 0x410 <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 704:	8c e0       	ldi	r24, 0x0C	; 12
 706:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_send_cmd>
	MI2C_u8voidInit();
 70a:	0e 94 a6 02 	call	0x54c	; 0x54c <MI2C_u8voidInit>
		 {
			 LCD_send_string(" PM");
		 }
		 else
		 {
			 LCD_send_string(" AM");
 70e:	04 e6       	ldi	r16, 0x64	; 100
 710:	10 e0       	ldi	r17, 0x00	; 0
 		 LCD_send_char(((Second & 0x70)>>4)+48);	//Upper BCD digit of Seconds
 		 LCD_send_char((Second & 0x0F)+48);			//lower BCD digit of Seconds
		 AM_PM=GET_BIT(Hours,5);
		 if (AM_PM==1)
		 {
			 LCD_send_string(" PM");
 712:	0f 2e       	mov	r0, r31
 714:	f0 e6       	ldi	r31, 0x60	; 96
 716:	ef 2e       	mov	r14, r31
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	ff 2e       	mov	r15, r31
 71c:	f0 2d       	mov	r31, r0
	LCD_inti();
	LCD_send_cmd(display_on_cursor_off);
	MI2C_u8voidInit();
    while(1)
    {
		 HRTC_voidReadClock(&Second, &Minutes ,&Hours);
 71e:	ce 01       	movw	r24, r28
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	be 01       	movw	r22, r28
 724:	6e 5f       	subi	r22, 0xFE	; 254
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	ae 01       	movw	r20, r28
 72a:	4d 5f       	subi	r20, 0xFD	; 253
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <HRTC_voidReadClock>
		 HRTC_voidReadCalender(&Day, &Date, &Month, &Year);
 732:	ce 01       	movw	r24, r28
 734:	04 96       	adiw	r24, 0x04	; 4
 736:	be 01       	movw	r22, r28
 738:	6b 5f       	subi	r22, 0xFB	; 251
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	ae 01       	movw	r20, r28
 73e:	4a 5f       	subi	r20, 0xFA	; 250
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	9e 01       	movw	r18, r28
 744:	29 5f       	subi	r18, 0xF9	; 249
 746:	3f 4f       	sbci	r19, 0xFF	; 255
 748:	0e 94 11 01 	call	0x222	; 0x222 <HRTC_voidReadCalender>
		 
		 /**********************Display Clock **********************/
		 LCD_move_cursor(1,1);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_move_cursor>
		 LCD_send_char(((Hours & 0x30)>>4)+48);   //Upper BCD digit of Hours
 754:	8b 81       	ldd	r24, Y+3	; 0x03
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	80 73       	andi	r24, 0x30	; 48
 75a:	90 70       	andi	r25, 0x00	; 0
 75c:	95 95       	asr	r25
 75e:	87 95       	ror	r24
 760:	95 95       	asr	r25
 762:	87 95       	ror	r24
 764:	95 95       	asr	r25
 766:	87 95       	ror	r24
 768:	95 95       	asr	r25
 76a:	87 95       	ror	r24
 76c:	80 5d       	subi	r24, 0xD0	; 208
 76e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char((Hours & 0x0F)+48);		 //lower BCD digit of Hours
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	8f 70       	andi	r24, 0x0F	; 15
 776:	80 5d       	subi	r24, 0xD0	; 208
 778:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char(':');
 77c:	8a e3       	ldi	r24, 0x3A	; 58
 77e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 
		 LCD_send_char(((Minutes & 0x70)>>4)+48);   //Upper BCD digit of Minutes
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	80 77       	andi	r24, 0x70	; 112
 788:	90 70       	andi	r25, 0x00	; 0
 78a:	95 95       	asr	r25
 78c:	87 95       	ror	r24
 78e:	95 95       	asr	r25
 790:	87 95       	ror	r24
 792:	95 95       	asr	r25
 794:	87 95       	ror	r24
 796:	95 95       	asr	r25
 798:	87 95       	ror	r24
 79a:	80 5d       	subi	r24, 0xD0	; 208
 79c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char((Minutes & 0x0F)+48);		//lower BCD digit of Minutes
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	8f 70       	andi	r24, 0x0F	; 15
 7a4:	80 5d       	subi	r24, 0xD0	; 208
 7a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char(':');
 7aa:	8a e3       	ldi	r24, 0x3A	; 58
 7ac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
	
 		 LCD_send_char(((Second & 0x70)>>4)+48);	//Upper BCD digit of Seconds
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	80 77       	andi	r24, 0x70	; 112
 7b6:	90 70       	andi	r25, 0x00	; 0
 7b8:	95 95       	asr	r25
 7ba:	87 95       	ror	r24
 7bc:	95 95       	asr	r25
 7be:	87 95       	ror	r24
 7c0:	95 95       	asr	r25
 7c2:	87 95       	ror	r24
 7c4:	95 95       	asr	r25
 7c6:	87 95       	ror	r24
 7c8:	80 5d       	subi	r24, 0xD0	; 208
 7ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
 		 LCD_send_char((Second & 0x0F)+48);			//lower BCD digit of Seconds
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	8f 70       	andi	r24, 0x0F	; 15
 7d2:	80 5d       	subi	r24, 0xD0	; 208
 7d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 AM_PM=GET_BIT(Hours,5);
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
		 if (AM_PM==1)
 7da:	85 ff       	sbrs	r24, 5
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <main+0x108>
		 {
			 LCD_send_string(" PM");
 7de:	c7 01       	movw	r24, r14
 7e0:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_send_string>
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <main+0x10e>
		 }
		 else
		 {
			 LCD_send_string(" AM");
 7e6:	c8 01       	movw	r24, r16
 7e8:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_send_string>
		 }

		/**********************Display Calender **********************/
		 LCD_move_cursor(2,1);
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCD_move_cursor>
		 LCD_send_char((Date   >> 4  )+48);		/* Upper BCD digit of Date */ 
 7f4:	8d 81       	ldd	r24, Y+5	; 0x05
 7f6:	82 95       	swap	r24
 7f8:	8f 70       	andi	r24, 0x0F	; 15
 7fa:	80 5d       	subi	r24, 0xD0	; 208
 7fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char((Date & 0x0F)+48);		/* lower BCD digit of Date */
 800:	8d 81       	ldd	r24, Y+5	; 0x05
 802:	8f 70       	andi	r24, 0x0F	; 15
 804:	80 5d       	subi	r24, 0xD0	; 208
 806:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char('-');
 80a:	8d e2       	ldi	r24, 0x2D	; 45
 80c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 
		 LCD_send_char((Month >>  4) +48);      /* Upper BCD digit of Month  */
 810:	8e 81       	ldd	r24, Y+6	; 0x06
 812:	82 95       	swap	r24
 814:	8f 70       	andi	r24, 0x0F	; 15
 816:	80 5d       	subi	r24, 0xD0	; 208
 818:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char((Month & 0x0F)+48);		/* lower BCD digit of Month  */
 81c:	8e 81       	ldd	r24, Y+6	; 0x06
 81e:	8f 70       	andi	r24, 0x0F	; 15
 820:	80 5d       	subi	r24, 0xD0	; 208
 822:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char('-');
 826:	8d e2       	ldi	r24, 0x2D	; 45
 828:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 
		 LCD_send_char((Year   >> 4)+48);		/* Upper BCD digit of Year */
 82c:	8f 81       	ldd	r24, Y+7	; 0x07
 82e:	82 95       	swap	r24
 830:	8f 70       	andi	r24, 0x0F	; 15
 832:	80 5d       	subi	r24, 0xD0	; 208
 834:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
		 LCD_send_char((Year & 0x0F)+48);		/* lower BCD digit of Year */
 838:	8f 81       	ldd	r24, Y+7	; 0x07
 83a:	8f 70       	andi	r24, 0x0F	; 15
 83c:	80 5d       	subi	r24, 0xD0	; 208
 83e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_char>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	91 ee       	ldi	r25, 0xE1	; 225
 846:	a4 e0       	ldi	r26, 0x04	; 4
 848:	81 50       	subi	r24, 0x01	; 1
 84a:	90 40       	sbci	r25, 0x00	; 0
 84c:	a0 40       	sbci	r26, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x16a>
 850:	00 c0       	rjmp	.+0      	; 0x852 <main+0x174>
 852:	00 00       	nop
 854:	64 cf       	rjmp	.-312    	; 0x71e <main+0x40>

00000856 <__udivmodsi4>:
 856:	a1 e2       	ldi	r26, 0x21	; 33
 858:	1a 2e       	mov	r1, r26
 85a:	aa 1b       	sub	r26, r26
 85c:	bb 1b       	sub	r27, r27
 85e:	fd 01       	movw	r30, r26
 860:	0d c0       	rjmp	.+26     	; 0x87c <__udivmodsi4_ep>

00000862 <__udivmodsi4_loop>:
 862:	aa 1f       	adc	r26, r26
 864:	bb 1f       	adc	r27, r27
 866:	ee 1f       	adc	r30, r30
 868:	ff 1f       	adc	r31, r31
 86a:	a2 17       	cp	r26, r18
 86c:	b3 07       	cpc	r27, r19
 86e:	e4 07       	cpc	r30, r20
 870:	f5 07       	cpc	r31, r21
 872:	20 f0       	brcs	.+8      	; 0x87c <__udivmodsi4_ep>
 874:	a2 1b       	sub	r26, r18
 876:	b3 0b       	sbc	r27, r19
 878:	e4 0b       	sbc	r30, r20
 87a:	f5 0b       	sbc	r31, r21

0000087c <__udivmodsi4_ep>:
 87c:	66 1f       	adc	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	1a 94       	dec	r1
 886:	69 f7       	brne	.-38     	; 0x862 <__udivmodsi4_loop>
 888:	60 95       	com	r22
 88a:	70 95       	com	r23
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	9b 01       	movw	r18, r22
 892:	ac 01       	movw	r20, r24
 894:	bd 01       	movw	r22, r26
 896:	cf 01       	movw	r24, r30
 898:	08 95       	ret

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
