
Hello_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006a0  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc7  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046b  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000791  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000688  00000000  00000000  00002fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 4e 03 	jmp	0x69c	; 0x69c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
 1b2:	82 81       	ldd	r24, Z+2	; 0x02
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
 1d0:	08 95       	ret

000001d2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	94 e3       	ldi	r25, 0x34	; 52
 1d6:	ac e0       	ldi	r26, 0x0C	; 12
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	a0 40       	sbci	r26, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x6>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x10>
 1e2:	00 00       	nop
{
		
	u8 i=0;
	_delay_ms(500);
	//LCD_inti();
	DIO_Set_Pin_Direction(B,0,OUTPUT);
 1e4:	86 e3       	ldi	r24, 0x36	; 54
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(B,1,OUTPUT);
 1ee:	86 e3       	ldi	r24, 0x36	; 54
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	
	MI2C_u8voidInit();
 1f8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <MI2C_u8voidInit>
 1fc:	c0 e3       	ldi	r28, 0x30	; 48
	for (i=0;i<10;i++)
	{
		MI2C_voidStart();
 1fe:	0e 94 87 02 	call	0x50e	; 0x50e <MI2C_voidStart>
		MI2C_u8WriteAddress(0x50);
 202:	80 e5       	ldi	r24, 0x50	; 80
 204:	0e 94 8e 02 	call	0x51c	; 0x51c <MI2C_u8WriteAddress>
		MI2C_u8WriteData(i+48);
 208:	8c 2f       	mov	r24, r28
 20a:	0e 94 a0 02 	call	0x540	; 0x540 <MI2C_u8WriteData>
		MI2C_voidStop();
 20e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <MI2C_voidStop>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	94 e3       	ldi	r25, 0x34	; 52
 216:	ac e0       	ldi	r26, 0x0C	; 12
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	a0 40       	sbci	r26, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x46>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x50>
 222:	00 00       	nop
 224:	cf 5f       	subi	r28, 0xFF	; 255
	//LCD_inti();
	DIO_Set_Pin_Direction(B,0,OUTPUT);
	DIO_Set_Pin_Direction(B,1,OUTPUT);
	
	MI2C_u8voidInit();
	for (i=0;i<10;i++)
 226:	ca 33       	cpi	r28, 0x3A	; 58
 228:	51 f7       	brne	.-44     	; 0x1fe <main+0x2c>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0x58>

0000022c <LCD_Enable>:
 22c:	89 e3       	ldi	r24, 0x39	; 57
 22e:	65 e0       	ldi	r22, 0x05	; 5
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 236:	8f e9       	ldi	r24, 0x9F	; 159
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Enable+0xe>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Enable+0x14>
 240:	00 00       	nop
 242:	89 e3       	ldi	r24, 0x39	; 57
 244:	65 e0       	ldi	r22, 0x05	; 5
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 24c:	08 95       	ret

0000024e <LCD_send_char>:
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	48 2f       	mov	r20, r24
 254:	42 95       	swap	r20
 256:	4f 70       	andi	r20, 0x0F	; 15
 258:	41 70       	andi	r20, 0x01	; 1
 25a:	89 e3       	ldi	r24, 0x39	; 57
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 262:	4c 2f       	mov	r20, r28
 264:	42 95       	swap	r20
 266:	46 95       	lsr	r20
 268:	47 70       	andi	r20, 0x07	; 7
 26a:	41 70       	andi	r20, 0x01	; 1
 26c:	89 e3       	ldi	r24, 0x39	; 57
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 274:	4c 2f       	mov	r20, r28
 276:	42 95       	swap	r20
 278:	46 95       	lsr	r20
 27a:	46 95       	lsr	r20
 27c:	43 70       	andi	r20, 0x03	; 3
 27e:	41 70       	andi	r20, 0x01	; 1
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 288:	4c 2f       	mov	r20, r28
 28a:	44 1f       	adc	r20, r20
 28c:	44 27       	eor	r20, r20
 28e:	44 1f       	adc	r20, r20
 290:	89 e3       	ldi	r24, 0x39	; 57
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 298:	89 e3       	ldi	r24, 0x39	; 57
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2a2:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 2a6:	4c 2f       	mov	r20, r28
 2a8:	41 70       	andi	r20, 0x01	; 1
 2aa:	89 e3       	ldi	r24, 0x39	; 57
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2b2:	4c 2f       	mov	r20, r28
 2b4:	46 95       	lsr	r20
 2b6:	41 70       	andi	r20, 0x01	; 1
 2b8:	89 e3       	ldi	r24, 0x39	; 57
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2c0:	4c 2f       	mov	r20, r28
 2c2:	46 95       	lsr	r20
 2c4:	46 95       	lsr	r20
 2c6:	41 70       	andi	r20, 0x01	; 1
 2c8:	89 e3       	ldi	r24, 0x39	; 57
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2d0:	c6 95       	lsr	r28
 2d2:	c6 95       	lsr	r28
 2d4:	c6 95       	lsr	r28
 2d6:	4c 2f       	mov	r20, r28
 2d8:	41 70       	andi	r20, 0x01	; 1
 2da:	89 e3       	ldi	r24, 0x39	; 57
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2e2:	89 e3       	ldi	r24, 0x39	; 57
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2ec:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <LCD_send_string>:
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
 2fa:	88 81       	ld	r24, Y
 2fc:	88 23       	and	r24, r24
 2fe:	31 f0       	breq	.+12     	; 0x30c <LCD_send_string+0x18>
 300:	21 96       	adiw	r28, 0x01	; 1
 302:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_char>
 306:	89 91       	ld	r24, Y+
 308:	88 23       	and	r24, r24
 30a:	d9 f7       	brne	.-10     	; 0x302 <LCD_send_string+0xe>
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <LCD_send_cmd>:
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
 316:	48 2f       	mov	r20, r24
 318:	42 95       	swap	r20
 31a:	4f 70       	andi	r20, 0x0F	; 15
 31c:	41 70       	andi	r20, 0x01	; 1
 31e:	89 e3       	ldi	r24, 0x39	; 57
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 326:	4c 2f       	mov	r20, r28
 328:	42 95       	swap	r20
 32a:	46 95       	lsr	r20
 32c:	47 70       	andi	r20, 0x07	; 7
 32e:	41 70       	andi	r20, 0x01	; 1
 330:	89 e3       	ldi	r24, 0x39	; 57
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 338:	4c 2f       	mov	r20, r28
 33a:	42 95       	swap	r20
 33c:	46 95       	lsr	r20
 33e:	46 95       	lsr	r20
 340:	43 70       	andi	r20, 0x03	; 3
 342:	41 70       	andi	r20, 0x01	; 1
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 34c:	4c 2f       	mov	r20, r28
 34e:	44 1f       	adc	r20, r20
 350:	44 27       	eor	r20, r20
 352:	44 1f       	adc	r20, r20
 354:	89 e3       	ldi	r24, 0x39	; 57
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 35c:	89 e3       	ldi	r24, 0x39	; 57
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 366:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 36a:	4c 2f       	mov	r20, r28
 36c:	41 70       	andi	r20, 0x01	; 1
 36e:	89 e3       	ldi	r24, 0x39	; 57
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 376:	4c 2f       	mov	r20, r28
 378:	46 95       	lsr	r20
 37a:	41 70       	andi	r20, 0x01	; 1
 37c:	89 e3       	ldi	r24, 0x39	; 57
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 384:	4c 2f       	mov	r20, r28
 386:	46 95       	lsr	r20
 388:	46 95       	lsr	r20
 38a:	41 70       	andi	r20, 0x01	; 1
 38c:	89 e3       	ldi	r24, 0x39	; 57
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 394:	c6 95       	lsr	r28
 396:	c6 95       	lsr	r28
 398:	c6 95       	lsr	r28
 39a:	4c 2f       	mov	r20, r28
 39c:	41 70       	andi	r20, 0x01	; 1
 39e:	89 e3       	ldi	r24, 0x39	; 57
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 3a6:	89 e3       	ldi	r24, 0x39	; 57
 3a8:	64 e0       	ldi	r22, 0x04	; 4
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 3b0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <LCD_inti>:
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	91 ee       	ldi	r25, 0xE1	; 225
 3bc:	a4 e0       	ldi	r26, 0x04	; 4
 3be:	81 50       	subi	r24, 0x01	; 1
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	a0 40       	sbci	r26, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <LCD_inti+0x6>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_inti+0x10>
 3c8:	00 00       	nop
 3ca:	89 e3       	ldi	r24, 0x39	; 57
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 3de:	89 e3       	ldi	r24, 0x39	; 57
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 3e8:	89 e3       	ldi	r24, 0x39	; 57
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 3f2:	89 e3       	ldi	r24, 0x39	; 57
 3f4:	65 e0       	ldi	r22, 0x05	; 5
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 3fc:	89 e3       	ldi	r24, 0x39	; 57
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 406:	89 e3       	ldi	r24, 0x39	; 57
 408:	66 e0       	ldi	r22, 0x06	; 6
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
 410:	89 e3       	ldi	r24, 0x39	; 57
 412:	66 e0       	ldi	r22, 0x06	; 6
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 420:	af e1       	ldi	r26, 0x1F	; 31
 422:	be e4       	ldi	r27, 0x4E	; 78
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <LCD_inti+0x6c>
 428:	00 c0       	rjmp	.+0      	; 0x42a <LCD_inti+0x72>
 42a:	00 00       	nop
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 432:	8f ec       	ldi	r24, 0xCF	; 207
 434:	97 e0       	ldi	r25, 0x07	; 7
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_inti+0x7e>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_inti+0x84>
 43c:	00 00       	nop
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 444:	af ec       	ldi	r26, 0xCF	; 207
 446:	b7 e0       	ldi	r27, 0x07	; 7
 448:	11 97       	sbiw	r26, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <LCD_inti+0x90>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <LCD_inti+0x96>
 44e:	00 00       	nop
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 456:	8f e1       	ldi	r24, 0x1F	; 31
 458:	9e e4       	ldi	r25, 0x4E	; 78
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_inti+0xa2>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_inti+0xa8>
 460:	00 00       	nop
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 468:	af ec       	ldi	r26, 0xCF	; 207
 46a:	b7 e0       	ldi	r27, 0x07	; 7
 46c:	11 97       	sbiw	r26, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_inti+0xb4>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_inti+0xba>
 472:	00 00       	nop
 474:	08 95       	ret

00000476 <LCD_clear>:
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 47c:	08 95       	ret

0000047e <LCD_move_cursor>:
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	0f 92       	push	r0
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	19 f4       	brne	.+6      	; 0x492 <LCD_move_cursor+0x14>
 48c:	61 58       	subi	r22, 0x81	; 129
 48e:	69 83       	std	Y+1, r22	; 0x01
 490:	0e c0       	rjmp	.+28     	; 0x4ae <LCD_move_cursor+0x30>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	19 f4       	brne	.+6      	; 0x49c <LCD_move_cursor+0x1e>
 496:	61 54       	subi	r22, 0x41	; 65
 498:	69 83       	std	Y+1, r22	; 0x01
 49a:	09 c0       	rjmp	.+18     	; 0x4ae <LCD_move_cursor+0x30>
 49c:	81 50       	subi	r24, 0x01	; 1
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	20 f4       	brcc	.+8      	; 0x4aa <LCD_move_cursor+0x2c>
 4a2:	61 31       	cpi	r22, 0x11	; 17
 4a4:	10 f4       	brcc	.+4      	; 0x4aa <LCD_move_cursor+0x2c>
 4a6:	66 23       	and	r22, r22
 4a8:	11 f4       	brne	.+4      	; 0x4ae <LCD_move_cursor+0x30>
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	89 83       	std	Y+1, r24	; 0x01
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	0e 94 89 01 	call	0x312	; 0x312 <LCD_send_cmd>
 4b4:	8f ec       	ldi	r24, 0xCF	; 207
 4b6:	97 e0       	ldi	r25, 0x07	; 7
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_move_cursor+0x3a>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_move_cursor+0x40>
 4be:	00 00       	nop
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <lcd_print>:
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	8c 01       	movw	r16, r24
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	88 23       	and	r24, r24
 4d6:	51 f0       	breq	.+20     	; 0x4ec <lcd_print+0x24>
 4d8:	c0 e0       	ldi	r28, 0x00	; 0
 4da:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_send_char>
 4de:	cf 5f       	subi	r28, 0xFF	; 255
 4e0:	f8 01       	movw	r30, r16
 4e2:	ec 0f       	add	r30, r28
 4e4:	f1 1d       	adc	r31, r1
 4e6:	80 81       	ld	r24, Z
 4e8:	88 23       	and	r24, r24
 4ea:	b9 f7       	brne	.-18     	; 0x4da <lcd_print+0x12>
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	08 95       	ret

000004f4 <MI2C_u8voidInit>:

#define F_CPU 8000000ul

void MI2C_u8voidInit(void)
{
	I2C_TWBR=(u8)(((F_CPU/I2C_CLOCK)-16)/(2*I2C_Prescaler));
 4f4:	60 e9       	ldi	r22, 0x90	; 144
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	a9 01       	movw	r20, r18
 502:	0e 94 2c 03 	call	0x658	; 0x658 <__udivmodsi4>
 506:	20 b9       	out	0x00, r18	; 0
	//I2C_TWBR=72;
	switch (I2C_Prescaler)
	{
		case DIV_1 : CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
 508:	08 98       	cbi	0x01, 0	; 1
 50a:	09 98       	cbi	0x01, 1	; 1
		case DIV_16: CLR_BIT(I2C_TWSR,0);SET_BIT(I2C_TWSR,1); break;
		case DIV_64: CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
		default:
		break;
	}
}
 50c:	08 95       	ret

0000050e <MI2C_voidStart>:

void MI2C_voidStart(void)
{
	u8 status;
	u8 ReturnVal=1;
	I2C_TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);  /* Enable TWI, Generate Start Condition, Clear TWI Flag  */
 50e:	84 ea       	ldi	r24, 0xA4	; 164
 510:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);		   /* Wait until TWI finish its current job */
 512:	06 b6       	in	r0, 0x36	; 54
 514:	07 fe       	sbrs	r0, 7
 516:	fd cf       	rjmp	.-6      	; 0x512 <MI2C_voidStart+0x4>
	status=I2C_TWSR & 0xF8;
 518:	81 b1       	in	r24, 0x01	; 1
	else
	{
		ReturnVal=0;
	}
	return ReturnVal;
}
 51a:	08 95       	ret

0000051c <MI2C_u8WriteAddress>:

u8 MI2C_u8WriteAddress(u8 copy_u8WriteAddress)
{	
	u8 status;
	u8 ReturnVal;
	I2C_TWDR=copy_u8WriteAddress;
 51c:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
 51e:	84 e8       	ldi	r24, 0x84	; 132
 520:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
 522:	06 b6       	in	r0, 0x36	; 54
 524:	07 fe       	sbrs	r0, 7
 526:	fd cf       	rjmp	.-6      	; 0x522 <MI2C_u8WriteAddress+0x6>
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
 528:	81 b1       	in	r24, 0x01	; 1
 52a:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
 52c:	88 31       	cpi	r24, 0x18	; 24
 52e:	19 f0       	breq	.+6      	; 0x536 <MI2C_u8WriteAddress+0x1a>
	{
		ReturnVal=1;
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
 530:	80 32       	cpi	r24, 0x20	; 32
 532:	21 f4       	brne	.+8      	; 0x53c <MI2C_u8WriteAddress+0x20>
 534:	02 c0       	rjmp	.+4      	; 0x53a <MI2C_u8WriteAddress+0x1e>
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
	{
		ReturnVal=1;
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	01 c0       	rjmp	.+2      	; 0x53c <MI2C_u8WriteAddress+0x20>
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
	{
		ReturnVal=0;
 53a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return ReturnVal;
}
 53c:	89 2f       	mov	r24, r25
 53e:	08 95       	ret

00000540 <MI2C_u8WriteData>:
u8 MI2C_u8WriteData(u8 copy_u8Data)
{
	u8 status;
	u8 ReturnVal;
	
	I2C_TWDR=copy_u8Data;					/* Copy data in TWI data register */
 540:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);			/* Enable TWI and clear interrupt flag */
 542:	84 e8       	ldi	r24, 0x84	; 132
 544:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		/* Wait until TWI finish its current job */
 546:	06 b6       	in	r0, 0x36	; 54
 548:	07 fe       	sbrs	r0, 7
 54a:	fd cf       	rjmp	.-6      	; 0x546 <MI2C_u8WriteData+0x6>
	status=I2C_TWSR & 0xF8;					/* Read TWI status register */
 54c:	81 b1       	in	r24, 0x01	; 1
	}
	else if (status==0x30)					/* Check for Data transmitted &nack received */
	{
		ReturnVal=0;
	}
}
 54e:	08 95       	ret

00000550 <MI2C_u8RepeatedStart>:

/* I2C repeated start function */
u8 MI2C_u8RepeatedStart(u8 copy_u8WriteAddress) 
{
	u8 status;									/* Declare variable */
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
 550:	94 ea       	ldi	r25, 0xA4	; 164
 552:	96 bf       	out	0x36, r25	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 554:	06 b6       	in	r0, 0x36	; 54
 556:	07 fe       	sbrs	r0, 7
 558:	fd cf       	rjmp	.-6      	; 0x554 <MI2C_u8RepeatedStart+0x4>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 55a:	91 b1       	in	r25, 0x01	; 1
 55c:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x10)							/* Check for repeated start transmitted */
 55e:	90 31       	cpi	r25, 0x10	; 16
 560:	71 f4       	brne	.+28     	; 0x57e <MI2C_u8RepeatedStart+0x2e>
	{
		return 0;								/* Return 0 for repeated start condition fail */
	}		
	I2C_TWDR=copy_u8WriteAddress;					/* Write SLA+R in TWI data register */
 562:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
 564:	84 e8       	ldi	r24, 0x84	; 132
 566:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 568:	06 b6       	in	r0, 0x36	; 54
 56a:	07 fe       	sbrs	r0, 7
 56c:	fd cf       	rjmp	.-6      	; 0x568 <MI2C_u8RepeatedStart+0x18>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 56e:	81 b1       	in	r24, 0x01	; 1
 570:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
 572:	80 34       	cpi	r24, 0x40	; 64
 574:	31 f0       	breq	.+12     	; 0x582 <MI2C_u8RepeatedStart+0x32>
	{
	return 1;									/* Return 1 to indicate ack received */
	}	
	if(status==0x48)							/* Check for SLA+R transmitted &nack received */
 576:	88 34       	cpi	r24, 0x48	; 72
 578:	31 f4       	brne	.+12     	; 0x586 <MI2C_u8RepeatedStart+0x36>
	{
	return 2;									/* Return 2 to indicate nack received */
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	08 95       	ret
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status!=0x10)							/* Check for repeated start transmitted */
	{
		return 0;								/* Return 0 for repeated start condition fail */
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
	{
	return 1;									/* Return 1 to indicate ack received */
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	08 95       	ret
	{
	return 2;									/* Return 2 to indicate nack received */
	}	
	else
	{
	return 3;									/* Else return 3 to indicate SLA+W failed */
 586:	83 e0       	ldi	r24, 0x03	; 3
	}	
}
 588:	08 95       	ret

0000058a <MI2C_u8ReadAck>:


u8 MI2C_u8ReadAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
 58a:	84 ec       	ldi	r24, 0xC4	; 196
 58c:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 58e:	06 b6       	in	r0, 0x36	; 54
 590:	07 fe       	sbrs	r0, 7
 592:	fd cf       	rjmp	.-6      	; 0x58e <MI2C_u8ReadAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 594:	83 b1       	in	r24, 0x03	; 3
}
 596:	08 95       	ret

00000598 <MI2C_u8ReadNAck>:

u8 MI2C_u8ReadNAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);			 /* Enable TWI and clear interrupt flag */
 598:	84 e8       	ldi	r24, 0x84	; 132
 59a:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 59c:	06 b6       	in	r0, 0x36	; 54
 59e:	07 fe       	sbrs	r0, 7
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <MI2C_u8ReadNAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 5a2:	83 b1       	in	r24, 0x03	; 3
}
 5a4:	08 95       	ret

000005a6 <MI2C_voidStop>:


void MI2C_voidStop(void)
{
	SET_BIT(I2C_TWCR,TWSTO);				 /* Enable TWI, generate stop */
 5a6:	86 b7       	in	r24, 0x36	; 54
 5a8:	80 61       	ori	r24, 0x10	; 16
 5aa:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWSTO)==1);		 /* Wait until stop condition execution */
 5ac:	86 b7       	in	r24, 0x36	; 54
 5ae:	84 fd       	sbrc	r24, 4
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <MI2C_voidStop+0x6>
}
 5b2:	08 95       	ret

000005b4 <MI2C_voidSlaveInit>:


void MI2C_voidSlaveInit(u8 copy_u8SlaveAddress)
{
	I2C_TWAR=copy_u8SlaveAddress;
 5b4:	82 b9       	out	0x02, r24	; 2
	SET_BIT(I2C_TWCR,TWEN);					/* Enable TWI     */
 5b6:	86 b7       	in	r24, 0x36	; 54
 5b8:	84 60       	ori	r24, 0x04	; 4
 5ba:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWEA);					/* Enable Generation for Ack */
 5bc:	86 b7       	in	r24, 0x36	; 54
 5be:	80 64       	ori	r24, 0x40	; 64
 5c0:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWINT);				/* Clear TWI Flag */
 5c2:	86 b7       	in	r24, 0x36	; 54
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	86 bf       	out	0x36, r24	; 54
}
 5c8:	08 95       	ret

000005ca <MI2C_u8SlaveListen>:
u8 MI2C_u8SlaveListen(void)
{
	u8 status;
	while(1)
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 5ca:	86 b7       	in	r24, 0x36	; 54
 5cc:	80 68       	ori	r24, 0x80	; 128
 5ce:	86 bf       	out	0x36, r24	; 54
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
 5d0:	06 b6       	in	r0, 0x36	; 54
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <MI2C_u8SlaveListen+0x6>
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 5d6:	81 b1       	in	r24, 0x01	; 1
 5d8:	88 7f       	andi	r24, 0xF8	; 248
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
 5da:	80 36       	cpi	r24, 0x60	; 96
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <MI2C_u8SlaveListen+0x2c>
 5de:	88 36       	cpi	r24, 0x68	; 104
 5e0:	61 f0       	breq	.+24     	; 0x5fa <MI2C_u8SlaveListen+0x30>
			return 0;								/* Return 0 to indicate ack returned */
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
 5e2:	88 3a       	cpi	r24, 0xA8	; 168
 5e4:	61 f0       	breq	.+24     	; 0x5fe <MI2C_u8SlaveListen+0x34>
 5e6:	80 3b       	cpi	r24, 0xB0	; 176
 5e8:	61 f0       	breq	.+24     	; 0x602 <MI2C_u8SlaveListen+0x38>
			return 1;								/* Return 1 to indicate ack returned */
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
 5ea:	80 37       	cpi	r24, 0x70	; 112
 5ec:	61 f0       	breq	.+24     	; 0x606 <MI2C_u8SlaveListen+0x3c>
 5ee:	88 37       	cpi	r24, 0x78	; 120
 5f0:	61 f7       	brne	.-40     	; 0x5ca <MI2C_u8SlaveListen>
			return 2;								/* Return 2 to indicate ack returned */
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	08 95       	ret
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
			return 0;								/* Return 0 to indicate ack returned */
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
			return 1;								/* Return 1 to indicate ack returned */
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
			return 2;								/* Return 2 to indicate ack returned */
 606:	82 e0       	ldi	r24, 0x02	; 2
		else
			continue;								/* Else continue */
	}
}
 608:	08 95       	ret

0000060a <I2C_Slave_Transmit>:

s8 I2C_Slave_Transmit(u8 copy_u8Data)
{
	s8 status;
	I2C_TWDR=copy_u8Data;						/* Write data to TWDR to be transmitted */
 60a:	83 b9       	out	0x03, r24	; 3
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 60c:	86 b7       	in	r24, 0x36	; 54
 60e:	80 68       	ori	r24, 0x80	; 128
 610:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 612:	06 b6       	in	r0, 0x36	; 54
 614:	07 fe       	sbrs	r0, 7
 616:	fd cf       	rjmp	.-6      	; 0x612 <I2C_Slave_Transmit+0x8>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 618:	81 b1       	in	r24, 0x01	; 1
	else										/* else return -4 */
	{
		return -4;
	}
	
}
 61a:	8c ef       	ldi	r24, 0xFC	; 252
 61c:	08 95       	ret

0000061e <MI2C_u8Slave_Receive>:

s8 MI2C_u8Slave_Receive(void)
{
	u8 status;									/* Declare variable */
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 61e:	86 b7       	in	r24, 0x36	; 54
 620:	80 68       	ori	r24, 0x80	; 128
 622:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 624:	06 b6       	in	r0, 0x36	; 54
 626:	07 fe       	sbrs	r0, 7
 628:	fd cf       	rjmp	.-6      	; 0x624 <MI2C_u8Slave_Receive+0x6>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 62a:	81 b1       	in	r24, 0x01	; 1
 62c:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x80||status==0x90)				/* Check for data received &ack returned */
 62e:	80 38       	cpi	r24, 0x80	; 128
 630:	11 f0       	breq	.+4      	; 0x636 <MI2C_u8Slave_Receive+0x18>
 632:	80 39       	cpi	r24, 0x90	; 144
 634:	11 f4       	brne	.+4      	; 0x63a <MI2C_u8Slave_Receive+0x1c>
	{
		return I2C_TWDR;						/* If yes then return received data */
 636:	83 b1       	in	r24, 0x03	; 3
 638:	08 95       	ret
	}
	
	/* Check for data received, nack returned & switched to not addressed slave mode */
	if(status==0x88||status==0x98)
 63a:	88 38       	cpi	r24, 0x88	; 136
 63c:	11 f0       	breq	.+4      	; 0x642 <MI2C_u8Slave_Receive+0x24>
 63e:	88 39       	cpi	r24, 0x98	; 152
 640:	11 f4       	brne	.+4      	; 0x646 <MI2C_u8Slave_Receive+0x28>
	{
		return I2C_TWDR;						/* If yes then return received data */
 642:	83 b1       	in	r24, 0x03	; 3
 644:	08 95       	ret
	}
	if(status==0xA0)							/* Check wether STOP/REPEATED START */
 646:	80 3a       	cpi	r24, 0xA0	; 160
 648:	29 f4       	brne	.+10     	; 0x654 <MI2C_u8Slave_Receive+0x36>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
 64a:	86 b7       	in	r24, 0x36	; 54
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	86 bf       	out	0x36, r24	; 54
		return -1;
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	08 95       	ret
	}
	else
	{
		return -2;			/* Else return -2 */
 654:	8e ef       	ldi	r24, 0xFE	; 254
	}
 656:	08 95       	ret

00000658 <__udivmodsi4>:
 658:	a1 e2       	ldi	r26, 0x21	; 33
 65a:	1a 2e       	mov	r1, r26
 65c:	aa 1b       	sub	r26, r26
 65e:	bb 1b       	sub	r27, r27
 660:	fd 01       	movw	r30, r26
 662:	0d c0       	rjmp	.+26     	; 0x67e <__udivmodsi4_ep>

00000664 <__udivmodsi4_loop>:
 664:	aa 1f       	adc	r26, r26
 666:	bb 1f       	adc	r27, r27
 668:	ee 1f       	adc	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	a2 17       	cp	r26, r18
 66e:	b3 07       	cpc	r27, r19
 670:	e4 07       	cpc	r30, r20
 672:	f5 07       	cpc	r31, r21
 674:	20 f0       	brcs	.+8      	; 0x67e <__udivmodsi4_ep>
 676:	a2 1b       	sub	r26, r18
 678:	b3 0b       	sbc	r27, r19
 67a:	e4 0b       	sbc	r30, r20
 67c:	f5 0b       	sbc	r31, r21

0000067e <__udivmodsi4_ep>:
 67e:	66 1f       	adc	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	1a 94       	dec	r1
 688:	69 f7       	brne	.-38     	; 0x664 <__udivmodsi4_loop>
 68a:	60 95       	com	r22
 68c:	70 95       	com	r23
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	9b 01       	movw	r18, r22
 694:	ac 01       	movw	r20, r24
 696:	bd 01       	movw	r22, r26
 698:	cf 01       	movw	r24, r30
 69a:	08 95       	ret

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
