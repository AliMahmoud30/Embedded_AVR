
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005e2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000adb  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000365  00000000  00000000  00001973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000662  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029e  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000522  00000000  00000000  00002792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
 1b2:	82 81       	ldd	r24, Z+2	; 0x02
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
 1d0:	08 95       	ret

000001d2 <main>:
#include "LCD.h"

int main(void)
{
	unsigned int x=0;
	LCD_inti();
 1d2:	0e 94 32 02 	call	0x464	; 0x464 <LCD_inti>

	LCD_send_string("Ali Mahmoud");
 1d6:	80 e6       	ldi	r24, 0x60	; 96
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_send_string>

#include "LCD.h"

int main(void)
{
	unsigned int x=0;
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
		{
			LCD_send_char(1+48);
			LCD_send_char(48);
			LCD_send_char(48);
			LCD_send_char(48);
			x=0;
 1e2:	aa 24       	eor	r10, r10
 1e4:	bb 24       	eor	r11, r11
			LCD_send_char((x%10)+48);
			
		}
		else if (x<1000)
		{
			LCD_send_char((x/1000)+48);
 1e6:	0f 2e       	mov	r0, r31
 1e8:	f8 ee       	ldi	r31, 0xE8	; 232
 1ea:	8f 2e       	mov	r8, r31
 1ec:	f3 e0       	ldi	r31, 0x03	; 3
 1ee:	9f 2e       	mov	r9, r31
 1f0:	f0 2d       	mov	r31, r0
			LCD_send_char((x/100)+48);
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f4 e6       	ldi	r31, 0x64	; 100
 1f6:	cf 2e       	mov	r12, r31
 1f8:	dd 24       	eor	r13, r13
 1fa:	f0 2d       	mov	r31, r0
			LCD_send_char(((x/10)%10)+48);
 1fc:	0f 2e       	mov	r0, r31
 1fe:	fa e0       	ldi	r31, 0x0A	; 10
 200:	ef 2e       	mov	r14, r31
 202:	ff 24       	eor	r15, r15
 204:	f0 2d       	mov	r31, r0
	LCD_inti();

	LCD_send_string("Ali Mahmoud");
    while(1)
    {
		LCD_move_cursor(2,1);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_move_cursor>
		if (x<10)
 20e:	0a 30       	cpi	r16, 0x0A	; 10
 210:	11 05       	cpc	r17, r1
 212:	a8 f4       	brcc	.+42     	; 0x23e <main+0x6c>
		{
			LCD_send_char((x/10)+48);
 214:	c8 01       	movw	r24, r16
 216:	b7 01       	movw	r22, r14
 218:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 21c:	d8 2f       	mov	r29, r24
 21e:	c6 2f       	mov	r28, r22
 220:	c0 5d       	subi	r28, 0xD0	; 208
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x/10)+48);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x/10)+48);
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x%10)+48);
 234:	8d 2f       	mov	r24, r29
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
 23c:	4f c0       	rjmp	.+158    	; 0x2dc <main+0x10a>
				
		}
		else if (x<100)
 23e:	04 36       	cpi	r16, 0x64	; 100
 240:	11 05       	cpc	r17, r1
 242:	d0 f4       	brcc	.+52     	; 0x278 <main+0xa6>
		{
			LCD_send_char((x/100)+48);
 244:	c8 01       	movw	r24, r16
 246:	b6 01       	movw	r22, r12
 248:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 24c:	c6 2f       	mov	r28, r22
 24e:	c0 5d       	subi	r28, 0xD0	; 208
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x/100)+48);
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x/10)+48);
 25c:	c8 01       	movw	r24, r16
 25e:	b7 01       	movw	r22, r14
 260:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 264:	c8 2f       	mov	r28, r24
 266:	86 2f       	mov	r24, r22
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x%10)+48);
 26e:	8c 2f       	mov	r24, r28
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
 276:	32 c0       	rjmp	.+100    	; 0x2dc <main+0x10a>
			
		}
		else if (x<1000)
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	08 3e       	cpi	r16, 0xE8	; 232
 27c:	18 07       	cpc	r17, r24
 27e:	08 f5       	brcc	.+66     	; 0x2c2 <main+0xf0>
		{
			LCD_send_char((x/1000)+48);
 280:	c8 01       	movw	r24, r16
 282:	b4 01       	movw	r22, r8
 284:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 288:	86 2f       	mov	r24, r22
 28a:	80 5d       	subi	r24, 0xD0	; 208
 28c:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x/100)+48);
 290:	c8 01       	movw	r24, r16
 292:	b6 01       	movw	r22, r12
 294:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 298:	86 2f       	mov	r24, r22
 29a:	80 5d       	subi	r24, 0xD0	; 208
 29c:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char(((x/10)%10)+48);
 2a0:	c8 01       	movw	r24, r16
 2a2:	b7 01       	movw	r22, r14
 2a4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 2a8:	c8 2f       	mov	r28, r24
 2aa:	cb 01       	movw	r24, r22
 2ac:	b7 01       	movw	r22, r14
 2ae:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 2b2:	80 5d       	subi	r24, 0xD0	; 208
 2b4:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char((x%10)+48);
 2b8:	8c 2f       	mov	r24, r28
 2ba:	80 5d       	subi	r24, 0xD0	; 208
 2bc:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
 2c0:	0d c0       	rjmp	.+26     	; 0x2dc <main+0x10a>
			
		}
		else
		{
			LCD_send_char(1+48);
 2c2:	81 e3       	ldi	r24, 0x31	; 49
 2c4:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char(48);
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char(48);
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			LCD_send_char(48);
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
			x=0;
 2da:	85 01       	movw	r16, r10
		}
		
		
		x++;
 2dc:	0f 5f       	subi	r16, 0xFF	; 255
 2de:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	94 e3       	ldi	r25, 0x34	; 52
 2e4:	ac e0       	ldi	r26, 0x0C	; 12
 2e6:	81 50       	subi	r24, 0x01	; 1
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	a0 40       	sbci	r26, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x114>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x11e>
 2f0:	00 00       	nop
 2f2:	89 cf       	rjmp	.-238    	; 0x206 <main+0x34>

000002f4 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_Enable+0xe>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_Enable+0x14>
 308:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 314:	08 95       	ret

00000316 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 316:	cf 93       	push	r28
 318:	c8 2f       	mov	r28, r24
	#if defined LCD_eghit_bit

 		DIO_Set_Pin_Value(LCD_D0,GET_BIT(data,0));
 31a:	48 2f       	mov	r20, r24
 31c:	41 70       	andi	r20, 0x01	; 1
 31e:	83 e3       	ldi	r24, 0x33	; 51
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D1,GET_BIT(data,1));
 326:	4c 2f       	mov	r20, r28
 328:	46 95       	lsr	r20
 32a:	41 70       	andi	r20, 0x01	; 1
 32c:	83 e3       	ldi	r24, 0x33	; 51
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D2,GET_BIT(data,2));
 334:	4c 2f       	mov	r20, r28
 336:	46 95       	lsr	r20
 338:	46 95       	lsr	r20
 33a:	41 70       	andi	r20, 0x01	; 1
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D3,GET_BIT(data,3));
 344:	4c 2f       	mov	r20, r28
 346:	46 95       	lsr	r20
 348:	46 95       	lsr	r20
 34a:	46 95       	lsr	r20
 34c:	41 70       	andi	r20, 0x01	; 1
 34e:	83 e3       	ldi	r24, 0x33	; 51
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 356:	4c 2f       	mov	r20, r28
 358:	42 95       	swap	r20
 35a:	4f 70       	andi	r20, 0x0F	; 15
 35c:	41 70       	andi	r20, 0x01	; 1
 35e:	83 e3       	ldi	r24, 0x33	; 51
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 366:	4c 2f       	mov	r20, r28
 368:	42 95       	swap	r20
 36a:	46 95       	lsr	r20
 36c:	47 70       	andi	r20, 0x07	; 7
 36e:	41 70       	andi	r20, 0x01	; 1
 370:	83 e3       	ldi	r24, 0x33	; 51
 372:	65 e0       	ldi	r22, 0x05	; 5
 374:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 378:	4c 2f       	mov	r20, r28
 37a:	42 95       	swap	r20
 37c:	46 95       	lsr	r20
 37e:	46 95       	lsr	r20
 380:	43 70       	andi	r20, 0x03	; 3
 382:	41 70       	andi	r20, 0x01	; 1
 384:	83 e3       	ldi	r24, 0x33	; 51
 386:	66 e0       	ldi	r22, 0x06	; 6
 388:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 38c:	4c 2f       	mov	r20, r28
 38e:	44 1f       	adc	r20, r20
 390:	44 27       	eor	r20, r20
 392:	44 1f       	adc	r20, r20
 394:	83 e3       	ldi	r24, 0x33	; 51
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 3a6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Enable>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
		LCD_Enable();
		
	 #endif
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_send_string>:

void LCD_send_string(char *data)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 3b4:	88 81       	ld	r24, Y
 3b6:	88 23       	and	r24, r24
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 3ba:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 3bc:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 3c0:	89 91       	ld	r24, Y+
 3c2:	88 23       	and	r24, r24
 3c4:	d9 f7       	brne	.-10     	; 0x3bc <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 3cc:	cf 93       	push	r28
 3ce:	c8 2f       	mov	r28, r24
	#if defined LCD_eghit_bit
	
	DIO_Set_Pin_Value(LCD_D0,GET_BIT(cmd,0));
 3d0:	48 2f       	mov	r20, r24
 3d2:	41 70       	andi	r20, 0x01	; 1
 3d4:	83 e3       	ldi	r24, 0x33	; 51
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D1,GET_BIT(cmd,1));
 3dc:	4c 2f       	mov	r20, r28
 3de:	46 95       	lsr	r20
 3e0:	41 70       	andi	r20, 0x01	; 1
 3e2:	83 e3       	ldi	r24, 0x33	; 51
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D2,GET_BIT(cmd,2));
 3ea:	4c 2f       	mov	r20, r28
 3ec:	46 95       	lsr	r20
 3ee:	46 95       	lsr	r20
 3f0:	41 70       	andi	r20, 0x01	; 1
 3f2:	83 e3       	ldi	r24, 0x33	; 51
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D3,GET_BIT(cmd,3));
 3fa:	4c 2f       	mov	r20, r28
 3fc:	46 95       	lsr	r20
 3fe:	46 95       	lsr	r20
 400:	46 95       	lsr	r20
 402:	41 70       	andi	r20, 0x01	; 1
 404:	83 e3       	ldi	r24, 0x33	; 51
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 40c:	4c 2f       	mov	r20, r28
 40e:	42 95       	swap	r20
 410:	4f 70       	andi	r20, 0x0F	; 15
 412:	41 70       	andi	r20, 0x01	; 1
 414:	83 e3       	ldi	r24, 0x33	; 51
 416:	64 e0       	ldi	r22, 0x04	; 4
 418:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 41c:	4c 2f       	mov	r20, r28
 41e:	42 95       	swap	r20
 420:	46 95       	lsr	r20
 422:	47 70       	andi	r20, 0x07	; 7
 424:	41 70       	andi	r20, 0x01	; 1
 426:	83 e3       	ldi	r24, 0x33	; 51
 428:	65 e0       	ldi	r22, 0x05	; 5
 42a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 42e:	4c 2f       	mov	r20, r28
 430:	42 95       	swap	r20
 432:	46 95       	lsr	r20
 434:	46 95       	lsr	r20
 436:	43 70       	andi	r20, 0x03	; 3
 438:	41 70       	andi	r20, 0x01	; 1
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	66 e0       	ldi	r22, 0x06	; 6
 43e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 442:	4c 2f       	mov	r20, r28
 444:	44 1f       	adc	r20, r20
 446:	44 27       	eor	r20, r20
 448:	44 1f       	adc	r20, r20
 44a:	83 e3       	ldi	r24, 0x33	; 51
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	
	DIO_Set_Pin_Value(LCD_RS,LOW);
 452:	80 e3       	ldi	r24, 0x30	; 48
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable(); 
 45c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Enable>
	DIO_Set_Pin_Value(LCD_RS,LOW);
	LCD_Enable();
	
	#endif

}
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <LCD_inti>:
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	91 ee       	ldi	r25, 0xE1	; 225
 468:	a4 e0       	ldi	r26, 0x04	; 4
 46a:	81 50       	subi	r24, 0x01	; 1
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	a0 40       	sbci	r26, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <LCD_inti+0x6>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_inti+0x10>
 474:	00 00       	nop
void LCD_inti(void)
{
	_delay_ms(200);
	#if defined LCD_eghit_bit
		// Data Pins 
	DIO_Set_Pin_Direction(LCD_D0,OUTPUT);
 476:	83 e3       	ldi	r24, 0x33	; 51
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D1,OUTPUT);
 480:	83 e3       	ldi	r24, 0x33	; 51
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D2,OUTPUT);
 48a:	83 e3       	ldi	r24, 0x33	; 51
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D3,OUTPUT);
 494:	83 e3       	ldi	r24, 0x33	; 51
 496:	63 e0       	ldi	r22, 0x03	; 3
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 49e:	83 e3       	ldi	r24, 0x33	; 51
 4a0:	64 e0       	ldi	r22, 0x04	; 4
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 4a8:	83 e3       	ldi	r24, 0x33	; 51
 4aa:	65 e0       	ldi	r22, 0x05	; 5
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 4b2:	83 e3       	ldi	r24, 0x33	; 51
 4b4:	66 e0       	ldi	r22, 0x06	; 6
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 4bc:	83 e3       	ldi	r24, 0x33	; 51
 4be:	67 e0       	ldi	r22, 0x07	; 7
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 4d0:	80 e3       	ldi	r24, 0x30	; 48
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT);
 4da:	80 e3       	ldi	r24, 0x30	; 48
 4dc:	62 e0       	ldi	r22, 0x02	; 2
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 4e4:	80 e3       	ldi	r24, 0x30	; 48
 4e6:	62 e0       	ldi	r22, 0x02	; 2
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(EGHIT_BITS);
 4ee:	88 e3       	ldi	r24, 0x38	; 56
 4f0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
 4f4:	af ec       	ldi	r26, 0xCF	; 207
 4f6:	b7 e0       	ldi	r27, 0x07	; 7
 4f8:	11 97       	sbiw	r26, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_inti+0x94>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_inti+0x9a>
 4fe:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 500:	8e e0       	ldi	r24, 0x0E	; 14
 502:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
 506:	8f ec       	ldi	r24, 0xCF	; 207
 508:	97 e0       	ldi	r25, 0x07	; 7
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_inti+0xa6>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_inti+0xac>
 510:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
 518:	af e1       	ldi	r26, 0x1F	; 31
 51a:	be e4       	ldi	r27, 0x4E	; 78
 51c:	11 97       	sbiw	r26, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_inti+0xb8>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_inti+0xbe>
 522:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
 52a:	8f ec       	ldi	r24, 0xCF	; 207
 52c:	97 e0       	ldi	r25, 0x07	; 7
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_inti+0xca>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_inti+0xd0>
 534:	00 00       	nop
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#endif
}	
 536:	08 95       	ret

00000538 <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
	
}
 53e:	08 95       	ret

00000540 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	0f 92       	push	r0
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	19 f4       	brne	.+6      	; 0x554 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 54e:	61 58       	subi	r22, 0x81	; 129
 550:	69 83       	std	Y+1, r22	; 0x01
 552:	0e c0       	rjmp	.+28     	; 0x570 <LCD_move_cursor+0x30>
	}
	else if (row==2)
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	19 f4       	brne	.+6      	; 0x55e <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 558:	61 54       	subi	r22, 0x41	; 65
 55a:	69 83       	std	Y+1, r22	; 0x01
 55c:	09 c0       	rjmp	.+18     	; 0x570 <LCD_move_cursor+0x30>
	}
	else if (row>2 || row<1 ||coloumn>16 || coloumn<1)
 55e:	81 50       	subi	r24, 0x01	; 1
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	20 f4       	brcc	.+8      	; 0x56c <LCD_move_cursor+0x2c>
 564:	61 31       	cpi	r22, 0x11	; 17
 566:	10 f4       	brcc	.+4      	; 0x56c <LCD_move_cursor+0x2c>
 568:	66 23       	and	r22, r22
 56a:	11 f4       	brne	.+4      	; 0x570 <LCD_move_cursor+0x30>
	{
		data=0x80;
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCD_send_cmd>
 576:	8f ec       	ldi	r24, 0xCF	; 207
 578:	97 e0       	ldi	r25, 0x07	; 7
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_move_cursor+0x3a>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_move_cursor+0x40>
 580:	00 00       	nop
	_delay_ms(1);
}
 582:	0f 90       	pop	r0
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <lcd_print>:

void lcd_print(char *str)
{
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	88 23       	and	r24, r24
 598:	51 f0       	breq	.+20     	; 0x5ae <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 59a:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 59c:	0e 94 8b 01 	call	0x316	; 0x316 <LCD_send_char>
		i++;
 5a0:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 5a2:	f8 01       	movw	r30, r16
 5a4:	ec 0f       	add	r30, r28
 5a6:	f1 1d       	adc	r31, r1
 5a8:	80 81       	ld	r24, Z
 5aa:	88 23       	and	r24, r24
 5ac:	b9 f7       	brne	.-18     	; 0x59c <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
