
LCD_16_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000508  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a31  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000342  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c1  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026e  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000529  00000000  00000000  00002512  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 02 	call	0x4ae	; 0x4ae <main>
  8a:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <LCD_Enable>:
	}
}

static void LCD_Enable(void)
{
	DIO_Set_Pin_Value(LCD_EN,HIGH);
 1d2:	89 e3       	ldi	r24, 0x39	; 57
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	9f e0       	ldi	r25, 0x0F	; 15
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Enable+0xe>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_Enable+0x14>
 1e6:	00 00       	nop
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
 1e8:	89 e3       	ldi	r24, 0x39	; 57
 1ea:	65 e0       	ldi	r22, 0x05	; 5
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
}
 1f2:	08 95       	ret

000001f4 <LCD_send_char>:
	#endif
}	

 // sent character to LCD
 void LCD_send_char(char data)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
		DIO_SET_HIGH_Nipple_Value(D,data);
		DIO_Set_Pin_Value(D,RS,HIGH);
		LCD_Enable();
	*/
		/*Write High Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,4));
 1f8:	48 2f       	mov	r20, r24
 1fa:	42 95       	swap	r20
 1fc:	4f 70       	andi	r20, 0x0F	; 15
 1fe:	41 70       	andi	r20, 0x01	; 1
 200:	89 e3       	ldi	r24, 0x39	; 57
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,5));
 208:	4c 2f       	mov	r20, r28
 20a:	42 95       	swap	r20
 20c:	46 95       	lsr	r20
 20e:	47 70       	andi	r20, 0x07	; 7
 210:	41 70       	andi	r20, 0x01	; 1
 212:	89 e3       	ldi	r24, 0x39	; 57
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,6));
 21a:	4c 2f       	mov	r20, r28
 21c:	42 95       	swap	r20
 21e:	46 95       	lsr	r20
 220:	46 95       	lsr	r20
 222:	43 70       	andi	r20, 0x03	; 3
 224:	41 70       	andi	r20, 0x01	; 1
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,7));
 22e:	4c 2f       	mov	r20, r28
 230:	44 1f       	adc	r20, r20
 232:	44 27       	eor	r20, r20
 234:	44 1f       	adc	r20, r20
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		
		DIO_Set_Pin_Value(LCD_RS,HIGH);
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 248:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
		
		/*Write LOW Nipple */
		DIO_Set_Pin_Value(LCD_D4,GET_BIT(data,0));
 24c:	4c 2f       	mov	r20, r28
 24e:	41 70       	andi	r20, 0x01	; 1
 250:	89 e3       	ldi	r24, 0x39	; 57
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D5,GET_BIT(data,1));
 258:	4c 2f       	mov	r20, r28
 25a:	46 95       	lsr	r20
 25c:	41 70       	andi	r20, 0x01	; 1
 25e:	89 e3       	ldi	r24, 0x39	; 57
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D6,GET_BIT(data,2));
 266:	4c 2f       	mov	r20, r28
 268:	46 95       	lsr	r20
 26a:	46 95       	lsr	r20
 26c:	41 70       	andi	r20, 0x01	; 1
 26e:	89 e3       	ldi	r24, 0x39	; 57
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		DIO_Set_Pin_Value(LCD_D7,GET_BIT(data,3));
 276:	c6 95       	lsr	r28
 278:	c6 95       	lsr	r28
 27a:	c6 95       	lsr	r28
 27c:	4c 2f       	mov	r20, r28
 27e:	41 70       	andi	r20, 0x01	; 1
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

		DIO_Set_Pin_Value(LCD_RS,HIGH);
 288:	89 e3       	ldi	r24, 0x39	; 57
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
		LCD_Enable();
 292:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
		
	 #endif
}
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCD_send_string>:

void LCD_send_string(char *data)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <LCD_send_string+0x18>
		LCD_Enable();
		
	 #endif
}

void LCD_send_string(char *data)
 2a6:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_send_char(*data);
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
	 #endif
}

void LCD_send_string(char *data)
{
	while((*data)!='\0')
 2ac:	89 91       	ld	r24, Y+
 2ae:	88 23       	and	r24, r24
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
		data++;
		
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <LCD_send_cmd>:
	_delay_ms(2);
	DIO_Set_Pin_Value(LCD_EN,LOW);
}

void LCD_send_cmd(char cmd)
{
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
	DIO_SET_HIGH_Nipple_Value(D,cmd);
	DIO_Set_Pin_Value(D,RS,LOW);
	LCD_Enable();	
	*/
	/*Write High Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,4));
 2bc:	48 2f       	mov	r20, r24
 2be:	42 95       	swap	r20
 2c0:	4f 70       	andi	r20, 0x0F	; 15
 2c2:	41 70       	andi	r20, 0x01	; 1
 2c4:	89 e3       	ldi	r24, 0x39	; 57
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,5));
 2cc:	4c 2f       	mov	r20, r28
 2ce:	42 95       	swap	r20
 2d0:	46 95       	lsr	r20
 2d2:	47 70       	andi	r20, 0x07	; 7
 2d4:	41 70       	andi	r20, 0x01	; 1
 2d6:	89 e3       	ldi	r24, 0x39	; 57
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,6));
 2de:	4c 2f       	mov	r20, r28
 2e0:	42 95       	swap	r20
 2e2:	46 95       	lsr	r20
 2e4:	46 95       	lsr	r20
 2e6:	43 70       	andi	r20, 0x03	; 3
 2e8:	41 70       	andi	r20, 0x01	; 1
 2ea:	89 e3       	ldi	r24, 0x39	; 57
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,7));
 2f2:	4c 2f       	mov	r20, r28
 2f4:	44 1f       	adc	r20, r20
 2f6:	44 27       	eor	r20, r20
 2f8:	44 1f       	adc	r20, r20
 2fa:	89 e3       	ldi	r24, 0x39	; 57
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
	DIO_Set_Pin_Value(LCD_RS,LOW);
 302:	89 e3       	ldi	r24, 0x39	; 57
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 30c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
	
	/*Write LOW Nipple */
	DIO_Set_Pin_Value(LCD_D4,GET_BIT(cmd,0));
 310:	4c 2f       	mov	r20, r28
 312:	41 70       	andi	r20, 0x01	; 1
 314:	89 e3       	ldi	r24, 0x39	; 57
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D5,GET_BIT(cmd,1));
 31c:	4c 2f       	mov	r20, r28
 31e:	46 95       	lsr	r20
 320:	41 70       	andi	r20, 0x01	; 1
 322:	89 e3       	ldi	r24, 0x39	; 57
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D6,GET_BIT(cmd,2));
 32a:	4c 2f       	mov	r20, r28
 32c:	46 95       	lsr	r20
 32e:	46 95       	lsr	r20
 330:	41 70       	andi	r20, 0x01	; 1
 332:	89 e3       	ldi	r24, 0x39	; 57
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LCD_D7,GET_BIT(cmd,3));
 33a:	c6 95       	lsr	r28
 33c:	c6 95       	lsr	r28
 33e:	c6 95       	lsr	r28
 340:	4c 2f       	mov	r20, r28
 342:	41 70       	andi	r20, 0x01	; 1
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>

	DIO_Set_Pin_Value(LCD_RS,LOW);
 34c:	89 e3       	ldi	r24, 0x39	; 57
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	LCD_Enable();
 356:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Enable>
	
	#endif

}
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <LCD_inti>:
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	91 ee       	ldi	r25, 0xE1	; 225
 362:	a4 e0       	ldi	r26, 0x04	; 4
 364:	81 50       	subi	r24, 0x01	; 1
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	a0 40       	sbci	r26, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <LCD_inti+0x6>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_inti+0x10>
 36e:	00 00       	nop
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	
    #elif defined LCD_four_bit
	// Data Pins 
	DIO_Set_Pin_Direction(LCD_D4,OUTPUT);
 370:	89 e3       	ldi	r24, 0x39	; 57
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D5,OUTPUT);
 37a:	89 e3       	ldi	r24, 0x39	; 57
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D6,OUTPUT);
 384:	89 e3       	ldi	r24, 0x39	; 57
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_D7,OUTPUT);
 38e:	89 e3       	ldi	r24, 0x39	; 57
 390:	63 e0       	ldi	r22, 0x03	; 3
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	// RS & RW & EN
	DIO_Set_Pin_Direction(LCD_EN,OUTPUT);
 398:	89 e3       	ldi	r24, 0x39	; 57
 39a:	65 e0       	ldi	r22, 0x05	; 5
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RS,OUTPUT);
 3a2:	89 e3       	ldi	r24, 0x39	; 57
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_RW,OUTPUT); 
 3ac:	89 e3       	ldi	r24, 0x39	; 57
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LCD_RW,LOW);
 3b6:	89 e3       	ldi	r24, 0x39	; 57
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	// Commands
	LCD_send_cmd(RETURN_HOME);
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3c6:	af e1       	ldi	r26, 0x1F	; 31
 3c8:	be e4       	ldi	r27, 0x4E	; 78
 3ca:	11 97       	sbiw	r26, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_inti+0x6c>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_inti+0x72>
 3d0:	00 00       	nop
	_delay_ms(10);	
	LCD_send_cmd(FOUR_BITS);
 3d2:	88 e2       	ldi	r24, 0x28	; 40
 3d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3d8:	8f ec       	ldi	r24, 0xCF	; 207
 3da:	97 e0       	ldi	r25, 0x07	; 7
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_inti+0x7e>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_inti+0x84>
 3e2:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(display_on_cursor_on);
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3ea:	af ec       	ldi	r26, 0xCF	; 207
 3ec:	b7 e0       	ldi	r27, 0x07	; 7
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_inti+0x90>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_inti+0x96>
 3f4:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 3fc:	8f e1       	ldi	r24, 0x1F	; 31
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <LCD_inti+0xa2>
 404:	00 c0       	rjmp	.+0      	; 0x406 <LCD_inti+0xa8>
 406:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 40e:	af ec       	ldi	r26, 0xCF	; 207
 410:	b7 e0       	ldi	r27, 0x07	; 7
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <LCD_inti+0xb4>
 416:	00 c0       	rjmp	.+0      	; 0x418 <LCD_inti+0xba>
 418:	00 00       	nop
	_delay_ms(1);
	#endif
}	
 41a:	08 95       	ret

0000041c <LCD_clear>:

}

void LCD_clear(void)
{
	LCD_send_cmd(CLR_SCREEN);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
	
}
 422:	08 95       	ret

00000424 <LCD_move_cursor>:

void LCD_move_cursor(char row, char coloumn)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	0f 92       	push	r0
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
	volatile char data;
	if(row==1)
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	19 f4       	brne	.+6      	; 0x438 <LCD_move_cursor+0x14>
	{
		data=0x80+(coloumn-1);
 432:	61 58       	subi	r22, 0x81	; 129
 434:	69 83       	std	Y+1, r22	; 0x01
 436:	18 c0       	rjmp	.+48     	; 0x468 <LCD_move_cursor+0x44>
	}
	else if (row==2)
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	19 f4       	brne	.+6      	; 0x442 <LCD_move_cursor+0x1e>
	{
		data=0xc0+(coloumn-1);
 43c:	61 54       	subi	r22, 0x41	; 65
 43e:	69 83       	std	Y+1, r22	; 0x01
 440:	13 c0       	rjmp	.+38     	; 0x468 <LCD_move_cursor+0x44>
	}
	else if (row==3)
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	19 f4       	brne	.+6      	; 0x44c <LCD_move_cursor+0x28>
	{
		data=0x90+(coloumn-1);
 446:	61 57       	subi	r22, 0x71	; 113
 448:	69 83       	std	Y+1, r22	; 0x01
 44a:	0e c0       	rjmp	.+28     	; 0x468 <LCD_move_cursor+0x44>
	}
	else if (row==4)
 44c:	84 30       	cpi	r24, 0x04	; 4
 44e:	19 f4       	brne	.+6      	; 0x456 <LCD_move_cursor+0x32>
	{
		data=0xD0+(coloumn-1);
 450:	61 53       	subi	r22, 0x31	; 49
 452:	69 83       	std	Y+1, r22	; 0x01
 454:	09 c0       	rjmp	.+18     	; 0x468 <LCD_move_cursor+0x44>
	}
	else if (row>4 || row<1 ||coloumn>16 || coloumn<1)
 456:	81 50       	subi	r24, 0x01	; 1
 458:	84 30       	cpi	r24, 0x04	; 4
 45a:	20 f4       	brcc	.+8      	; 0x464 <LCD_move_cursor+0x40>
 45c:	61 31       	cpi	r22, 0x11	; 17
 45e:	10 f4       	brcc	.+4      	; 0x464 <LCD_move_cursor+0x40>
 460:	66 23       	and	r22, r22
 462:	11 f4       	brne	.+4      	; 0x468 <LCD_move_cursor+0x44>
	{
		data=0x80;
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
 46e:	8f ec       	ldi	r24, 0xCF	; 207
 470:	97 e0       	ldi	r25, 0x07	; 7
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <LCD_move_cursor+0x4e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <LCD_move_cursor+0x54>
 478:	00 00       	nop
	_delay_ms(1);
}
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <lcd_print>:

void lcd_print(char *str)
{
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while (str[i] |= 0)
 48a:	fc 01       	movw	r30, r24
 48c:	80 81       	ld	r24, Z
 48e:	88 23       	and	r24, r24
 490:	51 f0       	breq	.+20     	; 0x4a6 <lcd_print+0x24>
	_delay_ms(1);
}

void lcd_print(char *str)
{
	unsigned char i=0;
 492:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
	{
		LCD_send_char(str[i]);
 494:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_send_char>
		i++;
 498:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
 49a:	f8 01       	movw	r30, r16
 49c:	ec 0f       	add	r30, r28
 49e:	f1 1d       	adc	r31, r1
 4a0:	80 81       	ld	r24, Z
 4a2:	88 23       	and	r24, r24
 4a4:	b9 f7       	brne	.-18     	; 0x494 <lcd_print+0x12>
	{
		LCD_send_char(str[i]);
		i++;
	}
}
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <main>:
#include "LCD.h"


int main(void)
{
	LCD_inti();
 4ae:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_inti>
	LCD_send_cmd(display_on_cursor_off);
 4b2:	8c e0       	ldi	r24, 0x0C	; 12
 4b4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_send_cmd>
	LCD_send_string("   Hello LCD");
 4b8:	80 e6       	ldi	r24, 0x60	; 96
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
	LCD_move_cursor(2,5);
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	65 e0       	ldi	r22, 0x05	; 5
 4c4:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
	LCD_send_string("Line 2");
 4c8:	8d e6       	ldi	r24, 0x6D	; 109
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
	LCD_move_cursor(3,5);
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	65 e0       	ldi	r22, 0x05	; 5
 4d4:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
	LCD_send_string("Line 3");
 4d8:	84 e7       	ldi	r24, 0x74	; 116
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
	LCD_move_cursor(4,5);
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	65 e0       	ldi	r22, 0x05	; 5
 4e4:	0e 94 12 02 	call	0x424	; 0x424 <LCD_move_cursor>
	LCD_send_string("Line 4");
 4e8:	8b e7       	ldi	r24, 0x7B	; 123
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_send_string>
 4f0:	8f e7       	ldi	r24, 0x7F	; 127
 4f2:	98 e3       	ldi	r25, 0x38	; 56
 4f4:	a1 e0       	ldi	r26, 0x01	; 1
 4f6:	81 50       	subi	r24, 0x01	; 1
 4f8:	90 40       	sbci	r25, 0x00	; 0
 4fa:	a0 40       	sbci	r26, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <main+0x48>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <main+0x52>
 500:	00 00       	nop
 502:	f6 cf       	rjmp	.-20     	; 0x4f0 <main+0x42>

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
