
Lighting_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000044e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042f  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a0  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Set_Port_Direction>:


/*        SET Direction         */ 
void DIO_Set_Port_Direction(u8 Base, u8 Direction)
{
	if((Direction == OUTPUT)||(Direction==1))
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	29 f4       	brne	.+10     	; 0xa0 <DIO_Set_Port_Direction+0xe>
	{
		(*(volatile u8*)(Base+1)) = 0xFF;
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	08 95       	ret
	}
	else if((Direction == INPUT)||(Direction==0))
  a0:	66 23       	and	r22, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <DIO_Set_Port_Direction+0x18>
	{
		(*(volatile u8*)(Base+1)) = 0x00;
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	08 95       	ret

000000ac <DIO_Set_Pin_Direction>:


void DIO_Set_Pin_Direction(u8 Base, u8 PIN, u8 Direction)
{

	if((Direction == OUTPUT) || (Direction == 1))
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	79 f4       	brne	.+30     	; 0xce <DIO_Set_Pin_Direction+0x22>
	{
		//SET_BIT((*(volatile u8*)(Base+1)),PIN);  // OUTPUT = 1
		(*(volatile u8*)(Base+1))|=(1<<PIN);
  b0:	e8 2f       	mov	r30, r24
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	21 81       	ldd	r18, Z+1	; 0x01
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_Set_Pin_Direction+0x16>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_Set_Pin_Direction+0x12>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	61 83       	std	Z+1, r22	; 0x01
  cc:	08 95       	ret
	}
	else if((Direction == INPUT) || (Direction == 0))
  ce:	44 23       	and	r20, r20
  d0:	79 f4       	brne	.+30     	; 0xf0 <DIO_Set_Pin_Direction+0x44>
	{
		//CLR_BIT((*(volatile u8*)(Base+1)),PIN); // INPUT = 0;
		(*(volatile u8*)(Base+1))&=(~(1<<PIN)); 
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_Set_Pin_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_Set_Pin_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <DIO_Set_Port_Value>:


/*        SET Value         */ 
void DIO_Set_Port_Value(u8 Base, u8 Value)
{
	(*(volatile u8*)(Base+2)) = Value;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	62 83       	std	Z+2, r22	; 0x02
}
  f8:	08 95       	ret

000000fa <DIO_Set_Pin_Value>:

void DIO_Set_Pin_Value(u8 Base,u8 PIN, u8 Value)
{
	if((Value == HIGH) || (Value == 1))
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	79 f4       	brne	.+30     	; 0x11c <DIO_Set_Pin_Value+0x22>
	{	//SET_BIT((*(volatile u8*)(Base+2)),PIN);
		(*(volatile u8*)(Base+2))|=(1<<PIN);
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	22 81       	ldd	r18, Z+2	; 0x02
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	ac 01       	movw	r20, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Set_Pin_Value+0x16>
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Set_Pin_Value+0x12>
 114:	ba 01       	movw	r22, r20
 116:	62 2b       	or	r22, r18
 118:	62 83       	std	Z+2, r22	; 0x02
 11a:	08 95       	ret
	}
	else if((Value == LOW) || (Value == 0))
 11c:	44 23       	and	r20, r20
 11e:	79 f4       	brne	.+30     	; 0x13e <DIO_Set_Pin_Value+0x44>
	{
		(*(volatile u8*)(Base+2))&=(~(1<<PIN));
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	22 81       	ldd	r18, Z+2	; 0x02
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_Set_Pin_Value+0x38>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_Set_Pin_Value+0x34>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	62 83       	std	Z+2, r22	; 0x02
 13e:	08 95       	ret

00000140 <DIO_Get_Port_value>:
	}
}

/*        Get Value         */ 
u8 DIO_Get_Port_value(u8 Base)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	0f 92       	push	r0
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
	 volatile u8 Value;
	Value = (*(volatile u8*)(Base));
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	89 83       	std	Y+1, r24	; 0x01
	return Value;
 152:	89 81       	ldd	r24, Y+1	; 0x01
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <DIO_Get_Pin_value>:


u8 DIO_Get_Pin_value (u8 Base, u8 PIN)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	volatile u8 Value;
	Value = ((*(volatile u8*)(Base))>>PIN)&1;	
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 01       	movw	r18, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Get_Pin_value+0x1a>
 172:	35 95       	asr	r19
 174:	27 95       	ror	r18
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Get_Pin_value+0x16>
 17a:	b9 01       	movw	r22, r18
 17c:	61 70       	andi	r22, 0x01	; 1
 17e:	69 83       	std	Y+1, r22	; 0x01
	return Value;
 180:	89 81       	ldd	r24, Y+1	; 0x01
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <DIO_Toggle_Pin>:

void DIO_Toggle_Pin(u8 Base, u8 PIN)
{
	*((volatile u8*)(Base+2))^=(1<<PIN);
 18a:	e8 2f       	mov	r30, r24
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	22 81       	ldd	r18, Z+2	; 0x02
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ac 01       	movw	r20, r24
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_Toggle_Pin+0x12>
 198:	44 0f       	add	r20, r20
 19a:	55 1f       	adc	r21, r21
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_Toggle_Pin+0xe>
 1a0:	ba 01       	movw	r22, r20
 1a2:	62 27       	eor	r22, r18
 1a4:	62 83       	std	Z+2, r22	; 0x02
}
 1a6:	08 95       	ret

000001a8 <DIO_SET_HIGH_Nipple_Value>:
/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
 1a8:	e8 2f       	mov	r30, r24
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	82 81       	ldd	r24, Z+2	; 0x02
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=Data;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02

/* Set HIGH NIPPLE */

void DIO_SET_HIGH_Nipple_Value(u8 Base, u8 Data)
{
	Data<<=4;
 1b4:	62 95       	swap	r22
 1b6:	60 7f       	andi	r22, 0xF0	; 240
	(*(volatile u8*)(Base+2)) &=0x0f;  //to CLR HIGH NIPPLE Pins before write 
	(*(volatile u8*)(Base+2)) ^=Data;
 1b8:	68 27       	eor	r22, r24
 1ba:	62 83       	std	Z+2, r22	; 0x02
	
} 
 1bc:	08 95       	ret

000001be <DIO_SET_LOW_Nipple_Value>:

/* Set LOW NIPPLE */

void DIO_SET_LOW_Nipple_Value(u8 Base, u8 Data)
{
	(*(volatile u8*)(Base+2)) &=0xf0;  //to CLR LOW NIPPLE before write
 1be:	e8 2f       	mov	r30, r24
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	82 83       	std	Z+2, r24	; 0x02
	(*(volatile u8*)(Base+2)) ^=(Data & 0x0F) ;
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	6f 70       	andi	r22, 0x0F	; 15
 1cc:	68 27       	eor	r22, r24
 1ce:	62 83       	std	Z+2, r22	; 0x02
	
}
 1d0:	08 95       	ret

000001d2 <main>:


int main(void)
{
	/* DIO Initialization  */
	DIO_Set_Pin_Direction(LED1,OUTPUT);
 1d2:	89 e3       	ldi	r24, 0x39	; 57
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED2,OUTPUT);
 1dc:	89 e3       	ldi	r24, 0x39	; 57
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED3,OUTPUT);
 1e6:	89 e3       	ldi	r24, 0x39	; 57
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED4,OUTPUT);
 1f0:	89 e3       	ldi	r24, 0x39	; 57
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	0e 94 56 00 	call	0xac	; 0xac <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Value(LED1, LOW);
 1fa:	89 e3       	ldi	r24, 0x39	; 57
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LED2, LOW);
 204:	89 e3       	ldi	r24, 0x39	; 57
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LED3, LOW);
 20e:	89 e3       	ldi	r24, 0x39	; 57
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	DIO_Set_Pin_Value(LED4, LOW);
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
	/* I2C Initialization */
	MI2C_voidSlaveInit(Slave_ADDRESS);		
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	0e 94 9a 01 	call	0x334	; 0x334 <MI2C_voidSlaveInit>
	/* Variables  */
	
	u8 I2C_Data_Received;
    while(1)
    {
		switch (MI2C_u8SlaveListen())
 228:	0e 94 a5 01 	call	0x34a	; 0x34a <MI2C_u8SlaveListen>
 22c:	88 23       	and	r24, r24
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x56>
		{
			case 0:
				/**************** Slave Receiver *************************/
				I2C_Data_Received = MI2C_u8Slave_Receive();
 230:	0e 94 e6 01 	call	0x3cc	; 0x3cc <MI2C_u8Slave_Receive>
 234:	c8 2f       	mov	r28, r24
				DIO_Set_Pin_Value(LED1, GET_BIT(I2C_Data_Received,0));
 236:	48 2f       	mov	r20, r24
 238:	41 70       	andi	r20, 0x01	; 1
 23a:	89 e3       	ldi	r24, 0x39	; 57
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
				DIO_Set_Pin_Value(LED2, GET_BIT(I2C_Data_Received,1));
 242:	4c 2f       	mov	r20, r28
 244:	46 95       	lsr	r20
 246:	41 70       	andi	r20, 0x01	; 1
 248:	89 e3       	ldi	r24, 0x39	; 57
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
				DIO_Set_Pin_Value(LED3, GET_BIT(I2C_Data_Received,2));
 250:	4c 2f       	mov	r20, r28
 252:	46 95       	lsr	r20
 254:	46 95       	lsr	r20
 256:	41 70       	andi	r20, 0x01	; 1
 258:	89 e3       	ldi	r24, 0x39	; 57
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
				DIO_Set_Pin_Value(LED4, GET_BIT(I2C_Data_Received,3));
 260:	c6 95       	lsr	r28
 262:	c6 95       	lsr	r28
 264:	c6 95       	lsr	r28
 266:	4c 2f       	mov	r20, r28
 268:	41 70       	andi	r20, 0x01	; 1
 26a:	89 e3       	ldi	r24, 0x39	; 57
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_Set_Pin_Value>
			
				break;
 272:	da cf       	rjmp	.-76     	; 0x228 <main+0x56>

00000274 <MI2C_u8voidInit>:

#define F_CPU 8000000ul

void MI2C_u8voidInit(void)
{
	I2C_TWBR=(u8)(((F_CPU/I2C_CLOCK)-16)/(2*I2C_Prescaler));
 274:	60 e9       	ldi	r22, 0x90	; 144
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a9 01       	movw	r20, r18
 282:	0e 94 03 02 	call	0x406	; 0x406 <__udivmodsi4>
 286:	20 b9       	out	0x00, r18	; 0
	//I2C_TWBR=72;
	switch (I2C_Prescaler)
	{
		case DIV_1 : CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
 288:	08 98       	cbi	0x01, 0	; 1
 28a:	09 98       	cbi	0x01, 1	; 1
		case DIV_16: CLR_BIT(I2C_TWSR,0);SET_BIT(I2C_TWSR,1); break;
		case DIV_64: CLR_BIT(I2C_TWSR,0);CLR_BIT(I2C_TWSR,1); break;
		default:
		break;
	}
}
 28c:	08 95       	ret

0000028e <MI2C_voidStart>:

void MI2C_voidStart(void)
{
	u8 status;
	u8 ReturnVal=1;
	I2C_TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);  /* Enable TWI, Generate Start Condition, Clear TWI Flag  */
 28e:	84 ea       	ldi	r24, 0xA4	; 164
 290:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);		   /* Wait until TWI finish its current job */
 292:	06 b6       	in	r0, 0x36	; 54
 294:	07 fe       	sbrs	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <MI2C_voidStart+0x4>
	status=I2C_TWSR & 0xF8;
 298:	81 b1       	in	r24, 0x01	; 1
	else
	{
		ReturnVal=0;
	}
	return ReturnVal;
}
 29a:	08 95       	ret

0000029c <MI2C_u8WriteAddress>:

u8 MI2C_u8WriteAddress(u8 copy_u8WriteAddress)
{	
	u8 status;
	u8 ReturnVal;
	I2C_TWDR=copy_u8WriteAddress;
 29c:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
 29e:	84 e8       	ldi	r24, 0x84	; 132
 2a0:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
 2a2:	06 b6       	in	r0, 0x36	; 54
 2a4:	07 fe       	sbrs	r0, 7
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <MI2C_u8WriteAddress+0x6>
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
 2a8:	81 b1       	in	r24, 0x01	; 1
 2aa:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
 2ac:	88 31       	cpi	r24, 0x18	; 24
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <MI2C_u8WriteAddress+0x1a>
	{
		ReturnVal=1;
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
 2b0:	80 32       	cpi	r24, 0x20	; 32
 2b2:	21 f4       	brne	.+8      	; 0x2bc <MI2C_u8WriteAddress+0x20>
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MI2C_u8WriteAddress+0x1e>
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);		/* Enable TWI and clear interrupt flag */
	while(GET_BIT(I2C_TWCR,TWINT)==0);  /* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;				/* Read TWI status register */
	if(status==0x18)					/* Check for SLA+W transmitted & ack received */
	{
		ReturnVal=1;
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <MI2C_u8WriteAddress+0x20>
	}
	else if(status==0x20)	            /* Check for SLA+W transmitted &nack received */
	{
		ReturnVal=0;
 2ba:	90 e0       	ldi	r25, 0x00	; 0
	}
	return ReturnVal;
}
 2bc:	89 2f       	mov	r24, r25
 2be:	08 95       	ret

000002c0 <MI2C_u8WriteData>:
u8 MI2C_u8WriteData(u8 copy_u8Data)
{
	u8 status;
	u8 ReturnVal;
	
	I2C_TWDR=copy_u8Data;					/* Copy data in TWI data register */
 2c0:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWINT)|(1<<TWEN);			/* Enable TWI and clear interrupt flag */
 2c2:	84 e8       	ldi	r24, 0x84	; 132
 2c4:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		/* Wait until TWI finish its current job */
 2c6:	06 b6       	in	r0, 0x36	; 54
 2c8:	07 fe       	sbrs	r0, 7
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <MI2C_u8WriteData+0x6>
	status=I2C_TWSR & 0xF8;					/* Read TWI status register */
 2cc:	81 b1       	in	r24, 0x01	; 1
	}
	else if (status==0x30)					/* Check for Data transmitted &nack received */
	{
		ReturnVal=0;
	}
}
 2ce:	08 95       	ret

000002d0 <MI2C_u8RepeatedStart>:

/* I2C repeated start function */
u8 MI2C_u8RepeatedStart(u8 copy_u8WriteAddress) 
{
	u8 status;									/* Declare variable */
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
 2d0:	94 ea       	ldi	r25, 0xA4	; 164
 2d2:	96 bf       	out	0x36, r25	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 2d4:	06 b6       	in	r0, 0x36	; 54
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <MI2C_u8RepeatedStart+0x4>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 2da:	91 b1       	in	r25, 0x01	; 1
 2dc:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x10)							/* Check for repeated start transmitted */
 2de:	90 31       	cpi	r25, 0x10	; 16
 2e0:	71 f4       	brne	.+28     	; 0x2fe <MI2C_u8RepeatedStart+0x2e>
	{
		return 0;								/* Return 0 for repeated start condition fail */
	}		
	I2C_TWDR=copy_u8WriteAddress;					/* Write SLA+R in TWI data register */
 2e2:	83 b9       	out	0x03, r24	; 3
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 2e8:	06 b6       	in	r0, 0x36	; 54
 2ea:	07 fe       	sbrs	r0, 7
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <MI2C_u8RepeatedStart+0x18>
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
 2ee:	81 b1       	in	r24, 0x01	; 1
 2f0:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
 2f2:	80 34       	cpi	r24, 0x40	; 64
 2f4:	31 f0       	breq	.+12     	; 0x302 <MI2C_u8RepeatedStart+0x32>
	{
	return 1;									/* Return 1 to indicate ack received */
	}	
	if(status==0x48)							/* Check for SLA+R transmitted &nack received */
 2f6:	88 34       	cpi	r24, 0x48	; 72
 2f8:	31 f4       	brne	.+12     	; 0x306 <MI2C_u8RepeatedStart+0x36>
	{
	return 2;									/* Return 2 to indicate nack received */
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	08 95       	ret
	I2C_TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status!=0x10)							/* Check for repeated start transmitted */
	{
		return 0;								/* Return 0 for repeated start condition fail */
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
	status=I2C_TWSR & 0xF8;							/* Read TWI status register */
	if(status==0x40)							/* Check for SLA+R transmitted &ack received */
	{
	return 1;									/* Return 1 to indicate ack received */
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
	{
	return 2;									/* Return 2 to indicate nack received */
	}	
	else
	{
	return 3;									/* Else return 3 to indicate SLA+W failed */
 306:	83 e0       	ldi	r24, 0x03	; 3
	}	
}
 308:	08 95       	ret

0000030a <MI2C_u8ReadAck>:


u8 MI2C_u8ReadAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
 30a:	84 ec       	ldi	r24, 0xC4	; 196
 30c:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 30e:	06 b6       	in	r0, 0x36	; 54
 310:	07 fe       	sbrs	r0, 7
 312:	fd cf       	rjmp	.-6      	; 0x30e <MI2C_u8ReadAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 314:	83 b1       	in	r24, 0x03	; 3
}
 316:	08 95       	ret

00000318 <MI2C_u8ReadNAck>:

u8 MI2C_u8ReadNAck(void)
{
	I2C_TWCR=(1<<TWEN)|(1<<TWINT);			 /* Enable TWI and clear interrupt flag */
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);		 /* Wait until TWI finish its current job */
 31c:	06 b6       	in	r0, 0x36	; 54
 31e:	07 fe       	sbrs	r0, 7
 320:	fd cf       	rjmp	.-6      	; 0x31c <MI2C_u8ReadNAck+0x4>
	return I2C_TWDR;						 /* Return Received Data */
 322:	83 b1       	in	r24, 0x03	; 3
}
 324:	08 95       	ret

00000326 <MI2C_voidStop>:


void MI2C_voidStop(void)
{
	SET_BIT(I2C_TWCR,TWSTO);				 /* Enable TWI, generate stop */
 326:	86 b7       	in	r24, 0x36	; 54
 328:	80 61       	ori	r24, 0x10	; 16
 32a:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(I2C_TWCR,TWSTO)==1);		 /* Wait until stop condition execution */
 32c:	86 b7       	in	r24, 0x36	; 54
 32e:	84 fd       	sbrc	r24, 4
 330:	fd cf       	rjmp	.-6      	; 0x32c <MI2C_voidStop+0x6>
}
 332:	08 95       	ret

00000334 <MI2C_voidSlaveInit>:


void MI2C_voidSlaveInit(u8 copy_u8SlaveAddress)
{
	I2C_TWAR=copy_u8SlaveAddress;
 334:	82 b9       	out	0x02, r24	; 2
	SET_BIT(I2C_TWCR,TWEN);					/* Enable TWI     */
 336:	86 b7       	in	r24, 0x36	; 54
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWEA);					/* Enable Generation for Ack */
 33c:	86 b7       	in	r24, 0x36	; 54
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	86 bf       	out	0x36, r24	; 54
	SET_BIT(I2C_TWCR,TWINT);				/* Clear TWI Flag */
 342:	86 b7       	in	r24, 0x36	; 54
 344:	80 68       	ori	r24, 0x80	; 128
 346:	86 bf       	out	0x36, r24	; 54
}
 348:	08 95       	ret

0000034a <MI2C_u8SlaveListen>:
u8 MI2C_u8SlaveListen(void)
{
	u8 status;
	while(1)
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 34a:	86 b7       	in	r24, 0x36	; 54
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	86 bf       	out	0x36, r24	; 54
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
 350:	06 b6       	in	r0, 0x36	; 54
 352:	07 fe       	sbrs	r0, 7
 354:	fd cf       	rjmp	.-6      	; 0x350 <MI2C_u8SlaveListen+0x6>
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 356:	81 b1       	in	r24, 0x01	; 1
 358:	88 7f       	andi	r24, 0xF8	; 248
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
 35a:	80 36       	cpi	r24, 0x60	; 96
 35c:	61 f0       	breq	.+24     	; 0x376 <MI2C_u8SlaveListen+0x2c>
 35e:	88 36       	cpi	r24, 0x68	; 104
 360:	61 f0       	breq	.+24     	; 0x37a <MI2C_u8SlaveListen+0x30>
			return 0;								/* Return 0 to indicate ack returned */
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
 362:	88 3a       	cpi	r24, 0xA8	; 168
 364:	61 f0       	breq	.+24     	; 0x37e <MI2C_u8SlaveListen+0x34>
 366:	80 3b       	cpi	r24, 0xB0	; 176
 368:	61 f0       	breq	.+24     	; 0x382 <MI2C_u8SlaveListen+0x38>
			return 1;								/* Return 1 to indicate ack returned */
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
 36a:	80 37       	cpi	r24, 0x70	; 112
 36c:	61 f0       	breq	.+24     	; 0x386 <MI2C_u8SlaveListen+0x3c>
 36e:	88 37       	cpi	r24, 0x78	; 120
 370:	61 f7       	brne	.-40     	; 0x34a <MI2C_u8SlaveListen>
			return 2;								/* Return 2 to indicate ack returned */
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	08 95       	ret
	{
		SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
		while((GET_BIT(I2C_TWCR,TWINT))==0);		/* Wait to be addressed */
		status=I2C_TWSR & 0xF8;						/* Read TWI status register */
		if((status==0x60)||(status==0x68))			/* Own SLA+W received &ack returned */
			return 0;								/* Return 0 to indicate ack returned */
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 95       	ret
		if((status==0xA8)||(status==0xB0))			/* Own SLA+R received &ack returned */
			return 1;								/* Return 1 to indicate ack returned */
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
		if((status==0x70)||(status==0x78))			/* General call received &ack returned */
			return 2;								/* Return 2 to indicate ack returned */
 386:	82 e0       	ldi	r24, 0x02	; 2
		else
			continue;								/* Else continue */
	}
}
 388:	08 95       	ret

0000038a <I2C_Slave_Transmit>:

s8 I2C_Slave_Transmit(u8 copy_u8Data)
{
	u8 status;
	I2C_TWDR=copy_u8Data;						/* Write data to TWDR to be transmitted */
 38a:	83 b9       	out	0x03, r24	; 3
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 38c:	86 b7       	in	r24, 0x36	; 54
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 392:	06 b6       	in	r0, 0x36	; 54
 394:	07 fe       	sbrs	r0, 7
 396:	fd cf       	rjmp	.-6      	; 0x392 <I2C_Slave_Transmit+0x8>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 398:	81 b1       	in	r24, 0x01	; 1
 39a:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0xA0)							/* Check for STOP/REPEATED START received */
 39c:	80 3a       	cpi	r24, 0xA0	; 160
 39e:	29 f4       	brne	.+10     	; 0x3aa <I2C_Slave_Transmit+0x20>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
 3a0:	86 b7       	in	r24, 0x36	; 54
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	86 bf       	out	0x36, r24	; 54
		return -1;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	08 95       	ret
	}
	if(status==0xB8)							/* Check for data transmitted & ack received */
 3aa:	88 3b       	cpi	r24, 0xB8	; 184
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <I2C_Slave_Transmit+0x3a>
	{
		return 0;								/* If yes then return 0 */
	}
	if(status==0xC0)							/* Check for data transmitted & nack received */
 3ae:	80 3c       	cpi	r24, 0xC0	; 192
 3b0:	29 f4       	brne	.+10     	; 0x3bc <I2C_Slave_Transmit+0x32>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -2 */
 3b2:	86 b7       	in	r24, 0x36	; 54
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	86 bf       	out	0x36, r24	; 54
		return -2;
 3b8:	8e ef       	ldi	r24, 0xFE	; 254
 3ba:	08 95       	ret
	}
	if(status==0xC8)							/* Last byte transmitted with ack received */
 3bc:	88 3c       	cpi	r24, 0xC8	; 200
 3be:	21 f4       	brne	.+8      	; 0x3c8 <I2C_Slave_Transmit+0x3e>
	{
		return -3;								/* If yes then return -3 */
 3c0:	8d ef       	ldi	r24, 0xFD	; 253
 3c2:	08 95       	ret
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
		return -1;
	}
	if(status==0xB8)							/* Check for data transmitted & ack received */
	{
		return 0;								/* If yes then return 0 */
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
	{
		return -3;								/* If yes then return -3 */
	}
	else										/* else return -4 */
	{
		return -4;
 3c8:	8c ef       	ldi	r24, 0xFC	; 252
	}
	
}
 3ca:	08 95       	ret

000003cc <MI2C_u8Slave_Receive>:

s8 MI2C_u8Slave_Receive(void)
{
	u8 status;									/* Declare variable */
	SET_BIT(I2C_TWCR,TWINT);					/* Clear TWI Flag */
 3cc:	86 b7       	in	r24, 0x36	; 54
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	86 bf       	out	0x36, r24	; 54
	while (GET_BIT(I2C_TWCR,TWINT)==0);			/* Wait until TWI finish its current job */
 3d2:	06 b6       	in	r0, 0x36	; 54
 3d4:	07 fe       	sbrs	r0, 7
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <MI2C_u8Slave_Receive+0x6>
	status=I2C_TWSR & 0xF8;						/* Read TWI status register */
 3d8:	81 b1       	in	r24, 0x01	; 1
 3da:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x80||status==0x90)				/* Check for data received &ack returned */
 3dc:	80 38       	cpi	r24, 0x80	; 128
 3de:	11 f0       	breq	.+4      	; 0x3e4 <MI2C_u8Slave_Receive+0x18>
 3e0:	80 39       	cpi	r24, 0x90	; 144
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <MI2C_u8Slave_Receive+0x1c>
	{
		return I2C_TWDR;						/* If yes then return received data */
 3e4:	83 b1       	in	r24, 0x03	; 3
 3e6:	08 95       	ret
	}
	
	/* Check for data received, nack returned & switched to not addressed slave mode */
	if(status==0x88||status==0x98)
 3e8:	88 38       	cpi	r24, 0x88	; 136
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <MI2C_u8Slave_Receive+0x24>
 3ec:	88 39       	cpi	r24, 0x98	; 152
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <MI2C_u8Slave_Receive+0x28>
	{
		return I2C_TWDR;						/* If yes then return received data */
 3f0:	83 b1       	in	r24, 0x03	; 3
 3f2:	08 95       	ret
	}
	if(status==0xA0)							/* Check wether STOP/REPEATED START */
 3f4:	80 3a       	cpi	r24, 0xA0	; 160
 3f6:	29 f4       	brne	.+10     	; 0x402 <MI2C_u8Slave_Receive+0x36>
	{
		SET_BIT(I2C_TWCR,TWINT);				/* Clear interrupt flag & return -1 */
 3f8:	86 b7       	in	r24, 0x36	; 54
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	86 bf       	out	0x36, r24	; 54
		return -1;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	08 95       	ret
	}
	else
	{
		return -2;			/* Else return -2 */
 402:	8e ef       	ldi	r24, 0xFE	; 254
	}
 404:	08 95       	ret

00000406 <__udivmodsi4>:
 406:	a1 e2       	ldi	r26, 0x21	; 33
 408:	1a 2e       	mov	r1, r26
 40a:	aa 1b       	sub	r26, r26
 40c:	bb 1b       	sub	r27, r27
 40e:	fd 01       	movw	r30, r26
 410:	0d c0       	rjmp	.+26     	; 0x42c <__udivmodsi4_ep>

00000412 <__udivmodsi4_loop>:
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	ee 1f       	adc	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	a2 17       	cp	r26, r18
 41c:	b3 07       	cpc	r27, r19
 41e:	e4 07       	cpc	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	20 f0       	brcs	.+8      	; 0x42c <__udivmodsi4_ep>
 424:	a2 1b       	sub	r26, r18
 426:	b3 0b       	sbc	r27, r19
 428:	e4 0b       	sbc	r30, r20
 42a:	f5 0b       	sbc	r31, r21

0000042c <__udivmodsi4_ep>:
 42c:	66 1f       	adc	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	1a 94       	dec	r1
 436:	69 f7       	brne	.-38     	; 0x412 <__udivmodsi4_loop>
 438:	60 95       	com	r22
 43a:	70 95       	com	r23
 43c:	80 95       	com	r24
 43e:	90 95       	com	r25
 440:	9b 01       	movw	r18, r22
 442:	ac 01       	movw	r20, r24
 444:	bd 01       	movw	r22, r26
 446:	cf 01       	movw	r24, r30
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
